
DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c94  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fc8  08006e1c  08006e1c  00016e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009de4  08009de4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08009de4  08009de4  00019de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dec  08009dec  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dec  08009dec  00019dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009df0  08009df0  00019df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08009df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000248  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000264  20000264  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e297  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ea1  00000000  00000000  0003e2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001570  00000000  00000000  00042188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b8  00000000  00000000  000436f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a2a  00000000  00000000  00044ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce1c  00000000  00000000  000694da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3130  00000000  00000000  000862f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00159426  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005754  00000000  00000000  0015947c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006e04 	.word	0x08006e04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08006e04 	.word	0x08006e04

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <led7_init>:
uint8_t led7seg[4] = {0, 1, 2, 3}; //4 index
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;
uint16_t led7_index = 0;

void led7_init(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2140      	movs	r1, #64	; 0x40
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <led7_init+0x14>)
 80004da:	f002 fbcb 	bl	8002c74 <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021800 	.word	0x40021800

080004e8 <led7_Scan>:

void led7_Scan(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80004ec:	4b3f      	ldr	r3, [pc, #252]	; (80005ec <led7_Scan+0x104>)
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	4b3d      	ldr	r3, [pc, #244]	; (80005ec <led7_Scan+0x104>)
 80004f6:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80004f8:	4b3d      	ldr	r3, [pc, #244]	; (80005f0 <led7_Scan+0x108>)
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	461a      	mov	r2, r3
 80004fe:	4b3d      	ldr	r3, [pc, #244]	; (80005f4 <led7_Scan+0x10c>)
 8000500:	5c9b      	ldrb	r3, [r3, r2]
 8000502:	021b      	lsls	r3, r3, #8
 8000504:	b21a      	sxth	r2, r3
 8000506:	4b39      	ldr	r3, [pc, #228]	; (80005ec <led7_Scan+0x104>)
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	b21b      	sxth	r3, r3
 800050c:	4313      	orrs	r3, r2
 800050e:	b21b      	sxth	r3, r3
 8000510:	b29a      	uxth	r2, r3
 8000512:	4b36      	ldr	r3, [pc, #216]	; (80005ec <led7_Scan+0x104>)
 8000514:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8000516:	4b36      	ldr	r3, [pc, #216]	; (80005f0 <led7_Scan+0x108>)
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	2b03      	cmp	r3, #3
 800051c:	d846      	bhi.n	80005ac <led7_Scan+0xc4>
 800051e:	a201      	add	r2, pc, #4	; (adr r2, 8000524 <led7_Scan+0x3c>)
 8000520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000524:	08000535 	.word	0x08000535
 8000528:	08000553 	.word	0x08000553
 800052c:	08000571 	.word	0x08000571
 8000530:	0800058f 	.word	0x0800058f
	case 0:
		spi_buffer |= 0x00b0;
 8000534:	4b2d      	ldr	r3, [pc, #180]	; (80005ec <led7_Scan+0x104>)
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800053c:	b29a      	uxth	r2, r3
 800053e:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <led7_Scan+0x104>)
 8000540:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8000542:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <led7_Scan+0x104>)
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800054a:	b29a      	uxth	r2, r3
 800054c:	4b27      	ldr	r3, [pc, #156]	; (80005ec <led7_Scan+0x104>)
 800054e:	801a      	strh	r2, [r3, #0]
		break;
 8000550:	e02d      	b.n	80005ae <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8000552:	4b26      	ldr	r3, [pc, #152]	; (80005ec <led7_Scan+0x104>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800055a:	b29a      	uxth	r2, r3
 800055c:	4b23      	ldr	r3, [pc, #140]	; (80005ec <led7_Scan+0x104>)
 800055e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <led7_Scan+0x104>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	f023 0320 	bic.w	r3, r3, #32
 8000568:	b29a      	uxth	r2, r3
 800056a:	4b20      	ldr	r3, [pc, #128]	; (80005ec <led7_Scan+0x104>)
 800056c:	801a      	strh	r2, [r3, #0]
		break;
 800056e:	e01e      	b.n	80005ae <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <led7_Scan+0x104>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000578:	b29a      	uxth	r2, r3
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <led7_Scan+0x104>)
 800057c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 800057e:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <led7_Scan+0x104>)
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	f023 0310 	bic.w	r3, r3, #16
 8000586:	b29a      	uxth	r2, r3
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <led7_Scan+0x104>)
 800058a:	801a      	strh	r2, [r3, #0]
		break;
 800058c:	e00f      	b.n	80005ae <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <led7_Scan+0x104>)
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000596:	b29a      	uxth	r2, r3
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <led7_Scan+0x104>)
 800059a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <led7_Scan+0x104>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <led7_Scan+0x104>)
 80005a8:	801a      	strh	r2, [r3, #0]
		break;
 80005aa:	e000      	b.n	80005ae <led7_Scan+0xc6>
	default:
		break;
 80005ac:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <led7_Scan+0x108>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	3301      	adds	r3, #1
 80005b4:	425a      	negs	r2, r3
 80005b6:	f003 0303 	and.w	r3, r3, #3
 80005ba:	f002 0203 	and.w	r2, r2, #3
 80005be:	bf58      	it	pl
 80005c0:	4253      	negpl	r3, r2
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <led7_Scan+0x108>)
 80005c6:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2140      	movs	r1, #64	; 0x40
 80005cc:	480a      	ldr	r0, [pc, #40]	; (80005f8 <led7_Scan+0x110>)
 80005ce:	f002 fb51 	bl	8002c74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80005d2:	2301      	movs	r3, #1
 80005d4:	2202      	movs	r2, #2
 80005d6:	4905      	ldr	r1, [pc, #20]	; (80005ec <led7_Scan+0x104>)
 80005d8:	4808      	ldr	r0, [pc, #32]	; (80005fc <led7_Scan+0x114>)
 80005da:	f004 f96a 	bl	80048b2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80005de:	2201      	movs	r2, #1
 80005e0:	2140      	movs	r1, #64	; 0x40
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <led7_Scan+0x110>)
 80005e4:	f002 fb46 	bl	8002c74 <HAL_GPIO_WritePin>
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004
 80005f0:	20000038 	.word	0x20000038
 80005f4:	20000000 	.word	0x20000000
 80005f8:	40021800 	.word	0x40021800
 80005fc:	200001c0 	.word	0x200001c0

08000600 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000604:	2201      	movs	r2, #1
 8000606:	2108      	movs	r1, #8
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <button_init+0x14>)
 800060a:	f002 fb33 	bl	8002c74 <HAL_GPIO_WritePin>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40020c00 	.word	0x40020c00

08000618 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2108      	movs	r1, #8
 8000622:	482f      	ldr	r0, [pc, #188]	; (80006e0 <button_Scan+0xc8>)
 8000624:	f002 fb26 	bl	8002c74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000628:	2201      	movs	r2, #1
 800062a:	2108      	movs	r1, #8
 800062c:	482c      	ldr	r0, [pc, #176]	; (80006e0 <button_Scan+0xc8>)
 800062e:	f002 fb21 	bl	8002c74 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000632:	230a      	movs	r3, #10
 8000634:	2202      	movs	r2, #2
 8000636:	492b      	ldr	r1, [pc, #172]	; (80006e4 <button_Scan+0xcc>)
 8000638:	482b      	ldr	r0, [pc, #172]	; (80006e8 <button_Scan+0xd0>)
 800063a:	f004 fa76 	bl	8004b2a <HAL_SPI_Receive>
	  int button_index = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000646:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	e03f      	b.n	80006ce <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	db06      	blt.n	8000662 <button_Scan+0x4a>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b03      	cmp	r3, #3
 8000658:	dc03      	bgt.n	8000662 <button_Scan+0x4a>
			  button_index = i + 4;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3304      	adds	r3, #4
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	e018      	b.n	8000694 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b03      	cmp	r3, #3
 8000666:	dd07      	ble.n	8000678 <button_Scan+0x60>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b07      	cmp	r3, #7
 800066c:	dc04      	bgt.n	8000678 <button_Scan+0x60>
			  button_index = 7 - i;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f1c3 0307 	rsb	r3, r3, #7
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	e00d      	b.n	8000694 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b07      	cmp	r3, #7
 800067c:	dd06      	ble.n	800068c <button_Scan+0x74>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b0b      	cmp	r3, #11
 8000682:	dc03      	bgt.n	800068c <button_Scan+0x74>
			  button_index = i + 4;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3304      	adds	r3, #4
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	e003      	b.n	8000694 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f1c3 0317 	rsb	r3, r3, #23
 8000692:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <button_Scan+0xcc>)
 8000696:	881a      	ldrh	r2, [r3, #0]
 8000698:	897b      	ldrh	r3, [r7, #10]
 800069a:	4013      	ands	r3, r2
 800069c:	b29b      	uxth	r3, r3
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d005      	beq.n	80006ae <button_Scan+0x96>
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <button_Scan+0xd4>)
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2100      	movs	r1, #0
 80006a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006ac:	e009      	b.n	80006c2 <button_Scan+0xaa>
		  else button_count[button_index]++;
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <button_Scan+0xd4>)
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006b6:	3301      	adds	r3, #1
 80006b8:	b299      	uxth	r1, r3
 80006ba:	4a0c      	ldr	r2, [pc, #48]	; (80006ec <button_Scan+0xd4>)
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 80006c2:	897b      	ldrh	r3, [r7, #10]
 80006c4:	085b      	lsrs	r3, r3, #1
 80006c6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3301      	adds	r3, #1
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b0f      	cmp	r3, #15
 80006d2:	ddbc      	ble.n	800064e <button_Scan+0x36>
	  }
}
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	2000003a 	.word	0x2000003a
 80006e8:	200001c0 	.word	0x200001c0
 80006ec:	20000050 	.word	0x20000050

080006f0 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80006f4:	201e      	movs	r0, #30
 80006f6:	f001 fe99 	bl	800242c <DEC2BCD>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <ds3231_init+0x80>)
 8000700:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8000702:	2016      	movs	r0, #22
 8000704:	f001 fe92 	bl	800242c <DEC2BCD>
 8000708:	4603      	mov	r3, r0
 800070a:	461a      	mov	r2, r3
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <ds3231_init+0x80>)
 800070e:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8000710:	2015      	movs	r0, #21
 8000712:	f001 fe8b 	bl	800242c <DEC2BCD>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <ds3231_init+0x80>)
 800071c:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 800071e:	2006      	movs	r0, #6
 8000720:	f001 fe84 	bl	800242c <DEC2BCD>
 8000724:	4603      	mov	r3, r0
 8000726:	461a      	mov	r2, r3
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <ds3231_init+0x80>)
 800072a:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 800072c:	200f      	movs	r0, #15
 800072e:	f001 fe7d 	bl	800242c <DEC2BCD>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <ds3231_init+0x80>)
 8000738:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 800073a:	2009      	movs	r0, #9
 800073c:	f001 fe76 	bl	800242c <DEC2BCD>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <ds3231_init+0x80>)
 8000746:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000748:	2017      	movs	r0, #23
 800074a:	f001 fe6f 	bl	800242c <DEC2BCD>
 800074e:	4603      	mov	r3, r0
 8000750:	461a      	mov	r2, r3
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <ds3231_init+0x80>)
 8000754:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 100) != HAL_OK){
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	2203      	movs	r2, #3
 800075a:	21d0      	movs	r1, #208	; 0xd0
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <ds3231_init+0x84>)
 800075e:	f002 ff21 	bl	80035a4 <HAL_I2C_IsDeviceReady>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d000      	beq.n	800076a <ds3231_init+0x7a>
		while(1);
 8000768:	e7fe      	b.n	8000768 <ds3231_init+0x78>
	};
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000078 	.word	0x20000078
 8000774:	200000ec 	.word	0x200000ec

08000778 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af04      	add	r7, sp, #16
 800077e:	4603      	mov	r3, r0
 8000780:	460a      	mov	r2, r1
 8000782:	71fb      	strb	r3, [r7, #7]
 8000784:	4613      	mov	r3, r2
 8000786:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fe4e 	bl	800242c <DEC2BCD>
 8000790:	4603      	mov	r3, r0
 8000792:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	b29a      	uxth	r2, r3
 8000798:	230a      	movs	r3, #10
 800079a:	9302      	str	r3, [sp, #8]
 800079c:	2301      	movs	r3, #1
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	f107 030f 	add.w	r3, r7, #15
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2301      	movs	r3, #1
 80007a8:	21d0      	movs	r1, #208	; 0xd0
 80007aa:	4803      	ldr	r0, [pc, #12]	; (80007b8 <ds3231_Write+0x40>)
 80007ac:	f002 fbda 	bl	8002f64 <HAL_I2C_Mem_Write>
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200000ec 	.word	0x200000ec

080007bc <ds3231_ReadTime>:

void ds3231_ReadTime(){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 80007c2:	230a      	movs	r3, #10
 80007c4:	9302      	str	r3, [sp, #8]
 80007c6:	2307      	movs	r3, #7
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	4b25      	ldr	r3, [pc, #148]	; (8000860 <ds3231_ReadTime+0xa4>)
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2301      	movs	r3, #1
 80007d0:	2200      	movs	r2, #0
 80007d2:	21d0      	movs	r1, #208	; 0xd0
 80007d4:	4823      	ldr	r0, [pc, #140]	; (8000864 <ds3231_ReadTime+0xa8>)
 80007d6:	f002 fcbf 	bl	8003158 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <ds3231_ReadTime+0xa4>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 fe0a 	bl	80023f8 <BCD2DEC>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <ds3231_ReadTime+0xac>)
 80007ea:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <ds3231_ReadTime+0xa4>)
 80007ee:	785b      	ldrb	r3, [r3, #1]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fe01 	bl	80023f8 <BCD2DEC>
 80007f6:	4603      	mov	r3, r0
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <ds3231_ReadTime+0xb0>)
 80007fc:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <ds3231_ReadTime+0xa4>)
 8000800:	789b      	ldrb	r3, [r3, #2]
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fdf8 	bl	80023f8 <BCD2DEC>
 8000808:	4603      	mov	r3, r0
 800080a:	461a      	mov	r2, r3
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <ds3231_ReadTime+0xb4>)
 800080e:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <ds3231_ReadTime+0xa4>)
 8000812:	78db      	ldrb	r3, [r3, #3]
 8000814:	4618      	mov	r0, r3
 8000816:	f001 fdef 	bl	80023f8 <BCD2DEC>
 800081a:	4603      	mov	r3, r0
 800081c:	461a      	mov	r2, r3
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <ds3231_ReadTime+0xb8>)
 8000820:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <ds3231_ReadTime+0xa4>)
 8000824:	791b      	ldrb	r3, [r3, #4]
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fde6 	bl	80023f8 <BCD2DEC>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <ds3231_ReadTime+0xbc>)
 8000832:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <ds3231_ReadTime+0xa4>)
 8000836:	795b      	ldrb	r3, [r3, #5]
 8000838:	4618      	mov	r0, r3
 800083a:	f001 fddd 	bl	80023f8 <BCD2DEC>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <ds3231_ReadTime+0xc0>)
 8000844:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <ds3231_ReadTime+0xa4>)
 8000848:	799b      	ldrb	r3, [r3, #6]
 800084a:	4618      	mov	r0, r3
 800084c:	f001 fdd4 	bl	80023f8 <BCD2DEC>
 8000850:	4603      	mov	r3, r0
 8000852:	461a      	mov	r2, r3
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <ds3231_ReadTime+0xc4>)
 8000856:	701a      	strb	r2, [r3, #0]
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000078 	.word	0x20000078
 8000864:	200000ec 	.word	0x200000ec
 8000868:	20000070 	.word	0x20000070
 800086c:	20000072 	.word	0x20000072
 8000870:	20000075 	.word	0x20000075
 8000874:	20000074 	.word	0x20000074
 8000878:	20000073 	.word	0x20000073
 800087c:	20000076 	.word	0x20000076
 8000880:	20000071 	.word	0x20000071

08000884 <alarm>:
 */

#include "fsm_timer.h"

int counter = 0;
void alarm(){
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
	if (ds3231_year == alarm_year && ds3231_month == alarm_month && ds3231_date == alarm_date && ds3231_day == alarm_day
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <alarm+0x78>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	461a      	mov	r2, r3
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <alarm+0x7c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	429a      	cmp	r2, r3
 8000894:	d12c      	bne.n	80008f0 <alarm+0x6c>
 8000896:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <alarm+0x80>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	461a      	mov	r2, r3
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <alarm+0x84>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d125      	bne.n	80008f0 <alarm+0x6c>
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <alarm+0x88>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <alarm+0x8c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d11e      	bne.n	80008f0 <alarm+0x6c>
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <alarm+0x90>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <alarm+0x94>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d117      	bne.n	80008f0 <alarm+0x6c>
		&& ds3231_hours == alarm_hours && ds3231_min == alarm_min && ds3231_sec == alarm_sec){
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <alarm+0x98>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <alarm+0x9c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d110      	bne.n	80008f0 <alarm+0x6c>
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <alarm+0xa0>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <alarm+0xa4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d109      	bne.n	80008f0 <alarm+0x6c>
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <alarm+0xa8>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <alarm+0xac>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d102      	bne.n	80008f0 <alarm+0x6c>
		status = ALARM;
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <alarm+0xb0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
	}
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000071 	.word	0x20000071
 8000900:	20000084 	.word	0x20000084
 8000904:	20000076 	.word	0x20000076
 8000908:	20000088 	.word	0x20000088
 800090c:	20000073 	.word	0x20000073
 8000910:	20000094 	.word	0x20000094
 8000914:	20000074 	.word	0x20000074
 8000918:	20000090 	.word	0x20000090
 800091c:	20000075 	.word	0x20000075
 8000920:	2000008c 	.word	0x2000008c
 8000924:	20000072 	.word	0x20000072
 8000928:	20000098 	.word	0x20000098
 800092c:	20000070 	.word	0x20000070
 8000930:	20000080 	.word	0x20000080
 8000934:	20000008 	.word	0x20000008

08000938 <sw_fsm>:
void sw_fsm(){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	switch (subStatus) {
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <sw_fsm+0x8c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3b0b      	subs	r3, #11
 8000942:	2b06      	cmp	r3, #6
 8000944:	d83b      	bhi.n	80009be <sw_fsm+0x86>
 8000946:	a201      	add	r2, pc, #4	; (adr r2, 800094c <sw_fsm+0x14>)
 8000948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094c:	08000969 	.word	0x08000969
 8000950:	08000971 	.word	0x08000971
 8000954:	08000979 	.word	0x08000979
 8000958:	08000981 	.word	0x08000981
 800095c:	08000989 	.word	0x08000989
 8000960:	08000991 	.word	0x08000991
 8000964:	08000999 	.word	0x08000999
		case YEAR_C:
			subStatus = MONTH_C;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <sw_fsm+0x8c>)
 800096a:	220c      	movs	r2, #12
 800096c:	601a      	str	r2, [r3, #0]
			break;
 800096e:	e027      	b.n	80009c0 <sw_fsm+0x88>
		case MONTH_C:
			subStatus = DATE_C;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <sw_fsm+0x8c>)
 8000972:	220d      	movs	r2, #13
 8000974:	601a      	str	r2, [r3, #0]
			break;
 8000976:	e023      	b.n	80009c0 <sw_fsm+0x88>
		case DATE_C:
			subStatus = DAY_C;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <sw_fsm+0x8c>)
 800097a:	220e      	movs	r2, #14
 800097c:	601a      	str	r2, [r3, #0]
			break;
 800097e:	e01f      	b.n	80009c0 <sw_fsm+0x88>
		case DAY_C:
			subStatus = HOUR_C;
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <sw_fsm+0x8c>)
 8000982:	220f      	movs	r2, #15
 8000984:	601a      	str	r2, [r3, #0]
			break;
 8000986:	e01b      	b.n	80009c0 <sw_fsm+0x88>
		case HOUR_C:
			subStatus = MIN_C;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <sw_fsm+0x8c>)
 800098a:	2210      	movs	r2, #16
 800098c:	601a      	str	r2, [r3, #0]
			break;
 800098e:	e017      	b.n	80009c0 <sw_fsm+0x88>
		case MIN_C:
			subStatus = SEC_C;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <sw_fsm+0x8c>)
 8000992:	2211      	movs	r2, #17
 8000994:	601a      	str	r2, [r3, #0]
			break;
 8000996:	e013      	b.n	80009c0 <sw_fsm+0x88>
		case SEC_C:
			subStatus = YEAR_C;
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <sw_fsm+0x8c>)
 800099a:	220b      	movs	r2, #11
 800099c:	601a      	str	r2, [r3, #0]
			lcd_Clear(WHITE);
 800099e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80009a2:	f000 fda7 	bl	80014f4 <lcd_Clear>
			if (status == MANUAL){
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <sw_fsm+0x90>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d103      	bne.n	80009b6 <sw_fsm+0x7e>
				status = TIMER;
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <sw_fsm+0x90>)
 80009b0:	2203      	movs	r2, #3
 80009b2:	601a      	str	r2, [r3, #0]
			}
			else status = NORMAL;
			break;
 80009b4:	e004      	b.n	80009c0 <sw_fsm+0x88>
			else status = NORMAL;
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <sw_fsm+0x90>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	601a      	str	r2, [r3, #0]
			break;
 80009bc:	e000      	b.n	80009c0 <sw_fsm+0x88>
		default:
			break;
 80009be:	bf00      	nop
	}
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000000c 	.word	0x2000000c
 80009c8:	20000008 	.word	0x20000008

080009cc <sub_fsm>:
void sub_fsm(){
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
	switch (subStatus) {
 80009d0:	4b59      	ldr	r3, [pc, #356]	; (8000b38 <sub_fsm+0x16c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	3b0b      	subs	r3, #11
 80009d6:	2b06      	cmp	r3, #6
 80009d8:	f200 8099 	bhi.w	8000b0e <sub_fsm+0x142>
 80009dc:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <sub_fsm+0x18>)
 80009de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e2:	bf00      	nop
 80009e4:	08000a01 	.word	0x08000a01
 80009e8:	08000a1d 	.word	0x08000a1d
 80009ec:	08000a39 	.word	0x08000a39
 80009f0:	08000a9f 	.word	0x08000a9f
 80009f4:	08000abb 	.word	0x08000abb
 80009f8:	08000ad7 	.word	0x08000ad7
 80009fc:	08000af3 	.word	0x08000af3
		case YEAR_C:
			ds3231_year++;
 8000a00:	4b4e      	ldr	r3, [pc, #312]	; (8000b3c <sub_fsm+0x170>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	3301      	adds	r3, #1
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b4c      	ldr	r3, [pc, #304]	; (8000b3c <sub_fsm+0x170>)
 8000a0a:	701a      	strb	r2, [r3, #0]
			if (ds3231_year >= 100)
 8000a0c:	4b4b      	ldr	r3, [pc, #300]	; (8000b3c <sub_fsm+0x170>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b63      	cmp	r3, #99	; 0x63
 8000a12:	d97e      	bls.n	8000b12 <sub_fsm+0x146>
				ds3231_year = 0;
 8000a14:	4b49      	ldr	r3, [pc, #292]	; (8000b3c <sub_fsm+0x170>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
			break;
 8000a1a:	e07a      	b.n	8000b12 <sub_fsm+0x146>
		case MONTH_C:
			ds3231_month++;
 8000a1c:	4b48      	ldr	r3, [pc, #288]	; (8000b40 <sub_fsm+0x174>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b46      	ldr	r3, [pc, #280]	; (8000b40 <sub_fsm+0x174>)
 8000a26:	701a      	strb	r2, [r3, #0]
			if (ds3231_month > 12)
 8000a28:	4b45      	ldr	r3, [pc, #276]	; (8000b40 <sub_fsm+0x174>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b0c      	cmp	r3, #12
 8000a2e:	d972      	bls.n	8000b16 <sub_fsm+0x14a>
				ds3231_month= 1;
 8000a30:	4b43      	ldr	r3, [pc, #268]	; (8000b40 <sub_fsm+0x174>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
			break;
 8000a36:	e06e      	b.n	8000b16 <sub_fsm+0x14a>
		case DATE_C:
			ds3231_date++;
 8000a38:	4b42      	ldr	r3, [pc, #264]	; (8000b44 <sub_fsm+0x178>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	4b40      	ldr	r3, [pc, #256]	; (8000b44 <sub_fsm+0x178>)
 8000a42:	701a      	strb	r2, [r3, #0]
			if (ds3231_month == 2){
 8000a44:	4b3e      	ldr	r3, [pc, #248]	; (8000b40 <sub_fsm+0x174>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d107      	bne.n	8000a5c <sub_fsm+0x90>
				if (ds3231_date > 29){
 8000a4c:	4b3d      	ldr	r3, [pc, #244]	; (8000b44 <sub_fsm+0x178>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b1d      	cmp	r3, #29
 8000a52:	d962      	bls.n	8000b1a <sub_fsm+0x14e>
					ds3231_date = 1;
 8000a54:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <sub_fsm+0x178>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	701a      	strb	r2, [r3, #0]
			else {
				if (ds3231_date > 31){
					ds3231_date = 1;
				}
			}
			break;
 8000a5a:	e05e      	b.n	8000b1a <sub_fsm+0x14e>
			else if (ds3231_month == 4 || ds3231_month == 6 || ds3231_month == 9 || ds3231_month == 11){
 8000a5c:	4b38      	ldr	r3, [pc, #224]	; (8000b40 <sub_fsm+0x174>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d00b      	beq.n	8000a7c <sub_fsm+0xb0>
 8000a64:	4b36      	ldr	r3, [pc, #216]	; (8000b40 <sub_fsm+0x174>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b06      	cmp	r3, #6
 8000a6a:	d007      	beq.n	8000a7c <sub_fsm+0xb0>
 8000a6c:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <sub_fsm+0x174>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b09      	cmp	r3, #9
 8000a72:	d003      	beq.n	8000a7c <sub_fsm+0xb0>
 8000a74:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <sub_fsm+0x174>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b0b      	cmp	r3, #11
 8000a7a:	d107      	bne.n	8000a8c <sub_fsm+0xc0>
				if (ds3231_date > 30){
 8000a7c:	4b31      	ldr	r3, [pc, #196]	; (8000b44 <sub_fsm+0x178>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b1e      	cmp	r3, #30
 8000a82:	d90b      	bls.n	8000a9c <sub_fsm+0xd0>
					ds3231_date = 1;
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <sub_fsm+0x178>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
				if (ds3231_date > 30){
 8000a8a:	e007      	b.n	8000a9c <sub_fsm+0xd0>
				if (ds3231_date > 31){
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <sub_fsm+0x178>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b1f      	cmp	r3, #31
 8000a92:	d942      	bls.n	8000b1a <sub_fsm+0x14e>
					ds3231_date = 1;
 8000a94:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <sub_fsm+0x178>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
			break;
 8000a9a:	e03e      	b.n	8000b1a <sub_fsm+0x14e>
 8000a9c:	e03d      	b.n	8000b1a <sub_fsm+0x14e>
		case DAY_C:
			ds3231_day++;
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <sub_fsm+0x17c>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <sub_fsm+0x17c>)
 8000aa8:	701a      	strb	r2, [r3, #0]
			if (ds3231_day > 7)
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <sub_fsm+0x17c>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b07      	cmp	r3, #7
 8000ab0:	d935      	bls.n	8000b1e <sub_fsm+0x152>
				ds3231_day = 1;
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <sub_fsm+0x17c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
			break;
 8000ab8:	e031      	b.n	8000b1e <sub_fsm+0x152>
		case HOUR_C:
			ds3231_hours++;
 8000aba:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <sub_fsm+0x180>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <sub_fsm+0x180>)
 8000ac4:	701a      	strb	r2, [r3, #0]
			if (ds3231_hours >= 24)
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <sub_fsm+0x180>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b17      	cmp	r3, #23
 8000acc:	d929      	bls.n	8000b22 <sub_fsm+0x156>
				ds3231_hours = 0;
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <sub_fsm+0x180>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
			break;
 8000ad4:	e025      	b.n	8000b22 <sub_fsm+0x156>
		case MIN_C:
			ds3231_min++;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <sub_fsm+0x184>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <sub_fsm+0x184>)
 8000ae0:	701a      	strb	r2, [r3, #0]
			if (ds3231_min >= 60)
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <sub_fsm+0x184>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b3b      	cmp	r3, #59	; 0x3b
 8000ae8:	d91d      	bls.n	8000b26 <sub_fsm+0x15a>
				ds3231_min = 0;
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <sub_fsm+0x184>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
			break;
 8000af0:	e019      	b.n	8000b26 <sub_fsm+0x15a>
		case SEC_C:
			ds3231_sec++;
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <sub_fsm+0x188>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <sub_fsm+0x188>)
 8000afc:	701a      	strb	r2, [r3, #0]
			if (ds3231_sec >= 60)
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <sub_fsm+0x188>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b3b      	cmp	r3, #59	; 0x3b
 8000b04:	d911      	bls.n	8000b2a <sub_fsm+0x15e>
				ds3231_sec = 0;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <sub_fsm+0x188>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
			break;
 8000b0c:	e00d      	b.n	8000b2a <sub_fsm+0x15e>
		default:
			break;
 8000b0e:	bf00      	nop
 8000b10:	e00c      	b.n	8000b2c <sub_fsm+0x160>
			break;
 8000b12:	bf00      	nop
 8000b14:	e00a      	b.n	8000b2c <sub_fsm+0x160>
			break;
 8000b16:	bf00      	nop
 8000b18:	e008      	b.n	8000b2c <sub_fsm+0x160>
			break;
 8000b1a:	bf00      	nop
 8000b1c:	e006      	b.n	8000b2c <sub_fsm+0x160>
			break;
 8000b1e:	bf00      	nop
 8000b20:	e004      	b.n	8000b2c <sub_fsm+0x160>
			break;
 8000b22:	bf00      	nop
 8000b24:	e002      	b.n	8000b2c <sub_fsm+0x160>
			break;
 8000b26:	bf00      	nop
 8000b28:	e000      	b.n	8000b2c <sub_fsm+0x160>
			break;
 8000b2a:	bf00      	nop
	}
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	2000000c 	.word	0x2000000c
 8000b3c:	20000071 	.word	0x20000071
 8000b40:	20000076 	.word	0x20000076
 8000b44:	20000073 	.word	0x20000073
 8000b48:	20000074 	.word	0x20000074
 8000b4c:	20000075 	.word	0x20000075
 8000b50:	20000072 	.word	0x20000072
 8000b54:	20000070 	.word	0x20000070

08000b58 <input_process>:
void input_process(){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	switch (status) {
 8000b5c:	4b36      	ldr	r3, [pc, #216]	; (8000c38 <input_process+0xe0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	d03a      	beq.n	8000bda <input_process+0x82>
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	dc5d      	bgt.n	8000c24 <input_process+0xcc>
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d002      	beq.n	8000b72 <input_process+0x1a>
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d00f      	beq.n	8000b90 <input_process+0x38>
			if (button_count[3] == 1|| (button_count[3] / 40 > 0 && button_count[3] % 4 == 0)){
				sub_fsm();
			}
			break;
		default:
			break;
 8000b70:	e058      	b.n	8000c24 <input_process+0xcc>
			if (button_count[13] == 1){
 8000b72:	4b32      	ldr	r3, [pc, #200]	; (8000c3c <input_process+0xe4>)
 8000b74:	8b5b      	ldrh	r3, [r3, #26]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d156      	bne.n	8000c28 <input_process+0xd0>
				status = MANUAL;
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <input_process+0xe0>)
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	601a      	str	r2, [r3, #0]
				subStatus = YEAR_C;
 8000b80:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <input_process+0xe8>)
 8000b82:	220b      	movs	r2, #11
 8000b84:	601a      	str	r2, [r3, #0]
				lcd_Clear(WHITE);
 8000b86:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b8a:	f000 fcb3 	bl	80014f4 <lcd_Clear>
			break;
 8000b8e:	e04b      	b.n	8000c28 <input_process+0xd0>
			if (button_count[13] == 1){
 8000b90:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <input_process+0xe4>)
 8000b92:	8b5b      	ldrh	r3, [r3, #26]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d108      	bne.n	8000baa <input_process+0x52>
				updateTime();
 8000b98:	f000 f9b6 	bl	8000f08 <updateTime>
				status = TIMER;
 8000b9c:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <input_process+0xe0>)
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	601a      	str	r2, [r3, #0]
				lcd_Clear(WHITE);
 8000ba2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ba6:	f000 fca5 	bl	80014f4 <lcd_Clear>
			if (button_count[12] == 1){
 8000baa:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <input_process+0xe4>)
 8000bac:	8b1b      	ldrh	r3, [r3, #24]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d101      	bne.n	8000bb6 <input_process+0x5e>
				sw_fsm();
 8000bb2:	f7ff fec1 	bl	8000938 <sw_fsm>
			if (button_count[3] == 1 || (button_count[3] / 40 > 0 && button_count[3] % 4 == 0)){
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <input_process+0xe4>)
 8000bb8:	88db      	ldrh	r3, [r3, #6]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d00a      	beq.n	8000bd4 <input_process+0x7c>
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <input_process+0xe4>)
 8000bc0:	88db      	ldrh	r3, [r3, #6]
 8000bc2:	2b27      	cmp	r3, #39	; 0x27
 8000bc4:	d932      	bls.n	8000c2c <input_process+0xd4>
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <input_process+0xe4>)
 8000bc8:	88db      	ldrh	r3, [r3, #6]
 8000bca:	f003 0303 	and.w	r3, r3, #3
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d12b      	bne.n	8000c2c <input_process+0xd4>
				sub_fsm();
 8000bd4:	f7ff fefa 	bl	80009cc <sub_fsm>
			break;
 8000bd8:	e028      	b.n	8000c2c <input_process+0xd4>
			if (button_count[13] == 1){
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <input_process+0xe4>)
 8000bdc:	8b5b      	ldrh	r3, [r3, #26]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d108      	bne.n	8000bf4 <input_process+0x9c>
				updateAlarm();
 8000be2:	f000 f9cd 	bl	8000f80 <updateAlarm>
				status = NORMAL;
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <input_process+0xe0>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	601a      	str	r2, [r3, #0]
				lcd_Clear(WHITE);
 8000bec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000bf0:	f000 fc80 	bl	80014f4 <lcd_Clear>
			if (button_count[12] == 1){
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <input_process+0xe4>)
 8000bf6:	8b1b      	ldrh	r3, [r3, #24]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d101      	bne.n	8000c00 <input_process+0xa8>
				sw_fsm();
 8000bfc:	f7ff fe9c 	bl	8000938 <sw_fsm>
			if (button_count[3] == 1|| (button_count[3] / 40 > 0 && button_count[3] % 4 == 0)){
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <input_process+0xe4>)
 8000c02:	88db      	ldrh	r3, [r3, #6]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d00a      	beq.n	8000c1e <input_process+0xc6>
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <input_process+0xe4>)
 8000c0a:	88db      	ldrh	r3, [r3, #6]
 8000c0c:	2b27      	cmp	r3, #39	; 0x27
 8000c0e:	d90f      	bls.n	8000c30 <input_process+0xd8>
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <input_process+0xe4>)
 8000c12:	88db      	ldrh	r3, [r3, #6]
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d108      	bne.n	8000c30 <input_process+0xd8>
				sub_fsm();
 8000c1e:	f7ff fed5 	bl	80009cc <sub_fsm>
			break;
 8000c22:	e005      	b.n	8000c30 <input_process+0xd8>
			break;
 8000c24:	bf00      	nop
 8000c26:	e004      	b.n	8000c32 <input_process+0xda>
			break;
 8000c28:	bf00      	nop
 8000c2a:	e002      	b.n	8000c32 <input_process+0xda>
			break;
 8000c2c:	bf00      	nop
 8000c2e:	e000      	b.n	8000c32 <input_process+0xda>
			break;
 8000c30:	bf00      	nop
	}
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000050 	.word	0x20000050
 8000c40:	2000000c 	.word	0x2000000c

08000c44 <fsm>:
void fsm(){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	show_mode();
 8000c48:	f000 f9e0 	bl	800100c <show_mode>
	switch (status) {
 8000c4c:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <fsm+0xcc>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b03      	cmp	r3, #3
 8000c52:	d854      	bhi.n	8000cfe <fsm+0xba>
 8000c54:	a201      	add	r2, pc, #4	; (adr r2, 8000c5c <fsm+0x18>)
 8000c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5a:	bf00      	nop
 8000c5c:	08000ccf 	.word	0x08000ccf
 8000c60:	08000c6d 	.word	0x08000c6d
 8000c64:	08000c77 	.word	0x08000c77
 8000c68:	08000ca3 	.word	0x08000ca3
		case NORMAL:
			ds3231_ReadTime();
 8000c6c:	f7ff fda6 	bl	80007bc <ds3231_ReadTime>
			displayTime();
 8000c70:	f000 f8cc 	bl	8000e0c <displayTime>
			break;
 8000c74:	e04a      	b.n	8000d0c <fsm+0xc8>
		case MANUAL:
			counter++;
 8000c76:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <fsm+0xd0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	4a25      	ldr	r2, [pc, #148]	; (8000d14 <fsm+0xd0>)
 8000c7e:	6013      	str	r3, [r2, #0]
			if (counter > 5){
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <fsm+0xd0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b05      	cmp	r3, #5
 8000c86:	dd02      	ble.n	8000c8e <fsm+0x4a>
				blinky_time();
 8000c88:	f000 fa04 	bl	8001094 <blinky_time>
 8000c8c:	e001      	b.n	8000c92 <fsm+0x4e>
			}
			else {
				displayTime();
 8000c8e:	f000 f8bd 	bl	8000e0c <displayTime>
			}
			if (counter >= 10){
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <fsm+0xd0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b09      	cmp	r3, #9
 8000c98:	dd33      	ble.n	8000d02 <fsm+0xbe>
				counter  = 0;
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <fsm+0xd0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000ca0:	e02f      	b.n	8000d02 <fsm+0xbe>
		case TIMER:
			counter++;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <fsm+0xd0>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	4a1a      	ldr	r2, [pc, #104]	; (8000d14 <fsm+0xd0>)
 8000caa:	6013      	str	r3, [r2, #0]
			if (counter > 5){
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <fsm+0xd0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b05      	cmp	r3, #5
 8000cb2:	dd02      	ble.n	8000cba <fsm+0x76>
				blinky_time();
 8000cb4:	f000 f9ee 	bl	8001094 <blinky_time>
 8000cb8:	e001      	b.n	8000cbe <fsm+0x7a>
			}
			else {
				displayTime();
 8000cba:	f000 f8a7 	bl	8000e0c <displayTime>
			}
			if (counter >= 10){
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <fsm+0xd0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b09      	cmp	r3, #9
 8000cc4:	dd1f      	ble.n	8000d06 <fsm+0xc2>
				counter  = 0;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <fsm+0xd0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
			}
			break;
 8000ccc:	e01b      	b.n	8000d06 <fsm+0xc2>
		case ALARM:
			if (counter > 5){
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <fsm+0xd0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b05      	cmp	r3, #5
 8000cd4:	dd04      	ble.n	8000ce0 <fsm+0x9c>
				lcd_Clear(WHITE);
 8000cd6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000cda:	f000 fc0b 	bl	80014f4 <lcd_Clear>
 8000cde:	e003      	b.n	8000ce8 <fsm+0xa4>
			}
			else {
				lcd_Clear(RED);
 8000ce0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000ce4:	f000 fc06 	bl	80014f4 <lcd_Clear>
			}
			if (counter == 10){
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <fsm+0xd0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b0a      	cmp	r3, #10
 8000cee:	d10c      	bne.n	8000d0a <fsm+0xc6>
				counter = 0;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <fsm+0xd0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
				status = NORMAL;
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <fsm+0xcc>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	601a      	str	r2, [r3, #0]
			}
			break;
 8000cfc:	e005      	b.n	8000d0a <fsm+0xc6>
		default:
			break;
 8000cfe:	bf00      	nop
 8000d00:	e004      	b.n	8000d0c <fsm+0xc8>
			break;
 8000d02:	bf00      	nop
 8000d04:	e002      	b.n	8000d0c <fsm+0xc8>
			break;
 8000d06:	bf00      	nop
 8000d08:	e000      	b.n	8000d0c <fsm+0xc8>
			break;
 8000d0a:	bf00      	nop
	}
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000008 	.word	0x20000008
 8000d14:	2000003c 	.word	0x2000003c

08000d18 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08e      	sub	sp, #56	; 0x38
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
 8000d2e:	615a      	str	r2, [r3, #20]
 8000d30:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000d32:	463b      	mov	r3, r7
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
 8000d40:	615a      	str	r2, [r3, #20]
 8000d42:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000d44:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <MX_FSMC_Init+0xec>)
 8000d46:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000d4a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <MX_FSMC_Init+0xec>)
 8000d4e:	4a2e      	ldr	r2, [pc, #184]	; (8000e08 <MX_FSMC_Init+0xf0>)
 8000d50:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000d52:	4b2c      	ldr	r3, [pc, #176]	; (8000e04 <MX_FSMC_Init+0xec>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000d58:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <MX_FSMC_Init+0xec>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000d5e:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <MX_FSMC_Init+0xec>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <MX_FSMC_Init+0xec>)
 8000d66:	2210      	movs	r2, #16
 8000d68:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000d6a:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <MX_FSMC_Init+0xec>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d70:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <MX_FSMC_Init+0xec>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000d76:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <MX_FSMC_Init+0xec>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <MX_FSMC_Init+0xec>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <MX_FSMC_Init+0xec>)
 8000d84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <MX_FSMC_Init+0xec>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_FSMC_Init+0xec>)
 8000d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d96:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_FSMC_Init+0xec>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_FSMC_Init+0xec>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000da4:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <MX_FSMC_Init+0xec>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000daa:	230f      	movs	r3, #15
 8000dac:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000dae:	230f      	movs	r3, #15
 8000db0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000db2:	233c      	movs	r3, #60	; 0x3c
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000dba:	2310      	movs	r3, #16
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000dbe:	2311      	movs	r3, #17
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000dca:	230f      	movs	r3, #15
 8000dcc:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000dce:	2309      	movs	r3, #9
 8000dd0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000dd6:	2310      	movs	r3, #16
 8000dd8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000dda:	2311      	movs	r3, #17
 8000ddc:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000de2:	463a      	mov	r2, r7
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <MX_FSMC_Init+0xec>)
 8000dec:	f004 fa80 	bl	80052f0 <HAL_SRAM_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000df6:	f001 f80b 	bl	8001e10 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3738      	adds	r7, #56	; 0x38
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000009c 	.word	0x2000009c
 8000e08:	a0000104 	.word	0xa0000104

08000e0c <displayTime>:
 *      Author: ADMIN
 */

#include "function.h"

void displayTime(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8000e12:	4b36      	ldr	r3, [pc, #216]	; (8000eec <displayTime+0xe0>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	2318      	movs	r3, #24
 8000e1a:	9302      	str	r3, [sp, #8]
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2302      	movs	r3, #2
 8000e28:	2164      	movs	r1, #100	; 0x64
 8000e2a:	2046      	movs	r0, #70	; 0x46
 8000e2c:	f000 fc98 	bl	8001760 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8000e30:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <displayTime+0xe4>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	2318      	movs	r3, #24
 8000e38:	9302      	str	r3, [sp, #8]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2302      	movs	r3, #2
 8000e46:	2164      	movs	r1, #100	; 0x64
 8000e48:	206e      	movs	r0, #110	; 0x6e
 8000e4a:	f000 fc89 	bl	8001760 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8000e4e:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <displayTime+0xe8>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	2318      	movs	r3, #24
 8000e56:	9302      	str	r3, [sp, #8]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2302      	movs	r3, #2
 8000e64:	2164      	movs	r1, #100	; 0x64
 8000e66:	2096      	movs	r0, #150	; 0x96
 8000e68:	f000 fc7a 	bl	8001760 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8000e6c:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <displayTime+0xec>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	2318      	movs	r3, #24
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	2300      	movs	r3, #0
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2302      	movs	r3, #2
 8000e82:	2182      	movs	r1, #130	; 0x82
 8000e84:	2014      	movs	r0, #20
 8000e86:	f000 fc6b 	bl	8001760 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <displayTime+0xf0>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	2318      	movs	r3, #24
 8000e92:	9302      	str	r3, [sp, #8]
 8000e94:	2300      	movs	r3, #0
 8000e96:	9301      	str	r3, [sp, #4]
 8000e98:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	2182      	movs	r1, #130	; 0x82
 8000ea2:	2046      	movs	r0, #70	; 0x46
 8000ea4:	f000 fc5c 	bl	8001760 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <displayTime+0xf4>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	2318      	movs	r3, #24
 8000eb0:	9302      	str	r3, [sp, #8]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	2182      	movs	r1, #130	; 0x82
 8000ec0:	206e      	movs	r0, #110	; 0x6e
 8000ec2:	f000 fc4d 	bl	8001760 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <displayTime+0xf8>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	2318      	movs	r3, #24
 8000ece:	9302      	str	r3, [sp, #8]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2302      	movs	r3, #2
 8000edc:	2182      	movs	r1, #130	; 0x82
 8000ede:	2096      	movs	r0, #150	; 0x96
 8000ee0:	f000 fc3e 	bl	8001760 <lcd_ShowIntNum>
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000075 	.word	0x20000075
 8000ef0:	20000072 	.word	0x20000072
 8000ef4:	20000070 	.word	0x20000070
 8000ef8:	20000074 	.word	0x20000074
 8000efc:	20000073 	.word	0x20000073
 8000f00:	20000076 	.word	0x20000076
 8000f04:	20000071 	.word	0x20000071

08000f08 <updateTime>:

void updateTime(){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, ds3231_year);
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <updateTime+0x5c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	2006      	movs	r0, #6
 8000f14:	f7ff fc30 	bl	8000778 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, ds3231_month);
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <updateTime+0x60>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	2005      	movs	r0, #5
 8000f20:	f7ff fc2a 	bl	8000778 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, ds3231_date);
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <updateTime+0x64>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	2004      	movs	r0, #4
 8000f2c:	f7ff fc24 	bl	8000778 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, ds3231_day);
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <updateTime+0x68>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	2003      	movs	r0, #3
 8000f38:	f7ff fc1e 	bl	8000778 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <updateTime+0x6c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	2002      	movs	r0, #2
 8000f44:	f7ff fc18 	bl	8000778 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, ds3231_min);
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <updateTime+0x70>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f7ff fc12 	bl	8000778 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <updateTime+0x74>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff fc0c 	bl	8000778 <ds3231_Write>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000071 	.word	0x20000071
 8000f68:	20000076 	.word	0x20000076
 8000f6c:	20000073 	.word	0x20000073
 8000f70:	20000074 	.word	0x20000074
 8000f74:	20000075 	.word	0x20000075
 8000f78:	20000072 	.word	0x20000072
 8000f7c:	20000070 	.word	0x20000070

08000f80 <updateAlarm>:
void updateAlarm(){
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
	alarm_hours = ds3231_hours;
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <updateAlarm+0x54>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <updateAlarm+0x58>)
 8000f8c:	601a      	str	r2, [r3, #0]
	alarm_min = ds3231_min;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <updateAlarm+0x5c>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <updateAlarm+0x60>)
 8000f96:	601a      	str	r2, [r3, #0]
	alarm_sec = ds3231_sec;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <updateAlarm+0x64>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <updateAlarm+0x68>)
 8000fa0:	601a      	str	r2, [r3, #0]
	alarm_date = ds3231_date;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <updateAlarm+0x6c>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <updateAlarm+0x70>)
 8000faa:	601a      	str	r2, [r3, #0]
	alarm_day = ds3231_day;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <updateAlarm+0x74>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <updateAlarm+0x78>)
 8000fb4:	601a      	str	r2, [r3, #0]
	alarm_month = ds3231_month;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <updateAlarm+0x7c>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <updateAlarm+0x80>)
 8000fbe:	601a      	str	r2, [r3, #0]
	alarm_year = ds3231_year;
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <updateAlarm+0x84>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <updateAlarm+0x88>)
 8000fc8:	601a      	str	r2, [r3, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	20000075 	.word	0x20000075
 8000fd8:	2000008c 	.word	0x2000008c
 8000fdc:	20000072 	.word	0x20000072
 8000fe0:	20000098 	.word	0x20000098
 8000fe4:	20000070 	.word	0x20000070
 8000fe8:	20000080 	.word	0x20000080
 8000fec:	20000073 	.word	0x20000073
 8000ff0:	20000094 	.word	0x20000094
 8000ff4:	20000074 	.word	0x20000074
 8000ff8:	20000090 	.word	0x20000090
 8000ffc:	20000076 	.word	0x20000076
 8001000:	20000088 	.word	0x20000088
 8001004:	20000071 	.word	0x20000071
 8001008:	20000084 	.word	0x20000084

0800100c <show_mode>:
void show_mode(){
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af04      	add	r7, sp, #16
	switch (status) {
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <show_mode+0x78>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d022      	beq.n	8001060 <show_mode+0x54>
 800101a:	2b03      	cmp	r3, #3
 800101c:	dc2e      	bgt.n	800107c <show_mode+0x70>
 800101e:	2b01      	cmp	r3, #1
 8001020:	d002      	beq.n	8001028 <show_mode+0x1c>
 8001022:	2b02      	cmp	r3, #2
 8001024:	d00e      	beq.n	8001044 <show_mode+0x38>
			break;
		case TIMER:
			lcd_StrCenter(0, 2, "MODE 3: TIMER", RED, BLUE, 16, 1);
			break;
		default:
			break;
 8001026:	e029      	b.n	800107c <show_mode+0x70>
			lcd_StrCenter(0, 2, "MODE 1: NORMAL", RED, BLUE, 16, 1);
 8001028:	2301      	movs	r3, #1
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	2310      	movs	r3, #16
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	231f      	movs	r3, #31
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001038:	4a13      	ldr	r2, [pc, #76]	; (8001088 <show_mode+0x7c>)
 800103a:	2102      	movs	r1, #2
 800103c:	2000      	movs	r0, #0
 800103e:	f000 fdf5 	bl	8001c2c <lcd_StrCenter>
			break;
 8001042:	e01c      	b.n	800107e <show_mode+0x72>
			lcd_StrCenter(0, 2, "MODE 2: MANUAL", RED, BLUE, 16, 1);
 8001044:	2301      	movs	r3, #1
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2310      	movs	r3, #16
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	231f      	movs	r3, #31
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <show_mode+0x80>)
 8001056:	2102      	movs	r1, #2
 8001058:	2000      	movs	r0, #0
 800105a:	f000 fde7 	bl	8001c2c <lcd_StrCenter>
			break;
 800105e:	e00e      	b.n	800107e <show_mode+0x72>
			lcd_StrCenter(0, 2, "MODE 3: TIMER", RED, BLUE, 16, 1);
 8001060:	2301      	movs	r3, #1
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	2310      	movs	r3, #16
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	231f      	movs	r3, #31
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <show_mode+0x84>)
 8001072:	2102      	movs	r1, #2
 8001074:	2000      	movs	r0, #0
 8001076:	f000 fdd9 	bl	8001c2c <lcd_StrCenter>
			break;
 800107a:	e000      	b.n	800107e <show_mode+0x72>
			break;
 800107c:	bf00      	nop
	}
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000008 	.word	0x20000008
 8001088:	08006e1c 	.word	0x08006e1c
 800108c:	08006e2c 	.word	0x08006e2c
 8001090:	08006e3c 	.word	0x08006e3c

08001094 <blinky_time>:
void blinky_time(){
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af04      	add	r7, sp, #16
	switch (subStatus) {
 800109a:	4b42      	ldr	r3, [pc, #264]	; (80011a4 <blinky_time+0x110>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3b0b      	subs	r3, #11
 80010a0:	2b06      	cmp	r3, #6
 80010a2:	d87a      	bhi.n	800119a <blinky_time+0x106>
 80010a4:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <blinky_time+0x18>)
 80010a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010aa:	bf00      	nop
 80010ac:	080010c9 	.word	0x080010c9
 80010b0:	080010e7 	.word	0x080010e7
 80010b4:	08001105 	.word	0x08001105
 80010b8:	08001123 	.word	0x08001123
 80010bc:	08001141 	.word	0x08001141
 80010c0:	0800115f 	.word	0x0800115f
 80010c4:	0800117d 	.word	0x0800117d
		case YEAR_C:
			lcd_ShowIntNum(150, 130, ds3231_year, 2, BLACK, BLACK, 24);
 80010c8:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <blinky_time+0x114>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	2318      	movs	r3, #24
 80010d0:	9302      	str	r3, [sp, #8]
 80010d2:	2300      	movs	r3, #0
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	2300      	movs	r3, #0
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2302      	movs	r3, #2
 80010dc:	2182      	movs	r1, #130	; 0x82
 80010de:	2096      	movs	r0, #150	; 0x96
 80010e0:	f000 fb3e 	bl	8001760 <lcd_ShowIntNum>
			break;
 80010e4:	e05a      	b.n	800119c <blinky_time+0x108>
		case MONTH_C:
			lcd_ShowIntNum(110, 130, ds3231_month, 2, BLACK, BLACK, 24);
 80010e6:	4b31      	ldr	r3, [pc, #196]	; (80011ac <blinky_time+0x118>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	2318      	movs	r3, #24
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	2300      	movs	r3, #0
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	2300      	movs	r3, #0
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2302      	movs	r3, #2
 80010fa:	2182      	movs	r1, #130	; 0x82
 80010fc:	206e      	movs	r0, #110	; 0x6e
 80010fe:	f000 fb2f 	bl	8001760 <lcd_ShowIntNum>
			break;
 8001102:	e04b      	b.n	800119c <blinky_time+0x108>
		case DATE_C:
			lcd_ShowIntNum(70, 130, ds3231_date, 2, BLACK, BLACK, 24);
 8001104:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <blinky_time+0x11c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b29a      	uxth	r2, r3
 800110a:	2318      	movs	r3, #24
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	2300      	movs	r3, #0
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	2300      	movs	r3, #0
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2302      	movs	r3, #2
 8001118:	2182      	movs	r1, #130	; 0x82
 800111a:	2046      	movs	r0, #70	; 0x46
 800111c:	f000 fb20 	bl	8001760 <lcd_ShowIntNum>
			break;
 8001120:	e03c      	b.n	800119c <blinky_time+0x108>
		case DAY_C:
			lcd_ShowIntNum(20, 130, ds3231_day, 2, BLACK, BLACK, 24);
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <blinky_time+0x120>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b29a      	uxth	r2, r3
 8001128:	2318      	movs	r3, #24
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2300      	movs	r3, #0
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	2300      	movs	r3, #0
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2302      	movs	r3, #2
 8001136:	2182      	movs	r1, #130	; 0x82
 8001138:	2014      	movs	r0, #20
 800113a:	f000 fb11 	bl	8001760 <lcd_ShowIntNum>
			break;
 800113e:	e02d      	b.n	800119c <blinky_time+0x108>
		case HOUR_C:
			lcd_ShowIntNum(70, 100, ds3231_hours, 2, BLACK, BLACK, 24);
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <blinky_time+0x124>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b29a      	uxth	r2, r3
 8001146:	2318      	movs	r3, #24
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	2300      	movs	r3, #0
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	2300      	movs	r3, #0
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2302      	movs	r3, #2
 8001154:	2164      	movs	r1, #100	; 0x64
 8001156:	2046      	movs	r0, #70	; 0x46
 8001158:	f000 fb02 	bl	8001760 <lcd_ShowIntNum>
			break;
 800115c:	e01e      	b.n	800119c <blinky_time+0x108>
		case MIN_C:
			lcd_ShowIntNum(110, 100, ds3231_min, 2, BLACK, BLACK, 24);
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <blinky_time+0x128>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b29a      	uxth	r2, r3
 8001164:	2318      	movs	r3, #24
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	2300      	movs	r3, #0
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	2300      	movs	r3, #0
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2302      	movs	r3, #2
 8001172:	2164      	movs	r1, #100	; 0x64
 8001174:	206e      	movs	r0, #110	; 0x6e
 8001176:	f000 faf3 	bl	8001760 <lcd_ShowIntNum>
			break;
 800117a:	e00f      	b.n	800119c <blinky_time+0x108>
		case SEC_C:
			lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <blinky_time+0x12c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b29a      	uxth	r2, r3
 8001182:	2318      	movs	r3, #24
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	2300      	movs	r3, #0
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	2300      	movs	r3, #0
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2302      	movs	r3, #2
 8001190:	2164      	movs	r1, #100	; 0x64
 8001192:	2096      	movs	r0, #150	; 0x96
 8001194:	f000 fae4 	bl	8001760 <lcd_ShowIntNum>
			break;
 8001198:	e000      	b.n	800119c <blinky_time+0x108>
		default:
			break;
 800119a:	bf00      	nop
	}
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000000c 	.word	0x2000000c
 80011a8:	20000071 	.word	0x20000071
 80011ac:	20000076 	.word	0x20000076
 80011b0:	20000073 	.word	0x20000073
 80011b4:	20000074 	.word	0x20000074
 80011b8:	20000075 	.word	0x20000075
 80011bc:	20000072 	.word	0x20000072
 80011c0:	20000070 	.word	0x20000070

080011c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	; 0x30
 80011c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	4b69      	ldr	r3, [pc, #420]	; (8001384 <MX_GPIO_Init+0x1c0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a68      	ldr	r2, [pc, #416]	; (8001384 <MX_GPIO_Init+0x1c0>)
 80011e4:	f043 0310 	orr.w	r3, r3, #16
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b66      	ldr	r3, [pc, #408]	; (8001384 <MX_GPIO_Init+0x1c0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0310 	and.w	r3, r3, #16
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	4b62      	ldr	r3, [pc, #392]	; (8001384 <MX_GPIO_Init+0x1c0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a61      	ldr	r2, [pc, #388]	; (8001384 <MX_GPIO_Init+0x1c0>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b5f      	ldr	r3, [pc, #380]	; (8001384 <MX_GPIO_Init+0x1c0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b5b      	ldr	r3, [pc, #364]	; (8001384 <MX_GPIO_Init+0x1c0>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a5a      	ldr	r2, [pc, #360]	; (8001384 <MX_GPIO_Init+0x1c0>)
 800121c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b58      	ldr	r3, [pc, #352]	; (8001384 <MX_GPIO_Init+0x1c0>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b54      	ldr	r3, [pc, #336]	; (8001384 <MX_GPIO_Init+0x1c0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a53      	ldr	r2, [pc, #332]	; (8001384 <MX_GPIO_Init+0x1c0>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b51      	ldr	r3, [pc, #324]	; (8001384 <MX_GPIO_Init+0x1c0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b4d      	ldr	r3, [pc, #308]	; (8001384 <MX_GPIO_Init+0x1c0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a4c      	ldr	r2, [pc, #304]	; (8001384 <MX_GPIO_Init+0x1c0>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b4a      	ldr	r3, [pc, #296]	; (8001384 <MX_GPIO_Init+0x1c0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b46      	ldr	r3, [pc, #280]	; (8001384 <MX_GPIO_Init+0x1c0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a45      	ldr	r2, [pc, #276]	; (8001384 <MX_GPIO_Init+0x1c0>)
 8001270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b43      	ldr	r3, [pc, #268]	; (8001384 <MX_GPIO_Init+0x1c0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <MX_GPIO_Init+0x1c0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a3e      	ldr	r2, [pc, #248]	; (8001384 <MX_GPIO_Init+0x1c0>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <MX_GPIO_Init+0x1c0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_DEBUG_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	2170      	movs	r1, #112	; 0x70
 80012a2:	4839      	ldr	r0, [pc, #228]	; (8001388 <MX_GPIO_Init+0x1c4>)
 80012a4:	f001 fce6 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|INPUT_X2_Pin|INPUT_X3_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	f242 0130 	movw	r1, #8240	; 0x2030
 80012ae:	4837      	ldr	r0, [pc, #220]	; (800138c <MX_GPIO_Init+0x1c8>)
 80012b0:	f001 fce0 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INPUT_X1_Pin|FSMC_BLK_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80012ba:	4835      	ldr	r0, [pc, #212]	; (8001390 <MX_GPIO_Init+0x1cc>)
 80012bc:	f001 fcda 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2140      	movs	r1, #64	; 0x40
 80012c4:	4833      	ldr	r0, [pc, #204]	; (8001394 <MX_GPIO_Init+0x1d0>)
 80012c6:	f001 fcd5 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2108      	movs	r1, #8
 80012ce:	4832      	ldr	r0, [pc, #200]	; (8001398 <MX_GPIO_Init+0x1d4>)
 80012d0:	f001 fcd0 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_DEBUG_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80012d4:	2370      	movs	r3, #112	; 0x70
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	4827      	ldr	r0, [pc, #156]	; (8001388 <MX_GPIO_Init+0x1c4>)
 80012ec:	f001 fb26 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin INPUT_X2_Pin INPUT_X3_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|INPUT_X2_Pin|INPUT_X3_Pin;
 80012f0:	f242 0330 	movw	r3, #8240	; 0x2030
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4820      	ldr	r0, [pc, #128]	; (800138c <MX_GPIO_Init+0x1c8>)
 800130a:	f001 fb17 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_X0_Pin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin;
 800130e:	2340      	movs	r3, #64	; 0x40
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INPUT_X0_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	481b      	ldr	r0, [pc, #108]	; (8001390 <MX_GPIO_Init+0x1cc>)
 8001322:	f001 fb0b 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X1_Pin FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = INPUT_X1_Pin|FSMC_BLK_Pin;
 8001326:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4814      	ldr	r0, [pc, #80]	; (8001390 <MX_GPIO_Init+0x1cc>)
 8001340:	f001 fafc 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_LATCH_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001344:	2340      	movs	r3, #64	; 0x40
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	480e      	ldr	r0, [pc, #56]	; (8001394 <MX_GPIO_Init+0x1d0>)
 800135c:	f001 faee 	bl	800293c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001360:	2308      	movs	r3, #8
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	4808      	ldr	r0, [pc, #32]	; (8001398 <MX_GPIO_Init+0x1d4>)
 8001378:	f001 fae0 	bl	800293c <HAL_GPIO_Init>

}
 800137c:	bf00      	nop
 800137e:	3730      	adds	r7, #48	; 0x30
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	40021000 	.word	0x40021000
 800138c:	40020800 	.word	0x40020800
 8001390:	40020000 	.word	0x40020000
 8001394:	40021800 	.word	0x40021800
 8001398:	40020c00 	.word	0x40020c00

0800139c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_I2C1_Init+0x50>)
 80013a2:	4a13      	ldr	r2, [pc, #76]	; (80013f0 <MX_I2C1_Init+0x54>)
 80013a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_I2C1_Init+0x50>)
 80013a8:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <MX_I2C1_Init+0x58>)
 80013aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_I2C1_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_I2C1_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_I2C1_Init+0x50>)
 80013ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <MX_I2C1_Init+0x50>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_I2C1_Init+0x50>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <MX_I2C1_Init+0x50>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_I2C1_Init+0x50>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_I2C1_Init+0x50>)
 80013da:	f001 fc7f 	bl	8002cdc <HAL_I2C_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e4:	f000 fd14 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200000ec 	.word	0x200000ec
 80013f0:	40005400 	.word	0x40005400
 80013f4:	000186a0 	.word	0x000186a0

080013f8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <LCD_WR_REG+0x1c>)
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	8013      	strh	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	600ffffe 	.word	0x600ffffe

08001418 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001422:	4a04      	ldr	r2, [pc, #16]	; (8001434 <LCD_WR_DATA+0x1c>)
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	8053      	strh	r3, [r2, #2]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	600ffffe 	.word	0x600ffffe

08001438 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <LCD_RD_DATA+0x20>)
 8001440:	885b      	ldrh	r3, [r3, #2]
 8001442:	b29b      	uxth	r3, r3
 8001444:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	b29b      	uxth	r3, r3
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	600ffffe 	.word	0x600ffffe

0800145c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4604      	mov	r4, r0
 8001464:	4608      	mov	r0, r1
 8001466:	4611      	mov	r1, r2
 8001468:	461a      	mov	r2, r3
 800146a:	4623      	mov	r3, r4
 800146c:	80fb      	strh	r3, [r7, #6]
 800146e:	4603      	mov	r3, r0
 8001470:	80bb      	strh	r3, [r7, #4]
 8001472:	460b      	mov	r3, r1
 8001474:	807b      	strh	r3, [r7, #2]
 8001476:	4613      	mov	r3, r2
 8001478:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800147a:	202a      	movs	r0, #42	; 0x2a
 800147c:	f7ff ffbc 	bl	80013f8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	b29b      	uxth	r3, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ffc6 	bl	8001418 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	b29b      	uxth	r3, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ffc0 	bl	8001418 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	0a1b      	lsrs	r3, r3, #8
 800149c:	b29b      	uxth	r3, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ffba 	bl	8001418 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ffb4 	bl	8001418 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80014b0:	202b      	movs	r0, #43	; 0x2b
 80014b2:	f7ff ffa1 	bl	80013f8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80014b6:	88bb      	ldrh	r3, [r7, #4]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ffab 	bl	8001418 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80014c2:	88bb      	ldrh	r3, [r7, #4]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ffa5 	bl	8001418 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80014ce:	883b      	ldrh	r3, [r7, #0]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff9f 	bl	8001418 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80014da:	883b      	ldrh	r3, [r7, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff99 	bl	8001418 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80014e6:	202c      	movs	r0, #44	; 0x2c
 80014e8:	f7ff ff86 	bl	80013f8 <LCD_WR_REG>
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd90      	pop	{r4, r7, pc}

080014f4 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <lcd_Clear+0x60>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	3b01      	subs	r3, #1
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <lcd_Clear+0x60>)
 8001508:	885b      	ldrh	r3, [r3, #2]
 800150a:	3b01      	subs	r3, #1
 800150c:	b29b      	uxth	r3, r3
 800150e:	2100      	movs	r1, #0
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff ffa3 	bl	800145c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001516:	2300      	movs	r3, #0
 8001518:	81fb      	strh	r3, [r7, #14]
 800151a:	e011      	b.n	8001540 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 800151c:	2300      	movs	r3, #0
 800151e:	81bb      	strh	r3, [r7, #12]
 8001520:	e006      	b.n	8001530 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff77 	bl	8001418 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800152a:	89bb      	ldrh	r3, [r7, #12]
 800152c:	3301      	adds	r3, #1
 800152e:	81bb      	strh	r3, [r7, #12]
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <lcd_Clear+0x60>)
 8001532:	885b      	ldrh	r3, [r3, #2]
 8001534:	89ba      	ldrh	r2, [r7, #12]
 8001536:	429a      	cmp	r2, r3
 8001538:	d3f3      	bcc.n	8001522 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800153a:	89fb      	ldrh	r3, [r7, #14]
 800153c:	3301      	adds	r3, #1
 800153e:	81fb      	strh	r3, [r7, #14]
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <lcd_Clear+0x60>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	89fa      	ldrh	r2, [r7, #14]
 8001546:	429a      	cmp	r2, r3
 8001548:	d3e8      	bcc.n	800151c <lcd_Clear+0x28>
		}
	}
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000140 	.word	0x20000140

08001558 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
 8001562:	460b      	mov	r3, r1
 8001564:	80bb      	strh	r3, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800156a:	88bb      	ldrh	r3, [r7, #4]
 800156c:	88fa      	ldrh	r2, [r7, #6]
 800156e:	88b9      	ldrh	r1, [r7, #4]
 8001570:	88f8      	ldrh	r0, [r7, #6]
 8001572:	f7ff ff73 	bl	800145c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff4d 	bl	8001418 <LCD_WR_DATA>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b087      	sub	sp, #28
 800158c:	af00      	add	r7, sp, #0
 800158e:	4604      	mov	r4, r0
 8001590:	4608      	mov	r0, r1
 8001592:	4611      	mov	r1, r2
 8001594:	461a      	mov	r2, r3
 8001596:	4623      	mov	r3, r4
 8001598:	80fb      	strh	r3, [r7, #6]
 800159a:	4603      	mov	r3, r0
 800159c:	80bb      	strh	r3, [r7, #4]
 800159e:	460b      	mov	r3, r1
 80015a0:	70fb      	strb	r3, [r7, #3]
 80015a2:	4613      	mov	r3, r2
 80015a4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80015ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015b2:	085b      	lsrs	r3, r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	08db      	lsrs	r3, r3, #3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bf14      	ite	ne
 80015ca:	2301      	movne	r3, #1
 80015cc:	2300      	moveq	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	4413      	add	r3, r2
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015d8:	b29b      	uxth	r3, r3
 80015da:	fb12 f303 	smulbb	r3, r2, r3
 80015de:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	3b20      	subs	r3, #32
 80015e4:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	4413      	add	r3, r2
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	3b01      	subs	r3, #1
 80015f2:	b29c      	uxth	r4, r3
 80015f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	88bb      	ldrh	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3b01      	subs	r3, #1
 8001602:	b29b      	uxth	r3, r3
 8001604:	88b9      	ldrh	r1, [r7, #4]
 8001606:	88f8      	ldrh	r0, [r7, #6]
 8001608:	4622      	mov	r2, r4
 800160a:	f7ff ff27 	bl	800145c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800160e:	2300      	movs	r3, #0
 8001610:	827b      	strh	r3, [r7, #18]
 8001612:	e07a      	b.n	800170a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001614:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001618:	2b0c      	cmp	r3, #12
 800161a:	d028      	beq.n	800166e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 800161c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001620:	2b10      	cmp	r3, #16
 8001622:	d108      	bne.n	8001636 <lcd_ShowChar+0xae>
 8001624:	78fa      	ldrb	r2, [r7, #3]
 8001626:	8a7b      	ldrh	r3, [r7, #18]
 8001628:	493c      	ldr	r1, [pc, #240]	; (800171c <lcd_ShowChar+0x194>)
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	440a      	add	r2, r1
 800162e:	4413      	add	r3, r2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	75fb      	strb	r3, [r7, #23]
 8001634:	e01b      	b.n	800166e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001636:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800163a:	2b18      	cmp	r3, #24
 800163c:	d10b      	bne.n	8001656 <lcd_ShowChar+0xce>
 800163e:	78fa      	ldrb	r2, [r7, #3]
 8001640:	8a79      	ldrh	r1, [r7, #18]
 8001642:	4837      	ldr	r0, [pc, #220]	; (8001720 <lcd_ShowChar+0x198>)
 8001644:	4613      	mov	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	4403      	add	r3, r0
 800164e:	440b      	add	r3, r1
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	75fb      	strb	r3, [r7, #23]
 8001654:	e00b      	b.n	800166e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001656:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800165a:	2b20      	cmp	r3, #32
 800165c:	d15a      	bne.n	8001714 <lcd_ShowChar+0x18c>
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	8a7b      	ldrh	r3, [r7, #18]
 8001662:	4930      	ldr	r1, [pc, #192]	; (8001724 <lcd_ShowChar+0x19c>)
 8001664:	0192      	lsls	r2, r2, #6
 8001666:	440a      	add	r2, r1
 8001668:	4413      	add	r3, r2
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800166e:	2300      	movs	r3, #0
 8001670:	75bb      	strb	r3, [r7, #22]
 8001672:	e044      	b.n	80016fe <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001674:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001678:	2b00      	cmp	r3, #0
 800167a:	d120      	bne.n	80016be <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 800167c:	7dfa      	ldrb	r2, [r7, #23]
 800167e:	7dbb      	ldrb	r3, [r7, #22]
 8001680:	fa42 f303 	asr.w	r3, r2, r3
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <lcd_ShowChar+0x10e>
 800168c:	883b      	ldrh	r3, [r7, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fec2 	bl	8001418 <LCD_WR_DATA>
 8001694:	e003      	b.n	800169e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001696:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff febd 	bl	8001418 <LCD_WR_DATA>
				m++;
 800169e:	7d7b      	ldrb	r3, [r7, #21]
 80016a0:	3301      	adds	r3, #1
 80016a2:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80016a4:	7d7b      	ldrb	r3, [r7, #21]
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80016ac:	fb02 f201 	mul.w	r2, r2, r1
 80016b0:	1a9b      	subs	r3, r3, r2
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d11f      	bne.n	80016f8 <lcd_ShowChar+0x170>
				{
					m=0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	757b      	strb	r3, [r7, #21]
					break;
 80016bc:	e022      	b.n	8001704 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80016be:	7dfa      	ldrb	r2, [r7, #23]
 80016c0:	7dbb      	ldrb	r3, [r7, #22]
 80016c2:	fa42 f303 	asr.w	r3, r2, r3
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <lcd_ShowChar+0x152>
 80016ce:	883a      	ldrh	r2, [r7, #0]
 80016d0:	88b9      	ldrh	r1, [r7, #4]
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff3f 	bl	8001558 <lcd_DrawPoint>
				x++;
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	3301      	adds	r3, #1
 80016de:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80016e0:	88fa      	ldrh	r2, [r7, #6]
 80016e2:	8a3b      	ldrh	r3, [r7, #16]
 80016e4:	1ad2      	subs	r2, r2, r3
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d105      	bne.n	80016f8 <lcd_ShowChar+0x170>
				{
					x=x0;
 80016ec:	8a3b      	ldrh	r3, [r7, #16]
 80016ee:	80fb      	strh	r3, [r7, #6]
					y++;
 80016f0:	88bb      	ldrh	r3, [r7, #4]
 80016f2:	3301      	adds	r3, #1
 80016f4:	80bb      	strh	r3, [r7, #4]
					break;
 80016f6:	e005      	b.n	8001704 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80016f8:	7dbb      	ldrb	r3, [r7, #22]
 80016fa:	3301      	adds	r3, #1
 80016fc:	75bb      	strb	r3, [r7, #22]
 80016fe:	7dbb      	ldrb	r3, [r7, #22]
 8001700:	2b07      	cmp	r3, #7
 8001702:	d9b7      	bls.n	8001674 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001704:	8a7b      	ldrh	r3, [r7, #18]
 8001706:	3301      	adds	r3, #1
 8001708:	827b      	strh	r3, [r7, #18]
 800170a:	8a7a      	ldrh	r2, [r7, #18]
 800170c:	89bb      	ldrh	r3, [r7, #12]
 800170e:	429a      	cmp	r2, r3
 8001710:	d380      	bcc.n	8001614 <lcd_ShowChar+0x8c>
 8001712:	e000      	b.n	8001716 <lcd_ShowChar+0x18e>
		else return;
 8001714:	bf00      	nop
				}
			}
		}
	}
}
 8001716:	371c      	adds	r7, #28
 8001718:	46bd      	mov	sp, r7
 800171a:	bd90      	pop	{r4, r7, pc}
 800171c:	08006e4c 	.word	0x08006e4c
 8001720:	0800743c 	.word	0x0800743c
 8001724:	0800860c 	.word	0x0800860c

08001728 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	460a      	mov	r2, r1
 8001732:	71fb      	strb	r3, [r7, #7]
 8001734:	4613      	mov	r3, r2
 8001736:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001738:	2301      	movs	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 800173c:	e004      	b.n	8001748 <mypow+0x20>
 800173e:	79fa      	ldrb	r2, [r7, #7]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	79bb      	ldrb	r3, [r7, #6]
 800174a:	1e5a      	subs	r2, r3, #1
 800174c:	71ba      	strb	r2, [r7, #6]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f5      	bne.n	800173e <mypow+0x16>
	return result;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af04      	add	r7, sp, #16
 8001766:	4604      	mov	r4, r0
 8001768:	4608      	mov	r0, r1
 800176a:	4611      	mov	r1, r2
 800176c:	461a      	mov	r2, r3
 800176e:	4623      	mov	r3, r4
 8001770:	80fb      	strh	r3, [r7, #6]
 8001772:	4603      	mov	r3, r0
 8001774:	80bb      	strh	r3, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	807b      	strh	r3, [r7, #2]
 800177a:	4613      	mov	r3, r2
 800177c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800177e:	2300      	movs	r3, #0
 8001780:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001782:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001786:	085b      	lsrs	r3, r3, #1
 8001788:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	e059      	b.n	8001844 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001790:	887c      	ldrh	r4, [r7, #2]
 8001792:	787a      	ldrb	r2, [r7, #1]
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	3b01      	subs	r3, #1
 800179c:	b2db      	uxtb	r3, r3
 800179e:	4619      	mov	r1, r3
 80017a0:	200a      	movs	r0, #10
 80017a2:	f7ff ffc1 	bl	8001728 <mypow>
 80017a6:	4603      	mov	r3, r0
 80017a8:	fbb4 f1f3 	udiv	r1, r4, r3
 80017ac:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <lcd_ShowIntNum+0xf8>)
 80017ae:	fba3 2301 	umull	r2, r3, r3, r1
 80017b2:	08da      	lsrs	r2, r3, #3
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	1aca      	subs	r2, r1, r3
 80017be:	4613      	mov	r3, r2
 80017c0:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80017c2:	7bbb      	ldrb	r3, [r7, #14]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d121      	bne.n	800180c <lcd_ShowIntNum+0xac>
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	787b      	ldrb	r3, [r7, #1]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	429a      	cmp	r2, r3
 80017d0:	da1c      	bge.n	800180c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80017d2:	7b3b      	ldrb	r3, [r7, #12]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d117      	bne.n	8001808 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	b29a      	uxth	r2, r3
 80017dc:	7b7b      	ldrb	r3, [r7, #13]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	fb12 f303 	smulbb	r3, r2, r3
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	4413      	add	r3, r2
 80017ea:	b298      	uxth	r0, r3
 80017ec:	8c3a      	ldrh	r2, [r7, #32]
 80017ee:	88b9      	ldrh	r1, [r7, #4]
 80017f0:	2300      	movs	r3, #0
 80017f2:	9302      	str	r3, [sp, #8]
 80017f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017f8:	9301      	str	r3, [sp, #4]
 80017fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	4613      	mov	r3, r2
 8001800:	2220      	movs	r2, #32
 8001802:	f7ff fec1 	bl	8001588 <lcd_ShowChar>
				continue;
 8001806:	e01a      	b.n	800183e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001808:	2301      	movs	r3, #1
 800180a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	b29a      	uxth	r2, r3
 8001810:	7b7b      	ldrb	r3, [r7, #13]
 8001812:	b29b      	uxth	r3, r3
 8001814:	fb12 f303 	smulbb	r3, r2, r3
 8001818:	b29a      	uxth	r2, r3
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	4413      	add	r3, r2
 800181e:	b298      	uxth	r0, r3
 8001820:	7b3b      	ldrb	r3, [r7, #12]
 8001822:	3330      	adds	r3, #48	; 0x30
 8001824:	b2da      	uxtb	r2, r3
 8001826:	8c3c      	ldrh	r4, [r7, #32]
 8001828:	88b9      	ldrh	r1, [r7, #4]
 800182a:	2300      	movs	r3, #0
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	4623      	mov	r3, r4
 800183a:	f7ff fea5 	bl	8001588 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	3301      	adds	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
 8001844:	7bfa      	ldrb	r2, [r7, #15]
 8001846:	787b      	ldrb	r3, [r7, #1]
 8001848:	429a      	cmp	r2, r3
 800184a:	d3a1      	bcc.n	8001790 <lcd_ShowIntNum+0x30>
	}
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bd90      	pop	{r4, r7, pc}
 8001856:	bf00      	nop
 8001858:	cccccccd 	.word	0xcccccccd

0800185c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	b2db      	uxtb	r3, r3
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d007      	beq.n	8001886 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <lcd_SetDir+0x44>)
 8001878:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800187c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <lcd_SetDir+0x44>)
 8001880:	22f0      	movs	r2, #240	; 0xf0
 8001882:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001884:	e006      	b.n	8001894 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <lcd_SetDir+0x44>)
 8001888:	22f0      	movs	r2, #240	; 0xf0
 800188a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <lcd_SetDir+0x44>)
 800188e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001892:	805a      	strh	r2, [r3, #2]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	20000140 	.word	0x20000140

080018a4 <lcd_init>:


void lcd_init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ae:	48aa      	ldr	r0, [pc, #680]	; (8001b58 <lcd_init+0x2b4>)
 80018b0:	f001 f9e0 	bl	8002c74 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80018b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b8:	f000 fe78 	bl	80025ac <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c2:	48a5      	ldr	r0, [pc, #660]	; (8001b58 <lcd_init+0x2b4>)
 80018c4:	f001 f9d6 	bl	8002c74 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80018c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018cc:	f000 fe6e 	bl	80025ac <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7ff ffc3 	bl	800185c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80018d6:	20d3      	movs	r0, #211	; 0xd3
 80018d8:	f7ff fd8e 	bl	80013f8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80018dc:	f7ff fdac 	bl	8001438 <LCD_RD_DATA>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b9d      	ldr	r3, [pc, #628]	; (8001b5c <lcd_init+0x2b8>)
 80018e6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80018e8:	f7ff fda6 	bl	8001438 <LCD_RD_DATA>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b9a      	ldr	r3, [pc, #616]	; (8001b5c <lcd_init+0x2b8>)
 80018f2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80018f4:	f7ff fda0 	bl	8001438 <LCD_RD_DATA>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b97      	ldr	r3, [pc, #604]	; (8001b5c <lcd_init+0x2b8>)
 80018fe:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001900:	4b96      	ldr	r3, [pc, #600]	; (8001b5c <lcd_init+0x2b8>)
 8001902:	889b      	ldrh	r3, [r3, #4]
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	b29a      	uxth	r2, r3
 8001908:	4b94      	ldr	r3, [pc, #592]	; (8001b5c <lcd_init+0x2b8>)
 800190a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 800190c:	f7ff fd94 	bl	8001438 <LCD_RD_DATA>
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
 8001914:	4b91      	ldr	r3, [pc, #580]	; (8001b5c <lcd_init+0x2b8>)
 8001916:	889b      	ldrh	r3, [r3, #4]
 8001918:	4313      	orrs	r3, r2
 800191a:	b29a      	uxth	r2, r3
 800191c:	4b8f      	ldr	r3, [pc, #572]	; (8001b5c <lcd_init+0x2b8>)
 800191e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001920:	20cf      	movs	r0, #207	; 0xcf
 8001922:	f7ff fd69 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001926:	2000      	movs	r0, #0
 8001928:	f7ff fd76 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800192c:	20c1      	movs	r0, #193	; 0xc1
 800192e:	f7ff fd73 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001932:	2030      	movs	r0, #48	; 0x30
 8001934:	f7ff fd70 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001938:	20ed      	movs	r0, #237	; 0xed
 800193a:	f7ff fd5d 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800193e:	2064      	movs	r0, #100	; 0x64
 8001940:	f7ff fd6a 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001944:	2003      	movs	r0, #3
 8001946:	f7ff fd67 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800194a:	2012      	movs	r0, #18
 800194c:	f7ff fd64 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001950:	2081      	movs	r0, #129	; 0x81
 8001952:	f7ff fd61 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001956:	20e8      	movs	r0, #232	; 0xe8
 8001958:	f7ff fd4e 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800195c:	2085      	movs	r0, #133	; 0x85
 800195e:	f7ff fd5b 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001962:	2010      	movs	r0, #16
 8001964:	f7ff fd58 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001968:	207a      	movs	r0, #122	; 0x7a
 800196a:	f7ff fd55 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800196e:	20cb      	movs	r0, #203	; 0xcb
 8001970:	f7ff fd42 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001974:	2039      	movs	r0, #57	; 0x39
 8001976:	f7ff fd4f 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800197a:	202c      	movs	r0, #44	; 0x2c
 800197c:	f7ff fd4c 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001980:	2000      	movs	r0, #0
 8001982:	f7ff fd49 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001986:	2034      	movs	r0, #52	; 0x34
 8001988:	f7ff fd46 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800198c:	2002      	movs	r0, #2
 800198e:	f7ff fd43 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001992:	20f7      	movs	r0, #247	; 0xf7
 8001994:	f7ff fd30 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001998:	2020      	movs	r0, #32
 800199a:	f7ff fd3d 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800199e:	20ea      	movs	r0, #234	; 0xea
 80019a0:	f7ff fd2a 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff fd37 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f7ff fd34 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80019b0:	20c0      	movs	r0, #192	; 0xc0
 80019b2:	f7ff fd21 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80019b6:	201b      	movs	r0, #27
 80019b8:	f7ff fd2e 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80019bc:	20c1      	movs	r0, #193	; 0xc1
 80019be:	f7ff fd1b 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80019c2:	2001      	movs	r0, #1
 80019c4:	f7ff fd28 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80019c8:	20c5      	movs	r0, #197	; 0xc5
 80019ca:	f7ff fd15 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80019ce:	2030      	movs	r0, #48	; 0x30
 80019d0:	f7ff fd22 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80019d4:	2030      	movs	r0, #48	; 0x30
 80019d6:	f7ff fd1f 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80019da:	20c7      	movs	r0, #199	; 0xc7
 80019dc:	f7ff fd0c 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80019e0:	20b7      	movs	r0, #183	; 0xb7
 80019e2:	f7ff fd19 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80019e6:	2036      	movs	r0, #54	; 0x36
 80019e8:	f7ff fd06 	bl	80013f8 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80019ec:	2008      	movs	r0, #8
 80019ee:	f7ff fd13 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80019f2:	203a      	movs	r0, #58	; 0x3a
 80019f4:	f7ff fd00 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80019f8:	2055      	movs	r0, #85	; 0x55
 80019fa:	f7ff fd0d 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80019fe:	20b1      	movs	r0, #177	; 0xb1
 8001a00:	f7ff fcfa 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fd07 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001a0a:	201a      	movs	r0, #26
 8001a0c:	f7ff fd04 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001a10:	20b6      	movs	r0, #182	; 0xb6
 8001a12:	f7ff fcf1 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001a16:	200a      	movs	r0, #10
 8001a18:	f7ff fcfe 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001a1c:	20a2      	movs	r0, #162	; 0xa2
 8001a1e:	f7ff fcfb 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001a22:	20f2      	movs	r0, #242	; 0xf2
 8001a24:	f7ff fce8 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff fcf5 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001a2e:	2026      	movs	r0, #38	; 0x26
 8001a30:	f7ff fce2 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001a34:	2001      	movs	r0, #1
 8001a36:	f7ff fcef 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001a3a:	20e0      	movs	r0, #224	; 0xe0
 8001a3c:	f7ff fcdc 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001a40:	200f      	movs	r0, #15
 8001a42:	f7ff fce9 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001a46:	202a      	movs	r0, #42	; 0x2a
 8001a48:	f7ff fce6 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001a4c:	2028      	movs	r0, #40	; 0x28
 8001a4e:	f7ff fce3 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001a52:	2008      	movs	r0, #8
 8001a54:	f7ff fce0 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001a58:	200e      	movs	r0, #14
 8001a5a:	f7ff fcdd 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001a5e:	2008      	movs	r0, #8
 8001a60:	f7ff fcda 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001a64:	2054      	movs	r0, #84	; 0x54
 8001a66:	f7ff fcd7 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001a6a:	20a9      	movs	r0, #169	; 0xa9
 8001a6c:	f7ff fcd4 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001a70:	2043      	movs	r0, #67	; 0x43
 8001a72:	f7ff fcd1 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001a76:	200a      	movs	r0, #10
 8001a78:	f7ff fcce 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001a7c:	200f      	movs	r0, #15
 8001a7e:	f7ff fccb 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7ff fcc8 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff fcc5 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff fcc2 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7ff fcbf 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001a9a:	20e1      	movs	r0, #225	; 0xe1
 8001a9c:	f7ff fcac 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f7ff fcb9 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001aa6:	2015      	movs	r0, #21
 8001aa8:	f7ff fcb6 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001aac:	2017      	movs	r0, #23
 8001aae:	f7ff fcb3 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001ab2:	2007      	movs	r0, #7
 8001ab4:	f7ff fcb0 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001ab8:	2011      	movs	r0, #17
 8001aba:	f7ff fcad 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001abe:	2006      	movs	r0, #6
 8001ac0:	f7ff fcaa 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001ac4:	202b      	movs	r0, #43	; 0x2b
 8001ac6:	f7ff fca7 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001aca:	2056      	movs	r0, #86	; 0x56
 8001acc:	f7ff fca4 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001ad0:	203c      	movs	r0, #60	; 0x3c
 8001ad2:	f7ff fca1 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001ad6:	2005      	movs	r0, #5
 8001ad8:	f7ff fc9e 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001adc:	2010      	movs	r0, #16
 8001ade:	f7ff fc9b 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ae2:	200f      	movs	r0, #15
 8001ae4:	f7ff fc98 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001ae8:	203f      	movs	r0, #63	; 0x3f
 8001aea:	f7ff fc95 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001aee:	203f      	movs	r0, #63	; 0x3f
 8001af0:	f7ff fc92 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001af4:	200f      	movs	r0, #15
 8001af6:	f7ff fc8f 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001afa:	202b      	movs	r0, #43	; 0x2b
 8001afc:	f7ff fc7c 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b00:	2000      	movs	r0, #0
 8001b02:	f7ff fc89 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f7ff fc86 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f7ff fc83 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001b12:	203f      	movs	r0, #63	; 0x3f
 8001b14:	f7ff fc80 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001b18:	202a      	movs	r0, #42	; 0x2a
 8001b1a:	f7ff fc6d 	bl	80013f8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f7ff fc7a 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7ff fc77 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f7ff fc74 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001b30:	20ef      	movs	r0, #239	; 0xef
 8001b32:	f7ff fc71 	bl	8001418 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001b36:	2011      	movs	r0, #17
 8001b38:	f7ff fc5e 	bl	80013f8 <LCD_WR_REG>
	HAL_Delay(120);
 8001b3c:	2078      	movs	r0, #120	; 0x78
 8001b3e:	f000 fd35 	bl	80025ac <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001b42:	2029      	movs	r0, #41	; 0x29
 8001b44:	f7ff fc58 	bl	80013f8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b4e:	4804      	ldr	r0, [pc, #16]	; (8001b60 <lcd_init+0x2bc>)
 8001b50:	f001 f890 	bl	8002c74 <HAL_GPIO_WritePin>
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40020800 	.word	0x40020800
 8001b5c:	20000140 	.word	0x20000140
 8001b60:	40020000 	.word	0x40020000

08001b64 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b08b      	sub	sp, #44	; 0x2c
 8001b68:	af04      	add	r7, sp, #16
 8001b6a:	60ba      	str	r2, [r7, #8]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4603      	mov	r3, r0
 8001b70:	81fb      	strh	r3, [r7, #14]
 8001b72:	460b      	mov	r3, r1
 8001b74:	81bb      	strh	r3, [r7, #12]
 8001b76:	4613      	mov	r3, r2
 8001b78:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001b7a:	89fb      	ldrh	r3, [r7, #14]
 8001b7c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001b82:	e048      	b.n	8001c16 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001b84:	7dfb      	ldrb	r3, [r7, #23]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d145      	bne.n	8001c16 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001b8a:	89fa      	ldrh	r2, [r7, #14]
 8001b8c:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <lcd_ShowStr+0xc4>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b96:	085b      	lsrs	r3, r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	1acb      	subs	r3, r1, r3
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	dc3f      	bgt.n	8001c20 <lcd_ShowStr+0xbc>
 8001ba0:	89ba      	ldrh	r2, [r7, #12]
 8001ba2:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <lcd_ShowStr+0xc4>)
 8001ba4:	885b      	ldrh	r3, [r3, #2]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bac:	1acb      	subs	r3, r1, r3
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	dc36      	bgt.n	8001c20 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b80      	cmp	r3, #128	; 0x80
 8001bb8:	d902      	bls.n	8001bc0 <lcd_ShowStr+0x5c>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	75fb      	strb	r3, [r7, #23]
 8001bbe:	e02a      	b.n	8001c16 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b0d      	cmp	r3, #13
 8001bc6:	d10b      	bne.n	8001be0 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001bc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	89bb      	ldrh	r3, [r7, #12]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001bd4:	8abb      	ldrh	r3, [r7, #20]
 8001bd6:	81fb      	strh	r3, [r7, #14]
					str++;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	e017      	b.n	8001c10 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	781a      	ldrb	r2, [r3, #0]
 8001be4:	88fc      	ldrh	r4, [r7, #6]
 8001be6:	89b9      	ldrh	r1, [r7, #12]
 8001be8:	89f8      	ldrh	r0, [r7, #14]
 8001bea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bee:	9302      	str	r3, [sp, #8]
 8001bf0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	f7ff fcc4 	bl	8001588 <lcd_ShowChar>
					x+=sizey/2;
 8001c00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	89fb      	ldrh	r3, [r7, #14]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	3301      	adds	r3, #1
 8001c14:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1b2      	bne.n	8001b84 <lcd_ShowStr+0x20>
 8001c1e:	e000      	b.n	8001c22 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001c20:	bf00      	nop
			}
		}
	}
}
 8001c22:	371c      	adds	r7, #28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd90      	pop	{r4, r7, pc}
 8001c28:	20000140 	.word	0x20000140

08001c2c <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af04      	add	r7, sp, #16
 8001c32:	60ba      	str	r2, [r7, #8]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4603      	mov	r3, r0
 8001c38:	81fb      	strh	r3, [r7, #14]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	81bb      	strh	r3, [r7, #12]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8001c42:	68b8      	ldr	r0, [r7, #8]
 8001c44:	f7fe fac0 	bl	80001c8 <strlen>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <lcd_StrCenter+0x60>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	8afb      	ldrh	r3, [r7, #22]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	0fda      	lsrs	r2, r3, #31
 8001c5a:	4413      	add	r3, r2
 8001c5c:	105b      	asrs	r3, r3, #1
 8001c5e:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001c60:	89fa      	ldrh	r2, [r7, #14]
 8001c62:	8abb      	ldrh	r3, [r7, #20]
 8001c64:	4413      	add	r3, r2
 8001c66:	b298      	uxth	r0, r3
 8001c68:	88fa      	ldrh	r2, [r7, #6]
 8001c6a:	89b9      	ldrh	r1, [r7, #12]
 8001c6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c70:	9302      	str	r3, [sp, #8]
 8001c72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	8c3b      	ldrh	r3, [r7, #32]
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f7ff ff70 	bl	8001b64 <lcd_ShowStr>
}
 8001c84:	bf00      	nop
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000140 	.word	0x20000140

08001c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c94:	f000 fc18 	bl	80024c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c98:	f000 f824 	bl	8001ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c9c:	f7ff fa92 	bl	80011c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001ca0:	f000 fb16 	bl	80022d0 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001ca4:	f000 f90a 	bl	8001ebc <MX_SPI1_Init>
  MX_FSMC_Init();
 8001ca8:	f7ff f836 	bl	8000d18 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001cac:	f7ff fb76 	bl	800139c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001cb0:	f000 fb78 	bl	80023a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001cb4:	f000 f880 	bl	8001db8 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  while(!flag_timer2);
 8001cb8:	bf00      	nop
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <main+0x50>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0fb      	beq.n	8001cba <main+0x2a>
	  flag_timer2 = 0;
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <main+0x50>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	801a      	strh	r2, [r3, #0]
	  test_led();
 8001cc8:	f000 f898 	bl	8001dfc <test_led>
	  button_Scan();
 8001ccc:	f7fe fca4 	bl	8000618 <button_Scan>
	  alarm();
 8001cd0:	f7fe fdd8 	bl	8000884 <alarm>
	  input_process();
 8001cd4:	f7fe ff40 	bl	8000b58 <input_process>
	  fsm();
 8001cd8:	f7fe ffb4 	bl	8000c44 <fsm>
	  while(!flag_timer2);
 8001cdc:	e7ec      	b.n	8001cb8 <main+0x28>
 8001cde:	bf00      	nop
 8001ce0:	20000040 	.word	0x20000040

08001ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b094      	sub	sp, #80	; 0x50
 8001ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cea:	f107 0320 	add.w	r3, r7, #32
 8001cee:	2230      	movs	r2, #48	; 0x30
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f005 f87e 	bl	8006df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <SystemClock_Config+0xcc>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	4a27      	ldr	r2, [pc, #156]	; (8001db0 <SystemClock_Config+0xcc>)
 8001d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d16:	6413      	str	r3, [r2, #64]	; 0x40
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <SystemClock_Config+0xcc>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d24:	2300      	movs	r3, #0
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <SystemClock_Config+0xd0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <SystemClock_Config+0xd0>)
 8001d2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <SystemClock_Config+0xd0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d40:	2302      	movs	r3, #2
 8001d42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d44:	2301      	movs	r3, #1
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d48:	2310      	movs	r3, #16
 8001d4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d50:	2300      	movs	r3, #0
 8001d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d54:	2308      	movs	r3, #8
 8001d56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001d58:	2354      	movs	r3, #84	; 0x54
 8001d5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d60:	2304      	movs	r3, #4
 8001d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d64:	f107 0320 	add.w	r3, r7, #32
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 f8a5 	bl	8003eb8 <HAL_RCC_OscConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d74:	f000 f84c 	bl	8001e10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d78:	230f      	movs	r3, #15
 8001d7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	2102      	movs	r1, #2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f002 fb06 	bl	80043a8 <HAL_RCC_ClockConfig>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001da2:	f000 f835 	bl	8001e10 <Error_Handler>
  }
}
 8001da6:	bf00      	nop
 8001da8:	3750      	adds	r7, #80	; 0x50
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40007000 	.word	0x40007000

08001db8 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2120      	movs	r1, #32
 8001dc0:	480d      	ldr	r0, [pc, #52]	; (8001df8 <system_init+0x40>)
 8001dc2:	f000 ff57 	bl	8002c74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2140      	movs	r1, #64	; 0x40
 8001dca:	480b      	ldr	r0, [pc, #44]	; (8001df8 <system_init+0x40>)
 8001dcc:	f000 ff52 	bl	8002c74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2110      	movs	r1, #16
 8001dd4:	4808      	ldr	r0, [pc, #32]	; (8001df8 <system_init+0x40>)
 8001dd6:	f000 ff4d 	bl	8002c74 <HAL_GPIO_WritePin>
	  timer_init();
 8001dda:	f000 f81f 	bl	8001e1c <timer_init>
	  led7_init();
 8001dde:	f7fe fb77 	bl	80004d0 <led7_init>
	  button_init();
 8001de2:	f7fe fc0d 	bl	8000600 <button_init>
	  lcd_init();
 8001de6:	f7ff fd5d 	bl	80018a4 <lcd_init>
	  ds3231_init();
 8001dea:	f7fe fc81 	bl	80006f0 <ds3231_init>
	  setTimer2(50);
 8001dee:	2032      	movs	r0, #50	; 0x32
 8001df0:	f000 f81e 	bl	8001e30 <setTimer2>
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000

08001dfc <test_led>:

void test_led(){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8001e00:	2110      	movs	r1, #16
 8001e02:	4802      	ldr	r0, [pc, #8]	; (8001e0c <test_led+0x10>)
 8001e04:	f000 ff4f 	bl	8002ca6 <HAL_GPIO_TogglePin>
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000

08001e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e14:	b672      	cpsid	i
}
 8001e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <Error_Handler+0x8>
	...

08001e1c <timer_init>:
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;



void timer_init(){
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <timer_init+0x10>)
 8001e22:	f003 faf9 	bl	8005418 <HAL_TIM_Base_Start_IT>
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000218 	.word	0x20000218

08001e30 <setTimer2>:
	timer1_MUL = duration / TIMER_CYCLE_2;
	timer1_counter = timer1_MUL;
	flag_timer1 = 0;
}*/

void setTimer2(uint16_t duration){
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration / TIMER_CYCLE_2;
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <setTimer2+0x2c>)
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <setTimer2+0x2c>)
 8001e42:	881a      	ldrh	r2, [r3, #0]
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <setTimer2+0x30>)
 8001e46:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <setTimer2+0x34>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	801a      	strh	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000044 	.word	0x20000044
 8001e60:	20000042 	.word	0x20000042
 8001e64:	20000040 	.word	0x20000040

08001e68 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e78:	d116      	bne.n	8001ea8 <HAL_TIM_PeriodElapsedCallback+0x40>
			if(timer1_counter == 0) {
				flag_timer1 = 1;
				timer1_counter = timer1_MUL;
			}
		}*/
		if(timer2_counter > 0){
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d010      	beq.n	8001ea4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e8c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001e9e:	881a      	ldrh	r2, [r3, #0]
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ea2:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8001ea4:	f7fe fb20 	bl	80004e8 <led7_Scan>
	}
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000042 	.word	0x20000042
 8001eb4:	20000040 	.word	0x20000040
 8001eb8:	20000044 	.word	0x20000044

08001ebc <MX_SPI1_Init>:
  * @param None
  * @retval None
  */

void MX_SPI1_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ec0:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <MX_SPI1_Init+0x64>)
 8001ec2:	4a18      	ldr	r2, [pc, #96]	; (8001f24 <MX_SPI1_Init+0x68>)
 8001ec4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <MX_SPI1_Init+0x64>)
 8001ec8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ecc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <MX_SPI1_Init+0x64>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <MX_SPI1_Init+0x64>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <MX_SPI1_Init+0x64>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <MX_SPI1_Init+0x64>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <MX_SPI1_Init+0x64>)
 8001ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <MX_SPI1_Init+0x64>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <MX_SPI1_Init+0x64>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <MX_SPI1_Init+0x64>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <MX_SPI1_Init+0x64>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <MX_SPI1_Init+0x64>)
 8001f08:	220a      	movs	r2, #10
 8001f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f0c:	4804      	ldr	r0, [pc, #16]	; (8001f20 <MX_SPI1_Init+0x64>)
 8001f0e:	f002 fc47 	bl	80047a0 <HAL_SPI_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f18:	f7ff ff7a 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200001c0 	.word	0x200001c0
 8001f24:	40013000 	.word	0x40013000

08001f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_MspInit+0x4c>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <HAL_MspInit+0x4c>)
 8001f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <HAL_MspInit+0x4c>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_MspInit+0x4c>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <HAL_MspInit+0x4c>)
 8001f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f58:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_MspInit+0x4c>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800

08001f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a19      	ldr	r2, [pc, #100]	; (8001ffc <HAL_I2C_MspInit+0x84>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d12b      	bne.n	8001ff2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <HAL_I2C_MspInit+0x88>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a17      	ldr	r2, [pc, #92]	; (8002000 <HAL_I2C_MspInit+0x88>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_I2C_MspInit+0x88>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fb6:	23c0      	movs	r3, #192	; 0xc0
 8001fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fba:	2312      	movs	r3, #18
 8001fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	480c      	ldr	r0, [pc, #48]	; (8002004 <HAL_I2C_MspInit+0x8c>)
 8001fd2:	f000 fcb3 	bl	800293c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_I2C_MspInit+0x88>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a08      	ldr	r2, [pc, #32]	; (8002000 <HAL_I2C_MspInit+0x88>)
 8001fe0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_I2C_MspInit+0x88>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ff2:	bf00      	nop
 8001ff4:	3728      	adds	r7, #40	; 0x28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40005400 	.word	0x40005400
 8002000:	40023800 	.word	0x40023800
 8002004:	40020400 	.word	0x40020400

08002008 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a19      	ldr	r2, [pc, #100]	; (800208c <HAL_SPI_MspInit+0x84>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d12b      	bne.n	8002082 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_SPI_MspInit+0x88>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a17      	ldr	r2, [pc, #92]	; (8002090 <HAL_SPI_MspInit+0x88>)
 8002034:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_SPI_MspInit+0x88>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_SPI_MspInit+0x88>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_SPI_MspInit+0x88>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_SPI_MspInit+0x88>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002062:	2338      	movs	r3, #56	; 0x38
 8002064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206e:	2303      	movs	r3, #3
 8002070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002072:	2305      	movs	r3, #5
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	4619      	mov	r1, r3
 800207c:	4805      	ldr	r0, [pc, #20]	; (8002094 <HAL_SPI_MspInit+0x8c>)
 800207e:	f000 fc5d 	bl	800293c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002082:	bf00      	nop
 8002084:	3728      	adds	r7, #40	; 0x28
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40013000 	.word	0x40013000
 8002090:	40023800 	.word	0x40023800
 8002094:	40020400 	.word	0x40020400

08002098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a8:	d115      	bne.n	80020d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <HAL_TIM_Base_MspInit+0x48>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <HAL_TIM_Base_MspInit+0x48>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_TIM_Base_MspInit+0x48>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	201c      	movs	r0, #28
 80020cc:	f000 fb6d 	bl	80027aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020d0:	201c      	movs	r0, #28
 80020d2:	f000 fb86 	bl	80027e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800

080020e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	; 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <HAL_UART_MspInit+0x94>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d134      	bne.n	8002170 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <HAL_UART_MspInit+0x98>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	4a1b      	ldr	r2, [pc, #108]	; (800217c <HAL_UART_MspInit+0x98>)
 8002110:	f043 0310 	orr.w	r3, r3, #16
 8002114:	6453      	str	r3, [r2, #68]	; 0x44
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_UART_MspInit+0x98>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_UART_MspInit+0x98>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a14      	ldr	r2, [pc, #80]	; (800217c <HAL_UART_MspInit+0x98>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_UART_MspInit+0x98>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800213e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214c:	2303      	movs	r3, #3
 800214e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002150:	2307      	movs	r3, #7
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	4619      	mov	r1, r3
 800215a:	4809      	ldr	r0, [pc, #36]	; (8002180 <HAL_UART_MspInit+0x9c>)
 800215c:	f000 fbee 	bl	800293c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	2025      	movs	r0, #37	; 0x25
 8002166:	f000 fb20 	bl	80027aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800216a:	2025      	movs	r0, #37	; 0x25
 800216c:	f000 fb39 	bl	80027e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002170:	bf00      	nop
 8002172:	3728      	adds	r7, #40	; 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40011000 	.word	0x40011000
 800217c:	40023800 	.word	0x40023800
 8002180:	40020000 	.word	0x40020000

08002184 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <HAL_FSMC_MspInit+0x88>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d131      	bne.n	8002204 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <HAL_FSMC_MspInit+0x88>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_FSMC_MspInit+0x8c>)
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	4a18      	ldr	r2, [pc, #96]	; (8002210 <HAL_FSMC_MspInit+0x8c>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6393      	str	r3, [r2, #56]	; 0x38
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <HAL_FSMC_MspInit+0x8c>)
 80021b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80021c2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80021c6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d0:	2303      	movs	r3, #3
 80021d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80021d4:	230c      	movs	r3, #12
 80021d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021d8:	1d3b      	adds	r3, r7, #4
 80021da:	4619      	mov	r1, r3
 80021dc:	480d      	ldr	r0, [pc, #52]	; (8002214 <HAL_FSMC_MspInit+0x90>)
 80021de:	f000 fbad 	bl	800293c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80021e2:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80021e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80021f4:	230c      	movs	r3, #12
 80021f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	4619      	mov	r1, r3
 80021fc:	4806      	ldr	r0, [pc, #24]	; (8002218 <HAL_FSMC_MspInit+0x94>)
 80021fe:	f000 fb9d 	bl	800293c <HAL_GPIO_Init>
 8002202:	e000      	b.n	8002206 <HAL_FSMC_MspInit+0x82>
    return;
 8002204:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000048 	.word	0x20000048
 8002210:	40023800 	.word	0x40023800
 8002214:	40021000 	.word	0x40021000
 8002218:	40020c00 	.word	0x40020c00

0800221c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002224:	f7ff ffae 	bl	8002184 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <NMI_Handler+0x4>

08002236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <HardFault_Handler+0x4>

0800223c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <MemManage_Handler+0x4>

08002242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002246:	e7fe      	b.n	8002246 <BusFault_Handler+0x4>

08002248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800224c:	e7fe      	b.n	800224c <UsageFault_Handler+0x4>

0800224e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800227c:	f000 f976 	bl	800256c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}

08002284 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <TIM2_IRQHandler+0x10>)
 800228a:	f003 f935 	bl	80054f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000218 	.word	0x20000218

08002298 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <USART1_IRQHandler+0x10>)
 800229e:	f003 fdfd 	bl	8005e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	2000017c 	.word	0x2000017c

080022ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <SystemInit+0x20>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b6:	4a05      	ldr	r2, [pc, #20]	; (80022cc <SystemInit+0x20>)
 80022b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022d6:	f107 0308 	add.w	r3, r7, #8
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e4:	463b      	mov	r3, r7
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022ec:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <MX_TIM2_Init+0x94>)
 80022ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80022f4:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <MX_TIM2_Init+0x94>)
 80022f6:	f240 3247 	movw	r2, #839	; 0x347
 80022fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fc:	4b19      	ldr	r3, [pc, #100]	; (8002364 <MX_TIM2_Init+0x94>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002302:	4b18      	ldr	r3, [pc, #96]	; (8002364 <MX_TIM2_Init+0x94>)
 8002304:	2263      	movs	r2, #99	; 0x63
 8002306:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <MX_TIM2_Init+0x94>)
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <MX_TIM2_Init+0x94>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002314:	4813      	ldr	r0, [pc, #76]	; (8002364 <MX_TIM2_Init+0x94>)
 8002316:	f003 f82f 	bl	8005378 <HAL_TIM_Base_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002320:	f7ff fd76 	bl	8001e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002328:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800232a:	f107 0308 	add.w	r3, r7, #8
 800232e:	4619      	mov	r1, r3
 8002330:	480c      	ldr	r0, [pc, #48]	; (8002364 <MX_TIM2_Init+0x94>)
 8002332:	f003 f9e9 	bl	8005708 <HAL_TIM_ConfigClockSource>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800233c:	f7ff fd68 	bl	8001e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002340:	2300      	movs	r3, #0
 8002342:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002348:	463b      	mov	r3, r7
 800234a:	4619      	mov	r1, r3
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <MX_TIM2_Init+0x94>)
 800234e:	f003 fc05 	bl	8005b5c <HAL_TIMEx_MasterConfigSynchronization>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002358:	f7ff fd5a 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800235c:	bf00      	nop
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000218 	.word	0x20000218

08002368 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a08      	ldr	r2, [pc, #32]	; (8002398 <HAL_UART_RxCpltCallback+0x30>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d10a      	bne.n	8002390 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 800237a:	230a      	movs	r3, #10
 800237c:	2201      	movs	r2, #1
 800237e:	4907      	ldr	r1, [pc, #28]	; (800239c <HAL_UART_RxCpltCallback+0x34>)
 8002380:	4807      	ldr	r0, [pc, #28]	; (80023a0 <HAL_UART_RxCpltCallback+0x38>)
 8002382:	f003 fcc8 	bl	8005d16 <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002386:	2201      	movs	r2, #1
 8002388:	4904      	ldr	r1, [pc, #16]	; (800239c <HAL_UART_RxCpltCallback+0x34>)
 800238a:	4805      	ldr	r0, [pc, #20]	; (80023a0 <HAL_UART_RxCpltCallback+0x38>)
 800238c:	f003 fd55 	bl	8005e3a <HAL_UART_Receive_IT>
	}
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40011000 	.word	0x40011000
 800239c:	2000004c 	.word	0x2000004c
 80023a0:	2000017c 	.word	0x2000017c

080023a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <MX_USART1_UART_Init+0x4c>)
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <MX_USART1_UART_Init+0x50>)
 80023ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <MX_USART1_UART_Init+0x4c>)
 80023b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <MX_USART1_UART_Init+0x4c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <MX_USART1_UART_Init+0x4c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <MX_USART1_UART_Init+0x4c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <MX_USART1_UART_Init+0x4c>)
 80023ca:	220c      	movs	r2, #12
 80023cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <MX_USART1_UART_Init+0x4c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <MX_USART1_UART_Init+0x4c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023da:	4805      	ldr	r0, [pc, #20]	; (80023f0 <MX_USART1_UART_Init+0x4c>)
 80023dc:	f003 fc4e 	bl	8005c7c <HAL_UART_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023e6:	f7ff fd13 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2000017c 	.word	0x2000017c
 80023f4:	40011000 	.word	0x40011000

080023f8 <BCD2DEC>:
 *      Author: ADMIN
 */

#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	b2db      	uxtb	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	0092      	lsls	r2, r2, #2
 800240c:	4413      	add	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	b2da      	uxtb	r2, r3
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	b2db      	uxtb	r3, r3
 800241a:	4413      	add	r3, r2
 800241c:	b2db      	uxtb	r3, r3
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <DEC2BCD+0x44>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	08db      	lsrs	r3, r3, #3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	b258      	sxtb	r0, r3
 8002446:	79fa      	ldrb	r2, [r7, #7]
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <DEC2BCD+0x44>)
 800244a:	fba3 1302 	umull	r1, r3, r3, r2
 800244e:	08d9      	lsrs	r1, r3, #3
 8002450:	460b      	mov	r3, r1
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	b25b      	sxtb	r3, r3
 800245e:	4303      	orrs	r3, r0
 8002460:	b25b      	sxtb	r3, r3
 8002462:	b2db      	uxtb	r3, r3
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	cccccccd 	.word	0xcccccccd

08002474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002478:	480d      	ldr	r0, [pc, #52]	; (80024b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800247a:	490e      	ldr	r1, [pc, #56]	; (80024b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800247c:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002480:	e002      	b.n	8002488 <LoopCopyDataInit>

08002482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002486:	3304      	adds	r3, #4

08002488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800248c:	d3f9      	bcc.n	8002482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248e:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002490:	4c0b      	ldr	r4, [pc, #44]	; (80024c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002494:	e001      	b.n	800249a <LoopFillZerobss>

08002496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002498:	3204      	adds	r2, #4

0800249a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800249c:	d3fb      	bcc.n	8002496 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800249e:	f7ff ff05 	bl	80022ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024a2:	f004 fc83 	bl	8006dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a6:	f7ff fbf3 	bl	8001c90 <main>
  bx  lr    
 80024aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80024b8:	08009df4 	.word	0x08009df4
  ldr r2, =_sbss
 80024bc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80024c0:	20000264 	.word	0x20000264

080024c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c4:	e7fe      	b.n	80024c4 <ADC_IRQHandler>
	...

080024c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024cc:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <HAL_Init+0x40>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a0d      	ldr	r2, [pc, #52]	; (8002508 <HAL_Init+0x40>)
 80024d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_Init+0x40>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <HAL_Init+0x40>)
 80024de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_Init+0x40>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a07      	ldr	r2, [pc, #28]	; (8002508 <HAL_Init+0x40>)
 80024ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f0:	2003      	movs	r0, #3
 80024f2:	f000 f94f 	bl	8002794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024f6:	200f      	movs	r0, #15
 80024f8:	f000 f808 	bl	800250c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024fc:	f7ff fd14 	bl	8001f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40023c00 	.word	0x40023c00

0800250c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_InitTick+0x54>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_InitTick+0x58>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
 800251e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002522:	fbb3 f3f1 	udiv	r3, r3, r1
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f967 	bl	80027fe <HAL_SYSTICK_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e00e      	b.n	8002558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b0f      	cmp	r3, #15
 800253e:	d80a      	bhi.n	8002556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002540:	2200      	movs	r2, #0
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	f000 f92f 	bl	80027aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800254c:	4a06      	ldr	r2, [pc, #24]	; (8002568 <HAL_InitTick+0x5c>)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20000010 	.word	0x20000010
 8002564:	20000018 	.word	0x20000018
 8002568:	20000014 	.word	0x20000014

0800256c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_IncTick+0x20>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_IncTick+0x24>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4413      	add	r3, r2
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <HAL_IncTick+0x24>)
 800257e:	6013      	str	r3, [r2, #0]
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000018 	.word	0x20000018
 8002590:	20000260 	.word	0x20000260

08002594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return uwTick;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <HAL_GetTick+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000260 	.word	0x20000260

080025ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025b4:	f7ff ffee 	bl	8002594 <HAL_GetTick>
 80025b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c4:	d005      	beq.n	80025d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_Delay+0x44>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4413      	add	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025d2:	bf00      	nop
 80025d4:	f7ff ffde 	bl	8002594 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d8f7      	bhi.n	80025d4 <HAL_Delay+0x28>
  {
  }
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000018 	.word	0x20000018

080025f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002610:	4013      	ands	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800261c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	60d3      	str	r3, [r2, #12]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <__NVIC_GetPriorityGrouping+0x18>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	f003 0307 	and.w	r3, r3, #7
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	db0b      	blt.n	8002682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	4907      	ldr	r1, [pc, #28]	; (8002690 <__NVIC_EnableIRQ+0x38>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	2001      	movs	r0, #1
 800267a:	fa00 f202 	lsl.w	r2, r0, r2
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000e100 	.word	0xe000e100

08002694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	db0a      	blt.n	80026be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	490c      	ldr	r1, [pc, #48]	; (80026e0 <__NVIC_SetPriority+0x4c>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	0112      	lsls	r2, r2, #4
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	440b      	add	r3, r1
 80026b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026bc:	e00a      	b.n	80026d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4908      	ldr	r1, [pc, #32]	; (80026e4 <__NVIC_SetPriority+0x50>)
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	3b04      	subs	r3, #4
 80026cc:	0112      	lsls	r2, r2, #4
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	440b      	add	r3, r1
 80026d2:	761a      	strb	r2, [r3, #24]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000e100 	.word	0xe000e100
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f1c3 0307 	rsb	r3, r3, #7
 8002702:	2b04      	cmp	r3, #4
 8002704:	bf28      	it	cs
 8002706:	2304      	movcs	r3, #4
 8002708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3304      	adds	r3, #4
 800270e:	2b06      	cmp	r3, #6
 8002710:	d902      	bls.n	8002718 <NVIC_EncodePriority+0x30>
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3b03      	subs	r3, #3
 8002716:	e000      	b.n	800271a <NVIC_EncodePriority+0x32>
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	f04f 32ff 	mov.w	r2, #4294967295
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	401a      	ands	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002730:	f04f 31ff 	mov.w	r1, #4294967295
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	43d9      	mvns	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	4313      	orrs	r3, r2
         );
}
 8002742:	4618      	mov	r0, r3
 8002744:	3724      	adds	r7, #36	; 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002760:	d301      	bcc.n	8002766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002762:	2301      	movs	r3, #1
 8002764:	e00f      	b.n	8002786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <SysTick_Config+0x40>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276e:	210f      	movs	r1, #15
 8002770:	f04f 30ff 	mov.w	r0, #4294967295
 8002774:	f7ff ff8e 	bl	8002694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <SysTick_Config+0x40>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277e:	4b04      	ldr	r3, [pc, #16]	; (8002790 <SysTick_Config+0x40>)
 8002780:	2207      	movs	r2, #7
 8002782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	e000e010 	.word	0xe000e010

08002794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ff29 	bl	80025f4 <__NVIC_SetPriorityGrouping>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027bc:	f7ff ff3e 	bl	800263c <__NVIC_GetPriorityGrouping>
 80027c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	6978      	ldr	r0, [r7, #20]
 80027c8:	f7ff ff8e 	bl	80026e8 <NVIC_EncodePriority>
 80027cc:	4602      	mov	r2, r0
 80027ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff5d 	bl	8002694 <__NVIC_SetPriority>
}
 80027da:	bf00      	nop
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff31 	bl	8002658 <__NVIC_EnableIRQ>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ffa2 	bl	8002750 <SysTick_Config>
 800280c:	4603      	mov	r3, r0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002824:	f7ff feb6 	bl	8002594 <HAL_GetTick>
 8002828:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d008      	beq.n	8002848 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2280      	movs	r2, #128	; 0x80
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e052      	b.n	80028ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0216 	bic.w	r2, r2, #22
 8002856:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002866:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	2b00      	cmp	r3, #0
 800286e:	d103      	bne.n	8002878 <HAL_DMA_Abort+0x62>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002874:	2b00      	cmp	r3, #0
 8002876:	d007      	beq.n	8002888 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0208 	bic.w	r2, r2, #8
 8002886:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0201 	bic.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002898:	e013      	b.n	80028c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800289a:	f7ff fe7b 	bl	8002594 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	d90c      	bls.n	80028c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2220      	movs	r2, #32
 80028ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2203      	movs	r2, #3
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e015      	b.n	80028ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1e4      	bne.n	800289a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	223f      	movs	r2, #63	; 0x3f
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d004      	beq.n	8002914 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2280      	movs	r2, #128	; 0x80
 800290e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e00c      	b.n	800292e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2205      	movs	r2, #5
 8002918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	; 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
 8002956:	e16b      	b.n	8002c30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002958:	2201      	movs	r2, #1
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4013      	ands	r3, r2
 800296a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	429a      	cmp	r2, r3
 8002972:	f040 815a 	bne.w	8002c2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d005      	beq.n	800298e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800298a:	2b02      	cmp	r3, #2
 800298c:	d130      	bne.n	80029f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	2203      	movs	r2, #3
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c4:	2201      	movs	r2, #1
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 0201 	and.w	r2, r3, #1
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d017      	beq.n	8002a2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	2203      	movs	r2, #3
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d123      	bne.n	8002a80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	08da      	lsrs	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3208      	adds	r2, #8
 8002a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	220f      	movs	r2, #15
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	08da      	lsrs	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3208      	adds	r2, #8
 8002a7a:	69b9      	ldr	r1, [r7, #24]
 8002a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0203 	and.w	r2, r3, #3
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80b4 	beq.w	8002c2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	4b60      	ldr	r3, [pc, #384]	; (8002c48 <HAL_GPIO_Init+0x30c>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	4a5f      	ldr	r2, [pc, #380]	; (8002c48 <HAL_GPIO_Init+0x30c>)
 8002acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad2:	4b5d      	ldr	r3, [pc, #372]	; (8002c48 <HAL_GPIO_Init+0x30c>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ade:	4a5b      	ldr	r2, [pc, #364]	; (8002c4c <HAL_GPIO_Init+0x310>)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	220f      	movs	r2, #15
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a52      	ldr	r2, [pc, #328]	; (8002c50 <HAL_GPIO_Init+0x314>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d02b      	beq.n	8002b62 <HAL_GPIO_Init+0x226>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a51      	ldr	r2, [pc, #324]	; (8002c54 <HAL_GPIO_Init+0x318>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d025      	beq.n	8002b5e <HAL_GPIO_Init+0x222>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a50      	ldr	r2, [pc, #320]	; (8002c58 <HAL_GPIO_Init+0x31c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01f      	beq.n	8002b5a <HAL_GPIO_Init+0x21e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4f      	ldr	r2, [pc, #316]	; (8002c5c <HAL_GPIO_Init+0x320>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d019      	beq.n	8002b56 <HAL_GPIO_Init+0x21a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4e      	ldr	r2, [pc, #312]	; (8002c60 <HAL_GPIO_Init+0x324>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <HAL_GPIO_Init+0x216>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4d      	ldr	r2, [pc, #308]	; (8002c64 <HAL_GPIO_Init+0x328>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d00d      	beq.n	8002b4e <HAL_GPIO_Init+0x212>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4c      	ldr	r2, [pc, #304]	; (8002c68 <HAL_GPIO_Init+0x32c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d007      	beq.n	8002b4a <HAL_GPIO_Init+0x20e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4b      	ldr	r2, [pc, #300]	; (8002c6c <HAL_GPIO_Init+0x330>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d101      	bne.n	8002b46 <HAL_GPIO_Init+0x20a>
 8002b42:	2307      	movs	r3, #7
 8002b44:	e00e      	b.n	8002b64 <HAL_GPIO_Init+0x228>
 8002b46:	2308      	movs	r3, #8
 8002b48:	e00c      	b.n	8002b64 <HAL_GPIO_Init+0x228>
 8002b4a:	2306      	movs	r3, #6
 8002b4c:	e00a      	b.n	8002b64 <HAL_GPIO_Init+0x228>
 8002b4e:	2305      	movs	r3, #5
 8002b50:	e008      	b.n	8002b64 <HAL_GPIO_Init+0x228>
 8002b52:	2304      	movs	r3, #4
 8002b54:	e006      	b.n	8002b64 <HAL_GPIO_Init+0x228>
 8002b56:	2303      	movs	r3, #3
 8002b58:	e004      	b.n	8002b64 <HAL_GPIO_Init+0x228>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e002      	b.n	8002b64 <HAL_GPIO_Init+0x228>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_GPIO_Init+0x228>
 8002b62:	2300      	movs	r3, #0
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	f002 0203 	and.w	r2, r2, #3
 8002b6a:	0092      	lsls	r2, r2, #2
 8002b6c:	4093      	lsls	r3, r2
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b74:	4935      	ldr	r1, [pc, #212]	; (8002c4c <HAL_GPIO_Init+0x310>)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	089b      	lsrs	r3, r3, #2
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b82:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ba6:	4a32      	ldr	r2, [pc, #200]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bac:	4b30      	ldr	r3, [pc, #192]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bd0:	4a27      	ldr	r2, [pc, #156]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd6:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bfa:	4a1d      	ldr	r2, [pc, #116]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c24:	4a12      	ldr	r2, [pc, #72]	; (8002c70 <HAL_GPIO_Init+0x334>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	61fb      	str	r3, [r7, #28]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b0f      	cmp	r3, #15
 8002c34:	f67f ae90 	bls.w	8002958 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	3724      	adds	r7, #36	; 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40020000 	.word	0x40020000
 8002c54:	40020400 	.word	0x40020400
 8002c58:	40020800 	.word	0x40020800
 8002c5c:	40020c00 	.word	0x40020c00
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40021400 	.word	0x40021400
 8002c68:	40021800 	.word	0x40021800
 8002c6c:	40021c00 	.word	0x40021c00
 8002c70:	40013c00 	.word	0x40013c00

08002c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
 8002c80:	4613      	mov	r3, r2
 8002c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c84:	787b      	ldrb	r3, [r7, #1]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c90:	e003      	b.n	8002c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c92:	887b      	ldrh	r3, [r7, #2]
 8002c94:	041a      	lsls	r2, r3, #16
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	619a      	str	r2, [r3, #24]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b085      	sub	sp, #20
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cb8:	887a      	ldrh	r2, [r7, #2]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	041a      	lsls	r2, r3, #16
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	43d9      	mvns	r1, r3
 8002cc4:	887b      	ldrh	r3, [r7, #2]
 8002cc6:	400b      	ands	r3, r1
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	619a      	str	r2, [r3, #24]
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e12b      	b.n	8002f46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff f938 	bl	8001f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2224      	movs	r2, #36	; 0x24
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d40:	f001 fd06 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8002d44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4a81      	ldr	r2, [pc, #516]	; (8002f50 <HAL_I2C_Init+0x274>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d807      	bhi.n	8002d60 <HAL_I2C_Init+0x84>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a80      	ldr	r2, [pc, #512]	; (8002f54 <HAL_I2C_Init+0x278>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	bf94      	ite	ls
 8002d58:	2301      	movls	r3, #1
 8002d5a:	2300      	movhi	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e006      	b.n	8002d6e <HAL_I2C_Init+0x92>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a7d      	ldr	r2, [pc, #500]	; (8002f58 <HAL_I2C_Init+0x27c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	bf94      	ite	ls
 8002d68:	2301      	movls	r3, #1
 8002d6a:	2300      	movhi	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0e7      	b.n	8002f46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a78      	ldr	r2, [pc, #480]	; (8002f5c <HAL_I2C_Init+0x280>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0c9b      	lsrs	r3, r3, #18
 8002d80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a6a      	ldr	r2, [pc, #424]	; (8002f50 <HAL_I2C_Init+0x274>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d802      	bhi.n	8002db0 <HAL_I2C_Init+0xd4>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3301      	adds	r3, #1
 8002dae:	e009      	b.n	8002dc4 <HAL_I2C_Init+0xe8>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	4a69      	ldr	r2, [pc, #420]	; (8002f60 <HAL_I2C_Init+0x284>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	495c      	ldr	r1, [pc, #368]	; (8002f50 <HAL_I2C_Init+0x274>)
 8002de0:	428b      	cmp	r3, r1
 8002de2:	d819      	bhi.n	8002e18 <HAL_I2C_Init+0x13c>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e59      	subs	r1, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df2:	1c59      	adds	r1, r3, #1
 8002df4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002df8:	400b      	ands	r3, r1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_I2C_Init+0x138>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1e59      	subs	r1, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e12:	e051      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e14:	2304      	movs	r3, #4
 8002e16:	e04f      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d111      	bne.n	8002e44 <HAL_I2C_Init+0x168>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1e58      	subs	r0, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	440b      	add	r3, r1
 8002e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	e012      	b.n	8002e6a <HAL_I2C_Init+0x18e>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1e58      	subs	r0, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	0099      	lsls	r1, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Init+0x196>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e022      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10e      	bne.n	8002e98 <HAL_I2C_Init+0x1bc>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1e58      	subs	r0, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	440b      	add	r3, r1
 8002e88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e96:	e00f      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e58      	subs	r0, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	0099      	lsls	r1, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	6809      	ldr	r1, [r1, #0]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69da      	ldr	r2, [r3, #28]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ee6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6911      	ldr	r1, [r2, #16]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68d2      	ldr	r2, [r2, #12]
 8002ef2:	4311      	orrs	r1, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	000186a0 	.word	0x000186a0
 8002f54:	001e847f 	.word	0x001e847f
 8002f58:	003d08ff 	.word	0x003d08ff
 8002f5c:	431bde83 	.word	0x431bde83
 8002f60:	10624dd3 	.word	0x10624dd3

08002f64 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	4608      	mov	r0, r1
 8002f6e:	4611      	mov	r1, r2
 8002f70:	461a      	mov	r2, r3
 8002f72:	4603      	mov	r3, r0
 8002f74:	817b      	strh	r3, [r7, #10]
 8002f76:	460b      	mov	r3, r1
 8002f78:	813b      	strh	r3, [r7, #8]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f7e:	f7ff fb09 	bl	8002594 <HAL_GetTick>
 8002f82:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	f040 80d9 	bne.w	8003144 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	2319      	movs	r3, #25
 8002f98:	2201      	movs	r2, #1
 8002f9a:	496d      	ldr	r1, [pc, #436]	; (8003150 <HAL_I2C_Mem_Write+0x1ec>)
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fdad 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e0cc      	b.n	8003146 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_I2C_Mem_Write+0x56>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e0c5      	b.n	8003146 <HAL_I2C_Mem_Write+0x1e2>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d007      	beq.n	8002fe0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2221      	movs	r2, #33	; 0x21
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a3a      	ldr	r2, [r7, #32]
 800300a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003010:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a4d      	ldr	r2, [pc, #308]	; (8003154 <HAL_I2C_Mem_Write+0x1f0>)
 8003020:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003022:	88f8      	ldrh	r0, [r7, #6]
 8003024:	893a      	ldrh	r2, [r7, #8]
 8003026:	8979      	ldrh	r1, [r7, #10]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	4603      	mov	r3, r0
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fbe4 	bl	8003800 <I2C_RequestMemoryWrite>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d052      	beq.n	80030e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e081      	b.n	8003146 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fe2e 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00d      	beq.n	800306e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	2b04      	cmp	r3, #4
 8003058:	d107      	bne.n	800306a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003068:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e06b      	b.n	8003146 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	781a      	ldrb	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d11b      	bne.n	80030e4 <HAL_I2C_Mem_Write+0x180>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d017      	beq.n	80030e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	781a      	ldrb	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1aa      	bne.n	8003042 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 fe1a 	bl	8003d2a <I2C_WaitOnBTFFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00d      	beq.n	8003118 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	2b04      	cmp	r3, #4
 8003102:	d107      	bne.n	8003114 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003112:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e016      	b.n	8003146 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	e000      	b.n	8003146 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003144:	2302      	movs	r3, #2
  }
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	00100002 	.word	0x00100002
 8003154:	ffff0000 	.word	0xffff0000

08003158 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08c      	sub	sp, #48	; 0x30
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	4608      	mov	r0, r1
 8003162:	4611      	mov	r1, r2
 8003164:	461a      	mov	r2, r3
 8003166:	4603      	mov	r3, r0
 8003168:	817b      	strh	r3, [r7, #10]
 800316a:	460b      	mov	r3, r1
 800316c:	813b      	strh	r3, [r7, #8]
 800316e:	4613      	mov	r3, r2
 8003170:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003172:	f7ff fa0f 	bl	8002594 <HAL_GetTick>
 8003176:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b20      	cmp	r3, #32
 8003182:	f040 8208 	bne.w	8003596 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	2319      	movs	r3, #25
 800318c:	2201      	movs	r2, #1
 800318e:	497b      	ldr	r1, [pc, #492]	; (800337c <HAL_I2C_Mem_Read+0x224>)
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fcb3 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
 800319e:	e1fb      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_I2C_Mem_Read+0x56>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e1f4      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d007      	beq.n	80031d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2222      	movs	r2, #34	; 0x22
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2240      	movs	r2, #64	; 0x40
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003204:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a5b      	ldr	r2, [pc, #364]	; (8003380 <HAL_I2C_Mem_Read+0x228>)
 8003214:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003216:	88f8      	ldrh	r0, [r7, #6]
 8003218:	893a      	ldrh	r2, [r7, #8]
 800321a:	8979      	ldrh	r1, [r7, #10]
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	9301      	str	r3, [sp, #4]
 8003220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	4603      	mov	r3, r0
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fb80 	bl	800392c <I2C_RequestMemoryRead>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e1b0      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323a:	2b00      	cmp	r3, #0
 800323c:	d113      	bne.n	8003266 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323e:	2300      	movs	r3, #0
 8003240:	623b      	str	r3, [r7, #32]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	623b      	str	r3, [r7, #32]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	623b      	str	r3, [r7, #32]
 8003252:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	e184      	b.n	8003570 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326a:	2b01      	cmp	r3, #1
 800326c:	d11b      	bne.n	80032a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	e164      	b.n	8003570 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d11b      	bne.n	80032e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ce:	2300      	movs	r3, #0
 80032d0:	61bb      	str	r3, [r7, #24]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	e144      	b.n	8003570 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032fc:	e138      	b.n	8003570 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	2b03      	cmp	r3, #3
 8003304:	f200 80f1 	bhi.w	80034ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	2b01      	cmp	r3, #1
 800330e:	d123      	bne.n	8003358 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003312:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fd49 	bl	8003dac <I2C_WaitOnRXNEFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e139      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003356:	e10b      	b.n	8003570 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335c:	2b02      	cmp	r3, #2
 800335e:	d14e      	bne.n	80033fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003366:	2200      	movs	r2, #0
 8003368:	4906      	ldr	r1, [pc, #24]	; (8003384 <HAL_I2C_Mem_Read+0x22c>)
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 fbc6 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d008      	beq.n	8003388 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e10e      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
 800337a:	bf00      	nop
 800337c:	00100002 	.word	0x00100002
 8003380:	ffff0000 	.word	0xffff0000
 8003384:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003396:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033fc:	e0b8      	b.n	8003570 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003404:	2200      	movs	r2, #0
 8003406:	4966      	ldr	r1, [pc, #408]	; (80035a0 <HAL_I2C_Mem_Read+0x448>)
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fb77 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0bf      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003426:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	2200      	movs	r2, #0
 8003462:	494f      	ldr	r1, [pc, #316]	; (80035a0 <HAL_I2C_Mem_Read+0x448>)
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 fb49 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e091      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003482:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034e8:	e042      	b.n	8003570 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 fc5c 	bl	8003dac <I2C_WaitOnRXNEFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e04c      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b04      	cmp	r3, #4
 800353c:	d118      	bne.n	8003570 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003574:	2b00      	cmp	r3, #0
 8003576:	f47f aec2 	bne.w	80032fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	e000      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003596:	2302      	movs	r3, #2
  }
}
 8003598:	4618      	mov	r0, r3
 800359a:	3728      	adds	r7, #40	; 0x28
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	00010004 	.word	0x00010004

080035a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	; 0x28
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	460b      	mov	r3, r1
 80035b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80035b4:	f7fe ffee 	bl	8002594 <HAL_GetTick>
 80035b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80035ba:	2301      	movs	r3, #1
 80035bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	f040 8111 	bne.w	80037ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	2319      	movs	r3, #25
 80035d2:	2201      	movs	r2, #1
 80035d4:	4988      	ldr	r1, [pc, #544]	; (80037f8 <HAL_I2C_IsDeviceReady+0x254>)
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 fa90 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80035e2:	2302      	movs	r3, #2
 80035e4:	e104      	b.n	80037f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_I2C_IsDeviceReady+0x50>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e0fd      	b.n	80037f0 <HAL_I2C_IsDeviceReady+0x24c>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b01      	cmp	r3, #1
 8003608:	d007      	beq.n	800361a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0201 	orr.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003628:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2224      	movs	r2, #36	; 0x24
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4a70      	ldr	r2, [pc, #448]	; (80037fc <HAL_I2C_IsDeviceReady+0x258>)
 800363c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800364c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2200      	movs	r2, #0
 8003656:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 fa4e 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003674:	d103      	bne.n	800367e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e0b6      	b.n	80037f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003682:	897b      	ldrh	r3, [r7, #10]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003690:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003692:	f7fe ff7f 	bl	8002594 <HAL_GetTick>
 8003696:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	bf0c      	ite	eq
 80036a6:	2301      	moveq	r3, #1
 80036a8:	2300      	movne	r3, #0
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036bc:	bf0c      	ite	eq
 80036be:	2301      	moveq	r3, #1
 80036c0:	2300      	movne	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036c6:	e025      	b.n	8003714 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036c8:	f7fe ff64 	bl	8002594 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d302      	bcc.n	80036de <HAL_I2C_IsDeviceReady+0x13a>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d103      	bne.n	80036e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	22a0      	movs	r2, #160	; 0xa0
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	bf0c      	ite	eq
 80036f4:	2301      	moveq	r3, #1
 80036f6:	2300      	movne	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2ba0      	cmp	r3, #160	; 0xa0
 800371e:	d005      	beq.n	800372c <HAL_I2C_IsDeviceReady+0x188>
 8003720:	7dfb      	ldrb	r3, [r7, #23]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <HAL_I2C_IsDeviceReady+0x188>
 8003726:	7dbb      	ldrb	r3, [r7, #22]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0cd      	beq.n	80036c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b02      	cmp	r3, #2
 8003740:	d129      	bne.n	8003796 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003750:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2319      	movs	r3, #25
 800376e:	2201      	movs	r2, #1
 8003770:	4921      	ldr	r1, [pc, #132]	; (80037f8 <HAL_I2C_IsDeviceReady+0x254>)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f9c2 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e036      	b.n	80037f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	e02c      	b.n	80037f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	2319      	movs	r3, #25
 80037b6:	2201      	movs	r2, #1
 80037b8:	490f      	ldr	r1, [pc, #60]	; (80037f8 <HAL_I2C_IsDeviceReady+0x254>)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f99e 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e012      	b.n	80037f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	3301      	adds	r3, #1
 80037ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	f4ff af32 	bcc.w	800363e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
  }
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	00100002 	.word	0x00100002
 80037fc:	ffff0000 	.word	0xffff0000

08003800 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	4608      	mov	r0, r1
 800380a:	4611      	mov	r1, r2
 800380c:	461a      	mov	r2, r3
 800380e:	4603      	mov	r3, r0
 8003810:	817b      	strh	r3, [r7, #10]
 8003812:	460b      	mov	r3, r1
 8003814:	813b      	strh	r3, [r7, #8]
 8003816:	4613      	mov	r3, r2
 8003818:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003828:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	2200      	movs	r2, #0
 8003832:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f960 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00d      	beq.n	800385e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003850:	d103      	bne.n	800385a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e05f      	b.n	800391e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800385e:	897b      	ldrh	r3, [r7, #10]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800386c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	6a3a      	ldr	r2, [r7, #32]
 8003872:	492d      	ldr	r1, [pc, #180]	; (8003928 <I2C_RequestMemoryWrite+0x128>)
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f998 	bl	8003baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e04c      	b.n	800391e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800389a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389c:	6a39      	ldr	r1, [r7, #32]
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 fa02 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00d      	beq.n	80038c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d107      	bne.n	80038c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e02b      	b.n	800391e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d105      	bne.n	80038d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038cc:	893b      	ldrh	r3, [r7, #8]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	611a      	str	r2, [r3, #16]
 80038d6:	e021      	b.n	800391c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038d8:	893b      	ldrh	r3, [r7, #8]
 80038da:	0a1b      	lsrs	r3, r3, #8
 80038dc:	b29b      	uxth	r3, r3
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e8:	6a39      	ldr	r1, [r7, #32]
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f9dc 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00d      	beq.n	8003912 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d107      	bne.n	800390e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e005      	b.n	800391e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003912:	893b      	ldrh	r3, [r7, #8]
 8003914:	b2da      	uxtb	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	00010002 	.word	0x00010002

0800392c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	4608      	mov	r0, r1
 8003936:	4611      	mov	r1, r2
 8003938:	461a      	mov	r2, r3
 800393a:	4603      	mov	r3, r0
 800393c:	817b      	strh	r3, [r7, #10]
 800393e:	460b      	mov	r3, r1
 8003940:	813b      	strh	r3, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003954:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003964:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	2200      	movs	r2, #0
 800396e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f8c2 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00d      	beq.n	800399a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398c:	d103      	bne.n	8003996 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003994:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e0aa      	b.n	8003af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800399a:	897b      	ldrh	r3, [r7, #10]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	461a      	mov	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	6a3a      	ldr	r2, [r7, #32]
 80039ae:	4952      	ldr	r1, [pc, #328]	; (8003af8 <I2C_RequestMemoryRead+0x1cc>)
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f8fa 	bl	8003baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e097      	b.n	8003af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d8:	6a39      	ldr	r1, [r7, #32]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 f964 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00d      	beq.n	8003a02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d107      	bne.n	80039fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e076      	b.n	8003af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d105      	bne.n	8003a14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a08:	893b      	ldrh	r3, [r7, #8]
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	611a      	str	r2, [r3, #16]
 8003a12:	e021      	b.n	8003a58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a14:	893b      	ldrh	r3, [r7, #8]
 8003a16:	0a1b      	lsrs	r3, r3, #8
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a24:	6a39      	ldr	r1, [r7, #32]
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f93e 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00d      	beq.n	8003a4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d107      	bne.n	8003a4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e050      	b.n	8003af0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a4e:	893b      	ldrh	r3, [r7, #8]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5a:	6a39      	ldr	r1, [r7, #32]
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f923 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00d      	beq.n	8003a84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d107      	bne.n	8003a80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e035      	b.n	8003af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f82b 	bl	8003afc <I2C_WaitOnFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00d      	beq.n	8003ac8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aba:	d103      	bne.n	8003ac4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e013      	b.n	8003af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ac8:	897b      	ldrh	r3, [r7, #10]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	6a3a      	ldr	r2, [r7, #32]
 8003adc:	4906      	ldr	r1, [pc, #24]	; (8003af8 <I2C_RequestMemoryRead+0x1cc>)
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f863 	bl	8003baa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	00010002 	.word	0x00010002

08003afc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b0c:	e025      	b.n	8003b5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b14:	d021      	beq.n	8003b5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b16:	f7fe fd3d 	bl	8002594 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d302      	bcc.n	8003b2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d116      	bne.n	8003b5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f043 0220 	orr.w	r2, r3, #32
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e023      	b.n	8003ba2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	0c1b      	lsrs	r3, r3, #16
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d10d      	bne.n	8003b80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	43da      	mvns	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	bf0c      	ite	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	2300      	movne	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	e00c      	b.n	8003b9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	43da      	mvns	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bf0c      	ite	eq
 8003b92:	2301      	moveq	r3, #1
 8003b94:	2300      	movne	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d0b6      	beq.n	8003b0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	607a      	str	r2, [r7, #4]
 8003bb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bb8:	e051      	b.n	8003c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc8:	d123      	bne.n	8003c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003be2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f043 0204 	orr.w	r2, r3, #4
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e046      	b.n	8003ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c18:	d021      	beq.n	8003c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1a:	f7fe fcbb 	bl	8002594 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d302      	bcc.n	8003c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d116      	bne.n	8003c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f043 0220 	orr.w	r2, r3, #32
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e020      	b.n	8003ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d10c      	bne.n	8003c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	43da      	mvns	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4013      	ands	r3, r2
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	bf14      	ite	ne
 8003c7a:	2301      	movne	r3, #1
 8003c7c:	2300      	moveq	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	e00b      	b.n	8003c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	43da      	mvns	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bf14      	ite	ne
 8003c94:	2301      	movne	r3, #1
 8003c96:	2300      	moveq	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d18d      	bne.n	8003bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cb4:	e02d      	b.n	8003d12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f8ce 	bl	8003e58 <I2C_IsAcknowledgeFailed>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e02d      	b.n	8003d22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d021      	beq.n	8003d12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cce:	f7fe fc61 	bl	8002594 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d302      	bcc.n	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d116      	bne.n	8003d12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f043 0220 	orr.w	r2, r3, #32
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e007      	b.n	8003d22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1c:	2b80      	cmp	r3, #128	; 0x80
 8003d1e:	d1ca      	bne.n	8003cb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d36:	e02d      	b.n	8003d94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f88d 	bl	8003e58 <I2C_IsAcknowledgeFailed>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e02d      	b.n	8003da4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4e:	d021      	beq.n	8003d94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d50:	f7fe fc20 	bl	8002594 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d302      	bcc.n	8003d66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d116      	bne.n	8003d94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e007      	b.n	8003da4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d1ca      	bne.n	8003d38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003db8:	e042      	b.n	8003e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b10      	cmp	r3, #16
 8003dc6:	d119      	bne.n	8003dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f06f 0210 	mvn.w	r2, #16
 8003dd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e029      	b.n	8003e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfc:	f7fe fbca 	bl	8002594 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d302      	bcc.n	8003e12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d116      	bne.n	8003e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e007      	b.n	8003e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b40      	cmp	r3, #64	; 0x40
 8003e4c:	d1b5      	bne.n	8003dba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6e:	d11b      	bne.n	8003ea8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	f043 0204 	orr.w	r2, r3, #4
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e264      	b.n	8004394 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d075      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ed6:	4ba3      	ldr	r3, [pc, #652]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d00c      	beq.n	8003efc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ee2:	4ba0      	ldr	r3, [pc, #640]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d112      	bne.n	8003f14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eee:	4b9d      	ldr	r3, [pc, #628]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003efa:	d10b      	bne.n	8003f14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003efc:	4b99      	ldr	r3, [pc, #612]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d05b      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x108>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d157      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e23f      	b.n	8004394 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1c:	d106      	bne.n	8003f2c <HAL_RCC_OscConfig+0x74>
 8003f1e:	4b91      	ldr	r3, [pc, #580]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a90      	ldr	r2, [pc, #576]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	e01d      	b.n	8003f68 <HAL_RCC_OscConfig+0xb0>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f34:	d10c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x98>
 8003f36:	4b8b      	ldr	r3, [pc, #556]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a8a      	ldr	r2, [pc, #552]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	4b88      	ldr	r3, [pc, #544]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a87      	ldr	r2, [pc, #540]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e00b      	b.n	8003f68 <HAL_RCC_OscConfig+0xb0>
 8003f50:	4b84      	ldr	r3, [pc, #528]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a83      	ldr	r2, [pc, #524]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	4b81      	ldr	r3, [pc, #516]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a80      	ldr	r2, [pc, #512]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d013      	beq.n	8003f98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f70:	f7fe fb10 	bl	8002594 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f78:	f7fe fb0c 	bl	8002594 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b64      	cmp	r3, #100	; 0x64
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e204      	b.n	8004394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8a:	4b76      	ldr	r3, [pc, #472]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCC_OscConfig+0xc0>
 8003f96:	e014      	b.n	8003fc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f98:	f7fe fafc 	bl	8002594 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa0:	f7fe faf8 	bl	8002594 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b64      	cmp	r3, #100	; 0x64
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e1f0      	b.n	8004394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb2:	4b6c      	ldr	r3, [pc, #432]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0xe8>
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d063      	beq.n	8004096 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fce:	4b65      	ldr	r3, [pc, #404]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00b      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fda:	4b62      	ldr	r3, [pc, #392]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d11c      	bne.n	8004020 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fe6:	4b5f      	ldr	r3, [pc, #380]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d116      	bne.n	8004020 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ff2:	4b5c      	ldr	r3, [pc, #368]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d005      	beq.n	800400a <HAL_RCC_OscConfig+0x152>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d001      	beq.n	800400a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e1c4      	b.n	8004394 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400a:	4b56      	ldr	r3, [pc, #344]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4952      	ldr	r1, [pc, #328]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800401e:	e03a      	b.n	8004096 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d020      	beq.n	800406a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004028:	4b4f      	ldr	r3, [pc, #316]	; (8004168 <HAL_RCC_OscConfig+0x2b0>)
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fe fab1 	bl	8002594 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004036:	f7fe faad 	bl	8002594 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e1a5      	b.n	8004394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004048:	4b46      	ldr	r3, [pc, #280]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f0      	beq.n	8004036 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004054:	4b43      	ldr	r3, [pc, #268]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4940      	ldr	r1, [pc, #256]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	4313      	orrs	r3, r2
 8004066:	600b      	str	r3, [r1, #0]
 8004068:	e015      	b.n	8004096 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800406a:	4b3f      	ldr	r3, [pc, #252]	; (8004168 <HAL_RCC_OscConfig+0x2b0>)
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fe fa90 	bl	8002594 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004078:	f7fe fa8c 	bl	8002594 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e184      	b.n	8004394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408a:	4b36      	ldr	r3, [pc, #216]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d030      	beq.n	8004104 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d016      	beq.n	80040d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040aa:	4b30      	ldr	r3, [pc, #192]	; (800416c <HAL_RCC_OscConfig+0x2b4>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b0:	f7fe fa70 	bl	8002594 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b8:	f7fe fa6c 	bl	8002594 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e164      	b.n	8004394 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ca:	4b26      	ldr	r3, [pc, #152]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0x200>
 80040d6:	e015      	b.n	8004104 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040d8:	4b24      	ldr	r3, [pc, #144]	; (800416c <HAL_RCC_OscConfig+0x2b4>)
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040de:	f7fe fa59 	bl	8002594 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040e6:	f7fe fa55 	bl	8002594 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e14d      	b.n	8004394 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f8:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 80040fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1f0      	bne.n	80040e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80a0 	beq.w	8004252 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004112:	2300      	movs	r3, #0
 8004114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004116:	4b13      	ldr	r3, [pc, #76]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10f      	bne.n	8004142 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	4a0e      	ldr	r2, [pc, #56]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 800412c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004130:	6413      	str	r3, [r2, #64]	; 0x40
 8004132:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800413e:	2301      	movs	r3, #1
 8004140:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_RCC_OscConfig+0x2b8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d121      	bne.n	8004192 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800414e:	4b08      	ldr	r3, [pc, #32]	; (8004170 <HAL_RCC_OscConfig+0x2b8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a07      	ldr	r2, [pc, #28]	; (8004170 <HAL_RCC_OscConfig+0x2b8>)
 8004154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800415a:	f7fe fa1b 	bl	8002594 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004160:	e011      	b.n	8004186 <HAL_RCC_OscConfig+0x2ce>
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	42470000 	.word	0x42470000
 800416c:	42470e80 	.word	0x42470e80
 8004170:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004174:	f7fe fa0e 	bl	8002594 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e106      	b.n	8004394 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004186:	4b85      	ldr	r3, [pc, #532]	; (800439c <HAL_RCC_OscConfig+0x4e4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d106      	bne.n	80041a8 <HAL_RCC_OscConfig+0x2f0>
 800419a:	4b81      	ldr	r3, [pc, #516]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	4a80      	ldr	r2, [pc, #512]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	6713      	str	r3, [r2, #112]	; 0x70
 80041a6:	e01c      	b.n	80041e2 <HAL_RCC_OscConfig+0x32a>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b05      	cmp	r3, #5
 80041ae:	d10c      	bne.n	80041ca <HAL_RCC_OscConfig+0x312>
 80041b0:	4b7b      	ldr	r3, [pc, #492]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b4:	4a7a      	ldr	r2, [pc, #488]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 80041b6:	f043 0304 	orr.w	r3, r3, #4
 80041ba:	6713      	str	r3, [r2, #112]	; 0x70
 80041bc:	4b78      	ldr	r3, [pc, #480]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c0:	4a77      	ldr	r2, [pc, #476]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	6713      	str	r3, [r2, #112]	; 0x70
 80041c8:	e00b      	b.n	80041e2 <HAL_RCC_OscConfig+0x32a>
 80041ca:	4b75      	ldr	r3, [pc, #468]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	4a74      	ldr	r2, [pc, #464]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	6713      	str	r3, [r2, #112]	; 0x70
 80041d6:	4b72      	ldr	r3, [pc, #456]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	4a71      	ldr	r2, [pc, #452]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 80041dc:	f023 0304 	bic.w	r3, r3, #4
 80041e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d015      	beq.n	8004216 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ea:	f7fe f9d3 	bl	8002594 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f0:	e00a      	b.n	8004208 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f2:	f7fe f9cf 	bl	8002594 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004200:	4293      	cmp	r3, r2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e0c5      	b.n	8004394 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004208:	4b65      	ldr	r3, [pc, #404]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0ee      	beq.n	80041f2 <HAL_RCC_OscConfig+0x33a>
 8004214:	e014      	b.n	8004240 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004216:	f7fe f9bd 	bl	8002594 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800421c:	e00a      	b.n	8004234 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800421e:	f7fe f9b9 	bl	8002594 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	f241 3288 	movw	r2, #5000	; 0x1388
 800422c:	4293      	cmp	r3, r2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e0af      	b.n	8004394 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004234:	4b5a      	ldr	r3, [pc, #360]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1ee      	bne.n	800421e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004240:	7dfb      	ldrb	r3, [r7, #23]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d105      	bne.n	8004252 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004246:	4b56      	ldr	r3, [pc, #344]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	4a55      	ldr	r2, [pc, #340]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 800424c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004250:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 809b 	beq.w	8004392 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800425c:	4b50      	ldr	r3, [pc, #320]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	2b08      	cmp	r3, #8
 8004266:	d05c      	beq.n	8004322 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d141      	bne.n	80042f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004270:	4b4c      	ldr	r3, [pc, #304]	; (80043a4 <HAL_RCC_OscConfig+0x4ec>)
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004276:	f7fe f98d 	bl	8002594 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800427e:	f7fe f989 	bl	8002594 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e081      	b.n	8004394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004290:	4b43      	ldr	r3, [pc, #268]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1f0      	bne.n	800427e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	019b      	lsls	r3, r3, #6
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b2:	085b      	lsrs	r3, r3, #1
 80042b4:	3b01      	subs	r3, #1
 80042b6:	041b      	lsls	r3, r3, #16
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	061b      	lsls	r3, r3, #24
 80042c0:	4937      	ldr	r1, [pc, #220]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c6:	4b37      	ldr	r3, [pc, #220]	; (80043a4 <HAL_RCC_OscConfig+0x4ec>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042cc:	f7fe f962 	bl	8002594 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d4:	f7fe f95e 	bl	8002594 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e056      	b.n	8004394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e6:	4b2e      	ldr	r3, [pc, #184]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0x41c>
 80042f2:	e04e      	b.n	8004392 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f4:	4b2b      	ldr	r3, [pc, #172]	; (80043a4 <HAL_RCC_OscConfig+0x4ec>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fa:	f7fe f94b 	bl	8002594 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004302:	f7fe f947 	bl	8002594 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e03f      	b.n	8004394 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004314:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f0      	bne.n	8004302 <HAL_RCC_OscConfig+0x44a>
 8004320:	e037      	b.n	8004392 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e032      	b.n	8004394 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800432e:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <HAL_RCC_OscConfig+0x4e8>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d028      	beq.n	800438e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004346:	429a      	cmp	r2, r3
 8004348:	d121      	bne.n	800438e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004354:	429a      	cmp	r2, r3
 8004356:	d11a      	bne.n	800438e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800435e:	4013      	ands	r3, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004364:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004366:	4293      	cmp	r3, r2
 8004368:	d111      	bne.n	800438e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	3b01      	subs	r3, #1
 8004378:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d107      	bne.n	800438e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800438a:	429a      	cmp	r2, r3
 800438c:	d001      	beq.n	8004392 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40007000 	.word	0x40007000
 80043a0:	40023800 	.word	0x40023800
 80043a4:	42470060 	.word	0x42470060

080043a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0cc      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043bc:	4b68      	ldr	r3, [pc, #416]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d90c      	bls.n	80043e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ca:	4b65      	ldr	r3, [pc, #404]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d2:	4b63      	ldr	r3, [pc, #396]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d001      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0b8      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d020      	beq.n	8004432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043fc:	4b59      	ldr	r3, [pc, #356]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	4a58      	ldr	r2, [pc, #352]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004414:	4b53      	ldr	r3, [pc, #332]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4a52      	ldr	r2, [pc, #328]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800441e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004420:	4b50      	ldr	r3, [pc, #320]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	494d      	ldr	r1, [pc, #308]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	4313      	orrs	r3, r2
 8004430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d044      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d107      	bne.n	8004456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004446:	4b47      	ldr	r3, [pc, #284]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d119      	bne.n	8004486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e07f      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d003      	beq.n	8004466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004462:	2b03      	cmp	r3, #3
 8004464:	d107      	bne.n	8004476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004466:	4b3f      	ldr	r3, [pc, #252]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e06f      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004476:	4b3b      	ldr	r3, [pc, #236]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e067      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004486:	4b37      	ldr	r3, [pc, #220]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f023 0203 	bic.w	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4934      	ldr	r1, [pc, #208]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	4313      	orrs	r3, r2
 8004496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004498:	f7fe f87c 	bl	8002594 <HAL_GetTick>
 800449c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a0:	f7fe f878 	bl	8002594 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e04f      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b6:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 020c 	and.w	r2, r3, #12
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d1eb      	bne.n	80044a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044c8:	4b25      	ldr	r3, [pc, #148]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d20c      	bcs.n	80044f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d6:	4b22      	ldr	r3, [pc, #136]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044de:	4b20      	ldr	r3, [pc, #128]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d001      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e032      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d008      	beq.n	800450e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044fc:	4b19      	ldr	r3, [pc, #100]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4916      	ldr	r1, [pc, #88]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	4313      	orrs	r3, r2
 800450c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800451a:	4b12      	ldr	r3, [pc, #72]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	490e      	ldr	r1, [pc, #56]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	4313      	orrs	r3, r2
 800452c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800452e:	f000 f821 	bl	8004574 <HAL_RCC_GetSysClockFreq>
 8004532:	4602      	mov	r2, r0
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	091b      	lsrs	r3, r3, #4
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	490a      	ldr	r1, [pc, #40]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 8004540:	5ccb      	ldrb	r3, [r1, r3]
 8004542:	fa22 f303 	lsr.w	r3, r2, r3
 8004546:	4a09      	ldr	r2, [pc, #36]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fd ffdc 	bl	800250c <HAL_InitTick>

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40023c00 	.word	0x40023c00
 8004564:	40023800 	.word	0x40023800
 8004568:	08009dcc 	.word	0x08009dcc
 800456c:	20000010 	.word	0x20000010
 8004570:	20000014 	.word	0x20000014

08004574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004574:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	2300      	movs	r3, #0
 8004586:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800458c:	4b67      	ldr	r3, [pc, #412]	; (800472c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 030c 	and.w	r3, r3, #12
 8004594:	2b08      	cmp	r3, #8
 8004596:	d00d      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004598:	2b08      	cmp	r3, #8
 800459a:	f200 80bd 	bhi.w	8004718 <HAL_RCC_GetSysClockFreq+0x1a4>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <HAL_RCC_GetSysClockFreq+0x34>
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d003      	beq.n	80045ae <HAL_RCC_GetSysClockFreq+0x3a>
 80045a6:	e0b7      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045a8:	4b61      	ldr	r3, [pc, #388]	; (8004730 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045aa:	60bb      	str	r3, [r7, #8]
       break;
 80045ac:	e0b7      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045ae:	4b61      	ldr	r3, [pc, #388]	; (8004734 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80045b0:	60bb      	str	r3, [r7, #8]
      break;
 80045b2:	e0b4      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045b4:	4b5d      	ldr	r3, [pc, #372]	; (800472c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045be:	4b5b      	ldr	r3, [pc, #364]	; (800472c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d04d      	beq.n	8004666 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ca:	4b58      	ldr	r3, [pc, #352]	; (800472c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	099b      	lsrs	r3, r3, #6
 80045d0:	461a      	mov	r2, r3
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80045da:	f04f 0100 	mov.w	r1, #0
 80045de:	ea02 0800 	and.w	r8, r2, r0
 80045e2:	ea03 0901 	and.w	r9, r3, r1
 80045e6:	4640      	mov	r0, r8
 80045e8:	4649      	mov	r1, r9
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	014b      	lsls	r3, r1, #5
 80045f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045f8:	0142      	lsls	r2, r0, #5
 80045fa:	4610      	mov	r0, r2
 80045fc:	4619      	mov	r1, r3
 80045fe:	ebb0 0008 	subs.w	r0, r0, r8
 8004602:	eb61 0109 	sbc.w	r1, r1, r9
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	018b      	lsls	r3, r1, #6
 8004610:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004614:	0182      	lsls	r2, r0, #6
 8004616:	1a12      	subs	r2, r2, r0
 8004618:	eb63 0301 	sbc.w	r3, r3, r1
 800461c:	f04f 0000 	mov.w	r0, #0
 8004620:	f04f 0100 	mov.w	r1, #0
 8004624:	00d9      	lsls	r1, r3, #3
 8004626:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800462a:	00d0      	lsls	r0, r2, #3
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	eb12 0208 	adds.w	r2, r2, r8
 8004634:	eb43 0309 	adc.w	r3, r3, r9
 8004638:	f04f 0000 	mov.w	r0, #0
 800463c:	f04f 0100 	mov.w	r1, #0
 8004640:	0259      	lsls	r1, r3, #9
 8004642:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004646:	0250      	lsls	r0, r2, #9
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4610      	mov	r0, r2
 800464e:	4619      	mov	r1, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	461a      	mov	r2, r3
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	f7fb fdbe 	bl	80001d8 <__aeabi_uldivmod>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4613      	mov	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	e04a      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004666:	4b31      	ldr	r3, [pc, #196]	; (800472c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	099b      	lsrs	r3, r3, #6
 800466c:	461a      	mov	r2, r3
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	ea02 0400 	and.w	r4, r2, r0
 800467e:	ea03 0501 	and.w	r5, r3, r1
 8004682:	4620      	mov	r0, r4
 8004684:	4629      	mov	r1, r5
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	014b      	lsls	r3, r1, #5
 8004690:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004694:	0142      	lsls	r2, r0, #5
 8004696:	4610      	mov	r0, r2
 8004698:	4619      	mov	r1, r3
 800469a:	1b00      	subs	r0, r0, r4
 800469c:	eb61 0105 	sbc.w	r1, r1, r5
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	018b      	lsls	r3, r1, #6
 80046aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046ae:	0182      	lsls	r2, r0, #6
 80046b0:	1a12      	subs	r2, r2, r0
 80046b2:	eb63 0301 	sbc.w	r3, r3, r1
 80046b6:	f04f 0000 	mov.w	r0, #0
 80046ba:	f04f 0100 	mov.w	r1, #0
 80046be:	00d9      	lsls	r1, r3, #3
 80046c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046c4:	00d0      	lsls	r0, r2, #3
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	1912      	adds	r2, r2, r4
 80046cc:	eb45 0303 	adc.w	r3, r5, r3
 80046d0:	f04f 0000 	mov.w	r0, #0
 80046d4:	f04f 0100 	mov.w	r1, #0
 80046d8:	0299      	lsls	r1, r3, #10
 80046da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80046de:	0290      	lsls	r0, r2, #10
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4610      	mov	r0, r2
 80046e6:	4619      	mov	r1, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	461a      	mov	r2, r3
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	f7fb fd72 	bl	80001d8 <__aeabi_uldivmod>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	4613      	mov	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	0c1b      	lsrs	r3, r3, #16
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	3301      	adds	r3, #1
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	60bb      	str	r3, [r7, #8]
      break;
 8004716:	e002      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800471a:	60bb      	str	r3, [r7, #8]
      break;
 800471c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800471e:	68bb      	ldr	r3, [r7, #8]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800472a:	bf00      	nop
 800472c:	40023800 	.word	0x40023800
 8004730:	00f42400 	.word	0x00f42400
 8004734:	007a1200 	.word	0x007a1200

08004738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800473c:	4b03      	ldr	r3, [pc, #12]	; (800474c <HAL_RCC_GetHCLKFreq+0x14>)
 800473e:	681b      	ldr	r3, [r3, #0]
}
 8004740:	4618      	mov	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	20000010 	.word	0x20000010

08004750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004754:	f7ff fff0 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004758:	4602      	mov	r2, r0
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	0a9b      	lsrs	r3, r3, #10
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	4903      	ldr	r1, [pc, #12]	; (8004774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004766:	5ccb      	ldrb	r3, [r1, r3]
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800476c:	4618      	mov	r0, r3
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40023800 	.word	0x40023800
 8004774:	08009ddc 	.word	0x08009ddc

08004778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800477c:	f7ff ffdc 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004780:	4602      	mov	r2, r0
 8004782:	4b05      	ldr	r3, [pc, #20]	; (8004798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	0b5b      	lsrs	r3, r3, #13
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	4903      	ldr	r1, [pc, #12]	; (800479c <HAL_RCC_GetPCLK2Freq+0x24>)
 800478e:	5ccb      	ldrb	r3, [r1, r3]
 8004790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004794:	4618      	mov	r0, r3
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40023800 	.word	0x40023800
 800479c:	08009ddc 	.word	0x08009ddc

080047a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e07b      	b.n	80048aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d108      	bne.n	80047cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047c2:	d009      	beq.n	80047d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	61da      	str	r2, [r3, #28]
 80047ca:	e005      	b.n	80047d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fd fc08 	bl	8002008 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800480e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485c:	ea42 0103 	orr.w	r1, r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004864:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	f003 0104 	and.w	r1, r3, #4
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	f003 0210 	and.w	r2, r3, #16
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004898:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b088      	sub	sp, #32
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	603b      	str	r3, [r7, #0]
 80048be:	4613      	mov	r3, r2
 80048c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_SPI_Transmit+0x22>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e126      	b.n	8004b22 <HAL_SPI_Transmit+0x270>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048dc:	f7fd fe5a 	bl	8002594 <HAL_GetTick>
 80048e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d002      	beq.n	80048f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048f2:	2302      	movs	r3, #2
 80048f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048f6:	e10b      	b.n	8004b10 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_SPI_Transmit+0x52>
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004908:	e102      	b.n	8004b10 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2203      	movs	r2, #3
 800490e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	88fa      	ldrh	r2, [r7, #6]
 8004922:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	88fa      	ldrh	r2, [r7, #6]
 8004928:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004950:	d10f      	bne.n	8004972 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004960:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004970:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d007      	beq.n	8004990 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800498e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004998:	d14b      	bne.n	8004a32 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <HAL_SPI_Transmit+0xf6>
 80049a2:	8afb      	ldrh	r3, [r7, #22]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d13e      	bne.n	8004a26 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	1c9a      	adds	r2, r3, #2
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049cc:	e02b      	b.n	8004a26 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d112      	bne.n	8004a02 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	881a      	ldrh	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	1c9a      	adds	r2, r3, #2
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a00:	e011      	b.n	8004a26 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a02:	f7fd fdc7 	bl	8002594 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d803      	bhi.n	8004a1a <HAL_SPI_Transmit+0x168>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d102      	bne.n	8004a20 <HAL_SPI_Transmit+0x16e>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a24:	e074      	b.n	8004b10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1ce      	bne.n	80049ce <HAL_SPI_Transmit+0x11c>
 8004a30:	e04c      	b.n	8004acc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_SPI_Transmit+0x18e>
 8004a3a:	8afb      	ldrh	r3, [r7, #22]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d140      	bne.n	8004ac2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	7812      	ldrb	r2, [r2, #0]
 8004a4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a66:	e02c      	b.n	8004ac2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d113      	bne.n	8004a9e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	330c      	adds	r3, #12
 8004a80:	7812      	ldrb	r2, [r2, #0]
 8004a82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a9c:	e011      	b.n	8004ac2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a9e:	f7fd fd79 	bl	8002594 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d803      	bhi.n	8004ab6 <HAL_SPI_Transmit+0x204>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d102      	bne.n	8004abc <HAL_SPI_Transmit+0x20a>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ac0:	e026      	b.n	8004b10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1cd      	bne.n	8004a68 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	6839      	ldr	r1, [r7, #0]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fbcb 	bl	800526c <SPI_EndRxTxTransaction>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aea:	2300      	movs	r3, #0
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e000      	b.n	8004b10 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b20:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b088      	sub	sp, #32
 8004b2e:	af02      	add	r7, sp, #8
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b46:	d112      	bne.n	8004b6e <HAL_SPI_Receive+0x44>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10e      	bne.n	8004b6e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2204      	movs	r2, #4
 8004b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b58:	88fa      	ldrh	r2, [r7, #6]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f8f1 	bl	8004d4c <HAL_SPI_TransmitReceive>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	e0ea      	b.n	8004d44 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_SPI_Receive+0x52>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e0e3      	b.n	8004d44 <HAL_SPI_Receive+0x21a>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b84:	f7fd fd06 	bl	8002594 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
 8004b98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b9a:	e0ca      	b.n	8004d32 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_SPI_Receive+0x7e>
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d102      	bne.n	8004bae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bac:	e0c1      	b.n	8004d32 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	88fa      	ldrh	r2, [r7, #6]
 8004bc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	88fa      	ldrh	r2, [r7, #6]
 8004bcc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf4:	d10f      	bne.n	8004c16 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c14:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b40      	cmp	r3, #64	; 0x40
 8004c22:	d007      	beq.n	8004c34 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c32:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d162      	bne.n	8004d02 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c3c:	e02e      	b.n	8004c9c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d115      	bne.n	8004c78 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f103 020c 	add.w	r2, r3, #12
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	7812      	ldrb	r2, [r2, #0]
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c76:	e011      	b.n	8004c9c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c78:	f7fd fc8c 	bl	8002594 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d803      	bhi.n	8004c90 <HAL_SPI_Receive+0x166>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8e:	d102      	bne.n	8004c96 <HAL_SPI_Receive+0x16c>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c9a:	e04a      	b.n	8004d32 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1cb      	bne.n	8004c3e <HAL_SPI_Receive+0x114>
 8004ca6:	e031      	b.n	8004d0c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d113      	bne.n	8004cde <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	b292      	uxth	r2, r2
 8004cc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	1c9a      	adds	r2, r3, #2
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cdc:	e011      	b.n	8004d02 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cde:	f7fd fc59 	bl	8002594 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d803      	bhi.n	8004cf6 <HAL_SPI_Receive+0x1cc>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf4:	d102      	bne.n	8004cfc <HAL_SPI_Receive+0x1d2>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d00:	e017      	b.n	8004d32 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1cd      	bne.n	8004ca8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	6839      	ldr	r1, [r7, #0]
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 fa45 	bl	80051a0 <SPI_EndRxTransaction>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	75fb      	strb	r3, [r7, #23]
 8004d2e:	e000      	b.n	8004d32 <HAL_SPI_Receive+0x208>
  }

error :
 8004d30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08c      	sub	sp, #48	; 0x30
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <HAL_SPI_TransmitReceive+0x26>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e18a      	b.n	8005088 <HAL_SPI_TransmitReceive+0x33c>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d7a:	f7fd fc0b 	bl	8002594 <HAL_GetTick>
 8004d7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d90:	887b      	ldrh	r3, [r7, #2]
 8004d92:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d00f      	beq.n	8004dbc <HAL_SPI_TransmitReceive+0x70>
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004da2:	d107      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d103      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x68>
 8004dac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d003      	beq.n	8004dbc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004db4:	2302      	movs	r3, #2
 8004db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004dba:	e15b      	b.n	8005074 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_SPI_TransmitReceive+0x82>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_SPI_TransmitReceive+0x82>
 8004dc8:	887b      	ldrh	r3, [r7, #2]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d103      	bne.n	8004dd6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004dd4:	e14e      	b.n	8005074 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d003      	beq.n	8004dea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2205      	movs	r2, #5
 8004de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	887a      	ldrh	r2, [r7, #2]
 8004dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	887a      	ldrh	r2, [r7, #2]
 8004e00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	887a      	ldrh	r2, [r7, #2]
 8004e0c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	887a      	ldrh	r2, [r7, #2]
 8004e12:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2a:	2b40      	cmp	r3, #64	; 0x40
 8004e2c:	d007      	beq.n	8004e3e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e46:	d178      	bne.n	8004f3a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <HAL_SPI_TransmitReceive+0x10a>
 8004e50:	8b7b      	ldrh	r3, [r7, #26]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d166      	bne.n	8004f24 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	881a      	ldrh	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	1c9a      	adds	r2, r3, #2
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e7a:	e053      	b.n	8004f24 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d11b      	bne.n	8004ec2 <HAL_SPI_TransmitReceive+0x176>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d016      	beq.n	8004ec2 <HAL_SPI_TransmitReceive+0x176>
 8004e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d113      	bne.n	8004ec2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	881a      	ldrh	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	1c9a      	adds	r2, r3, #2
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d119      	bne.n	8004f04 <HAL_SPI_TransmitReceive+0x1b8>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d014      	beq.n	8004f04 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	b292      	uxth	r2, r2
 8004ee6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eec:	1c9a      	adds	r2, r3, #2
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f00:	2301      	movs	r3, #1
 8004f02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f04:	f7fd fb46 	bl	8002594 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d807      	bhi.n	8004f24 <HAL_SPI_TransmitReceive+0x1d8>
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1a:	d003      	beq.n	8004f24 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f22:	e0a7      	b.n	8005074 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1a6      	bne.n	8004e7c <HAL_SPI_TransmitReceive+0x130>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1a1      	bne.n	8004e7c <HAL_SPI_TransmitReceive+0x130>
 8004f38:	e07c      	b.n	8005034 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_SPI_TransmitReceive+0x1fc>
 8004f42:	8b7b      	ldrh	r3, [r7, #26]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d16b      	bne.n	8005020 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	7812      	ldrb	r2, [r2, #0]
 8004f54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f6e:	e057      	b.n	8005020 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d11c      	bne.n	8004fb8 <HAL_SPI_TransmitReceive+0x26c>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d017      	beq.n	8004fb8 <HAL_SPI_TransmitReceive+0x26c>
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d114      	bne.n	8004fb8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	330c      	adds	r3, #12
 8004f98:	7812      	ldrb	r2, [r2, #0]
 8004f9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d119      	bne.n	8004ffa <HAL_SPI_TransmitReceive+0x2ae>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d014      	beq.n	8004ffa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ffa:	f7fd facb 	bl	8002594 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005006:	429a      	cmp	r2, r3
 8005008:	d803      	bhi.n	8005012 <HAL_SPI_TransmitReceive+0x2c6>
 800500a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005010:	d102      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x2cc>
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	2b00      	cmp	r3, #0
 8005016:	d103      	bne.n	8005020 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800501e:	e029      	b.n	8005074 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1a2      	bne.n	8004f70 <HAL_SPI_TransmitReceive+0x224>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d19d      	bne.n	8004f70 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005036:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f917 	bl	800526c <SPI_EndRxTxTransaction>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d006      	beq.n	8005052 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2220      	movs	r2, #32
 800504e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005050:	e010      	b.n	8005074 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10b      	bne.n	8005072 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800505a:	2300      	movs	r3, #0
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	e000      	b.n	8005074 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005072:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005084:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005088:	4618      	mov	r0, r3
 800508a:	3730      	adds	r7, #48	; 0x30
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050a0:	f7fd fa78 	bl	8002594 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	1a9b      	subs	r3, r3, r2
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	4413      	add	r3, r2
 80050ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050b0:	f7fd fa70 	bl	8002594 <HAL_GetTick>
 80050b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050b6:	4b39      	ldr	r3, [pc, #228]	; (800519c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	015b      	lsls	r3, r3, #5
 80050bc:	0d1b      	lsrs	r3, r3, #20
 80050be:	69fa      	ldr	r2, [r7, #28]
 80050c0:	fb02 f303 	mul.w	r3, r2, r3
 80050c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050c6:	e054      	b.n	8005172 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ce:	d050      	beq.n	8005172 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050d0:	f7fd fa60 	bl	8002594 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d902      	bls.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d13d      	bne.n	8005162 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050fe:	d111      	bne.n	8005124 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005108:	d004      	beq.n	8005114 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005112:	d107      	bne.n	8005124 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005122:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512c:	d10f      	bne.n	800514e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800514c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e017      	b.n	8005192 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	3b01      	subs	r3, #1
 8005170:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4013      	ands	r3, r2
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	429a      	cmp	r2, r3
 8005180:	bf0c      	ite	eq
 8005182:	2301      	moveq	r3, #1
 8005184:	2300      	movne	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	429a      	cmp	r2, r3
 800518e:	d19b      	bne.n	80050c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3720      	adds	r7, #32
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20000010 	.word	0x20000010

080051a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b4:	d111      	bne.n	80051da <SPI_EndRxTransaction+0x3a>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051be:	d004      	beq.n	80051ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c8:	d107      	bne.n	80051da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051e2:	d12a      	bne.n	800523a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ec:	d012      	beq.n	8005214 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2200      	movs	r2, #0
 80051f6:	2180      	movs	r1, #128	; 0x80
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7ff ff49 	bl	8005090 <SPI_WaitFlagStateUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d02d      	beq.n	8005260 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005208:	f043 0220 	orr.w	r2, r3, #32
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e026      	b.n	8005262 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2200      	movs	r2, #0
 800521c:	2101      	movs	r1, #1
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7ff ff36 	bl	8005090 <SPI_WaitFlagStateUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d01a      	beq.n	8005260 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522e:	f043 0220 	orr.w	r2, r3, #32
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e013      	b.n	8005262 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2200      	movs	r2, #0
 8005242:	2101      	movs	r1, #1
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f7ff ff23 	bl	8005090 <SPI_WaitFlagStateUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d007      	beq.n	8005260 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005254:	f043 0220 	orr.w	r2, r3, #32
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e000      	b.n	8005262 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005278:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <SPI_EndRxTxTransaction+0x7c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <SPI_EndRxTxTransaction+0x80>)
 800527e:	fba2 2303 	umull	r2, r3, r2, r3
 8005282:	0d5b      	lsrs	r3, r3, #21
 8005284:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005288:	fb02 f303 	mul.w	r3, r2, r3
 800528c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005296:	d112      	bne.n	80052be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2200      	movs	r2, #0
 80052a0:	2180      	movs	r1, #128	; 0x80
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f7ff fef4 	bl	8005090 <SPI_WaitFlagStateUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d016      	beq.n	80052dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b2:	f043 0220 	orr.w	r2, r3, #32
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e00f      	b.n	80052de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d4:	2b80      	cmp	r3, #128	; 0x80
 80052d6:	d0f2      	beq.n	80052be <SPI_EndRxTxTransaction+0x52>
 80052d8:	e000      	b.n	80052dc <SPI_EndRxTxTransaction+0x70>
        break;
 80052da:	bf00      	nop
  }

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20000010 	.word	0x20000010
 80052ec:	165e9f81 	.word	0x165e9f81

080052f0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e034      	b.n	8005370 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f7fc ff7e 	bl	800221c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3308      	adds	r3, #8
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f001 fc6e 	bl	8006c0c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6818      	ldr	r0, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	461a      	mov	r2, r3
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	f001 fcb8 	bl	8006cb0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6858      	ldr	r0, [r3, #4]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	f001 fced 	bl	8006d2c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	6892      	ldr	r2, [r2, #8]
 800535a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	6892      	ldr	r2, [r2, #8]
 8005366:	f041 0101 	orr.w	r1, r1, #1
 800536a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e041      	b.n	800540e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fc fe7a 	bl	8002098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3304      	adds	r3, #4
 80053b4:	4619      	mov	r1, r3
 80053b6:	4610      	mov	r0, r2
 80053b8:	f000 fa96 	bl	80058e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b01      	cmp	r3, #1
 800542a:	d001      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e04e      	b.n	80054ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a23      	ldr	r2, [pc, #140]	; (80054dc <HAL_TIM_Base_Start_IT+0xc4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d022      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0x80>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545a:	d01d      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0x80>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1f      	ldr	r2, [pc, #124]	; (80054e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d018      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0x80>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a1e      	ldr	r2, [pc, #120]	; (80054e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d013      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0x80>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a1c      	ldr	r2, [pc, #112]	; (80054e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00e      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0x80>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a1b      	ldr	r2, [pc, #108]	; (80054ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d009      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0x80>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a19      	ldr	r2, [pc, #100]	; (80054f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d004      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0x80>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a18      	ldr	r2, [pc, #96]	; (80054f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d111      	bne.n	80054bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2b06      	cmp	r3, #6
 80054a8:	d010      	beq.n	80054cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 0201 	orr.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ba:	e007      	b.n	80054cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0201 	orr.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40010000 	.word	0x40010000
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40000800 	.word	0x40000800
 80054e8:	40000c00 	.word	0x40000c00
 80054ec:	40010400 	.word	0x40010400
 80054f0:	40014000 	.word	0x40014000
 80054f4:	40001800 	.word	0x40001800

080054f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b02      	cmp	r3, #2
 800550c:	d122      	bne.n	8005554 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b02      	cmp	r3, #2
 800551a:	d11b      	bne.n	8005554 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0202 	mvn.w	r2, #2
 8005524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f9b5 	bl	80058aa <HAL_TIM_IC_CaptureCallback>
 8005540:	e005      	b.n	800554e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f9a7 	bl	8005896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f9b8 	bl	80058be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 0304 	and.w	r3, r3, #4
 800555e:	2b04      	cmp	r3, #4
 8005560:	d122      	bne.n	80055a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b04      	cmp	r3, #4
 800556e:	d11b      	bne.n	80055a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0204 	mvn.w	r2, #4
 8005578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2202      	movs	r2, #2
 800557e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f98b 	bl	80058aa <HAL_TIM_IC_CaptureCallback>
 8005594:	e005      	b.n	80055a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f97d 	bl	8005896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f98e 	bl	80058be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d122      	bne.n	80055fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d11b      	bne.n	80055fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0208 	mvn.w	r2, #8
 80055cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2204      	movs	r2, #4
 80055d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f961 	bl	80058aa <HAL_TIM_IC_CaptureCallback>
 80055e8:	e005      	b.n	80055f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f953 	bl	8005896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f964 	bl	80058be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	2b10      	cmp	r3, #16
 8005608:	d122      	bne.n	8005650 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	2b10      	cmp	r3, #16
 8005616:	d11b      	bne.n	8005650 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0210 	mvn.w	r2, #16
 8005620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2208      	movs	r2, #8
 8005626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f937 	bl	80058aa <HAL_TIM_IC_CaptureCallback>
 800563c:	e005      	b.n	800564a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f929 	bl	8005896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f93a 	bl	80058be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b01      	cmp	r3, #1
 800565c:	d10e      	bne.n	800567c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b01      	cmp	r3, #1
 800566a:	d107      	bne.n	800567c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0201 	mvn.w	r2, #1
 8005674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fc fbf6 	bl	8001e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005686:	2b80      	cmp	r3, #128	; 0x80
 8005688:	d10e      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005694:	2b80      	cmp	r3, #128	; 0x80
 8005696:	d107      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fae0 	bl	8005c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b40      	cmp	r3, #64	; 0x40
 80056b4:	d10e      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c0:	2b40      	cmp	r3, #64	; 0x40
 80056c2:	d107      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f8ff 	bl	80058d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d10e      	bne.n	8005700 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	d107      	bne.n	8005700 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0220 	mvn.w	r2, #32
 80056f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 faaa 	bl	8005c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005700:	bf00      	nop
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_TIM_ConfigClockSource+0x1c>
 8005720:	2302      	movs	r3, #2
 8005722:	e0b4      	b.n	800588e <HAL_TIM_ConfigClockSource+0x186>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800574a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800575c:	d03e      	beq.n	80057dc <HAL_TIM_ConfigClockSource+0xd4>
 800575e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005762:	f200 8087 	bhi.w	8005874 <HAL_TIM_ConfigClockSource+0x16c>
 8005766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576a:	f000 8086 	beq.w	800587a <HAL_TIM_ConfigClockSource+0x172>
 800576e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005772:	d87f      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x16c>
 8005774:	2b70      	cmp	r3, #112	; 0x70
 8005776:	d01a      	beq.n	80057ae <HAL_TIM_ConfigClockSource+0xa6>
 8005778:	2b70      	cmp	r3, #112	; 0x70
 800577a:	d87b      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x16c>
 800577c:	2b60      	cmp	r3, #96	; 0x60
 800577e:	d050      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0x11a>
 8005780:	2b60      	cmp	r3, #96	; 0x60
 8005782:	d877      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x16c>
 8005784:	2b50      	cmp	r3, #80	; 0x50
 8005786:	d03c      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0xfa>
 8005788:	2b50      	cmp	r3, #80	; 0x50
 800578a:	d873      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x16c>
 800578c:	2b40      	cmp	r3, #64	; 0x40
 800578e:	d058      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x13a>
 8005790:	2b40      	cmp	r3, #64	; 0x40
 8005792:	d86f      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x16c>
 8005794:	2b30      	cmp	r3, #48	; 0x30
 8005796:	d064      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x15a>
 8005798:	2b30      	cmp	r3, #48	; 0x30
 800579a:	d86b      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x16c>
 800579c:	2b20      	cmp	r3, #32
 800579e:	d060      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x15a>
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d867      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x16c>
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d05c      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x15a>
 80057a8:	2b10      	cmp	r3, #16
 80057aa:	d05a      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x15a>
 80057ac:	e062      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	6899      	ldr	r1, [r3, #8]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f000 f9ad 	bl	8005b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	609a      	str	r2, [r3, #8]
      break;
 80057da:	e04f      	b.n	800587c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	6899      	ldr	r1, [r3, #8]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f000 f996 	bl	8005b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057fe:	609a      	str	r2, [r3, #8]
      break;
 8005800:	e03c      	b.n	800587c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6818      	ldr	r0, [r3, #0]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6859      	ldr	r1, [r3, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	461a      	mov	r2, r3
 8005810:	f000 f90a 	bl	8005a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2150      	movs	r1, #80	; 0x50
 800581a:	4618      	mov	r0, r3
 800581c:	f000 f963 	bl	8005ae6 <TIM_ITRx_SetConfig>
      break;
 8005820:	e02c      	b.n	800587c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6859      	ldr	r1, [r3, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	461a      	mov	r2, r3
 8005830:	f000 f929 	bl	8005a86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2160      	movs	r1, #96	; 0x60
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f953 	bl	8005ae6 <TIM_ITRx_SetConfig>
      break;
 8005840:	e01c      	b.n	800587c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6859      	ldr	r1, [r3, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	461a      	mov	r2, r3
 8005850:	f000 f8ea 	bl	8005a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2140      	movs	r1, #64	; 0x40
 800585a:	4618      	mov	r0, r3
 800585c:	f000 f943 	bl	8005ae6 <TIM_ITRx_SetConfig>
      break;
 8005860:	e00c      	b.n	800587c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4619      	mov	r1, r3
 800586c:	4610      	mov	r0, r2
 800586e:	f000 f93a 	bl	8005ae6 <TIM_ITRx_SetConfig>
      break;
 8005872:	e003      	b.n	800587c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	73fb      	strb	r3, [r7, #15]
      break;
 8005878:	e000      	b.n	800587c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800587a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800588c:	7bfb      	ldrb	r3, [r7, #15]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a40      	ldr	r2, [pc, #256]	; (80059fc <TIM_Base_SetConfig+0x114>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d013      	beq.n	8005928 <TIM_Base_SetConfig+0x40>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005906:	d00f      	beq.n	8005928 <TIM_Base_SetConfig+0x40>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a3d      	ldr	r2, [pc, #244]	; (8005a00 <TIM_Base_SetConfig+0x118>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00b      	beq.n	8005928 <TIM_Base_SetConfig+0x40>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a3c      	ldr	r2, [pc, #240]	; (8005a04 <TIM_Base_SetConfig+0x11c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d007      	beq.n	8005928 <TIM_Base_SetConfig+0x40>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a3b      	ldr	r2, [pc, #236]	; (8005a08 <TIM_Base_SetConfig+0x120>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d003      	beq.n	8005928 <TIM_Base_SetConfig+0x40>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a3a      	ldr	r2, [pc, #232]	; (8005a0c <TIM_Base_SetConfig+0x124>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d108      	bne.n	800593a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a2f      	ldr	r2, [pc, #188]	; (80059fc <TIM_Base_SetConfig+0x114>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d02b      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005948:	d027      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a2c      	ldr	r2, [pc, #176]	; (8005a00 <TIM_Base_SetConfig+0x118>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d023      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a2b      	ldr	r2, [pc, #172]	; (8005a04 <TIM_Base_SetConfig+0x11c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d01f      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a2a      	ldr	r2, [pc, #168]	; (8005a08 <TIM_Base_SetConfig+0x120>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d01b      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a29      	ldr	r2, [pc, #164]	; (8005a0c <TIM_Base_SetConfig+0x124>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d017      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a28      	ldr	r2, [pc, #160]	; (8005a10 <TIM_Base_SetConfig+0x128>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d013      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a27      	ldr	r2, [pc, #156]	; (8005a14 <TIM_Base_SetConfig+0x12c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00f      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a26      	ldr	r2, [pc, #152]	; (8005a18 <TIM_Base_SetConfig+0x130>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00b      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a25      	ldr	r2, [pc, #148]	; (8005a1c <TIM_Base_SetConfig+0x134>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d007      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a24      	ldr	r2, [pc, #144]	; (8005a20 <TIM_Base_SetConfig+0x138>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d003      	beq.n	800599a <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a23      	ldr	r2, [pc, #140]	; (8005a24 <TIM_Base_SetConfig+0x13c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d108      	bne.n	80059ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a0a      	ldr	r2, [pc, #40]	; (80059fc <TIM_Base_SetConfig+0x114>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_Base_SetConfig+0xf8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a0c      	ldr	r2, [pc, #48]	; (8005a0c <TIM_Base_SetConfig+0x124>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d103      	bne.n	80059e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	615a      	str	r2, [r3, #20]
}
 80059ee:	bf00      	nop
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40010000 	.word	0x40010000
 8005a00:	40000400 	.word	0x40000400
 8005a04:	40000800 	.word	0x40000800
 8005a08:	40000c00 	.word	0x40000c00
 8005a0c:	40010400 	.word	0x40010400
 8005a10:	40014000 	.word	0x40014000
 8005a14:	40014400 	.word	0x40014400
 8005a18:	40014800 	.word	0x40014800
 8005a1c:	40001800 	.word	0x40001800
 8005a20:	40001c00 	.word	0x40001c00
 8005a24:	40002000 	.word	0x40002000

08005a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	f023 0201 	bic.w	r2, r3, #1
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f023 030a 	bic.w	r3, r3, #10
 8005a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	621a      	str	r2, [r3, #32]
}
 8005a7a:	bf00      	nop
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b087      	sub	sp, #28
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	60f8      	str	r0, [r7, #12]
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	f023 0210 	bic.w	r2, r3, #16
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	031b      	lsls	r3, r3, #12
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ac2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	621a      	str	r2, [r3, #32]
}
 8005ada:	bf00      	nop
 8005adc:	371c      	adds	r7, #28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b085      	sub	sp, #20
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f043 0307 	orr.w	r3, r3, #7
 8005b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	609a      	str	r2, [r3, #8]
}
 8005b10:	bf00      	nop
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	021a      	lsls	r2, r3, #8
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	609a      	str	r2, [r3, #8]
}
 8005b50:	bf00      	nop
 8005b52:	371c      	adds	r7, #28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e05a      	b.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a21      	ldr	r2, [pc, #132]	; (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d022      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc0:	d01d      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a1d      	ldr	r2, [pc, #116]	; (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d018      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a1b      	ldr	r2, [pc, #108]	; (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d013      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a1a      	ldr	r2, [pc, #104]	; (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00e      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a18      	ldr	r2, [pc, #96]	; (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d009      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a17      	ldr	r2, [pc, #92]	; (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d004      	beq.n	8005bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a15      	ldr	r2, [pc, #84]	; (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d10c      	bne.n	8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	40010000 	.word	0x40010000
 8005c3c:	40000400 	.word	0x40000400
 8005c40:	40000800 	.word	0x40000800
 8005c44:	40000c00 	.word	0x40000c00
 8005c48:	40010400 	.word	0x40010400
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	40001800 	.word	0x40001800

08005c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e03f      	b.n	8005d0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fc fa1e 	bl	80020e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2224      	movs	r2, #36	; 0x24
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fddb 	bl	800687c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	695a      	ldr	r2, [r3, #20]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b08a      	sub	sp, #40	; 0x28
 8005d1a:	af02      	add	r7, sp, #8
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	603b      	str	r3, [r7, #0]
 8005d22:	4613      	mov	r3, r2
 8005d24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	d17c      	bne.n	8005e30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <HAL_UART_Transmit+0x2c>
 8005d3c:	88fb      	ldrh	r3, [r7, #6]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e075      	b.n	8005e32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_UART_Transmit+0x3e>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e06e      	b.n	8005e32 <HAL_UART_Transmit+0x11c>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2221      	movs	r2, #33	; 0x21
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d6a:	f7fc fc13 	bl	8002594 <HAL_GetTick>
 8005d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	88fa      	ldrh	r2, [r7, #6]
 8005d74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	88fa      	ldrh	r2, [r7, #6]
 8005d7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d84:	d108      	bne.n	8005d98 <HAL_UART_Transmit+0x82>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d104      	bne.n	8005d98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	e003      	b.n	8005da0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005da8:	e02a      	b.n	8005e00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2200      	movs	r2, #0
 8005db2:	2180      	movs	r1, #128	; 0x80
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 fb1f 	bl	80063f8 <UART_WaitOnFlagUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e036      	b.n	8005e32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10b      	bne.n	8005de2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	3302      	adds	r3, #2
 8005dde:	61bb      	str	r3, [r7, #24]
 8005de0:	e007      	b.n	8005df2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	781a      	ldrb	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	3301      	adds	r3, #1
 8005df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1cf      	bne.n	8005daa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2200      	movs	r2, #0
 8005e12:	2140      	movs	r1, #64	; 0x40
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 faef 	bl	80063f8 <UART_WaitOnFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e006      	b.n	8005e32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e000      	b.n	8005e32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e30:	2302      	movs	r3, #2
  }
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3720      	adds	r7, #32
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	60b9      	str	r1, [r7, #8]
 8005e44:	4613      	mov	r3, r2
 8005e46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	d11d      	bne.n	8005e90 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <HAL_UART_Receive_IT+0x26>
 8005e5a:	88fb      	ldrh	r3, [r7, #6]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e016      	b.n	8005e92 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <HAL_UART_Receive_IT+0x38>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e00f      	b.n	8005e92 <HAL_UART_Receive_IT+0x58>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e80:	88fb      	ldrh	r3, [r7, #6]
 8005e82:	461a      	mov	r2, r3
 8005e84:	68b9      	ldr	r1, [r7, #8]
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 fb24 	bl	80064d4 <UART_Start_Receive_IT>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	e000      	b.n	8005e92 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005e90:	2302      	movs	r3, #2
  }
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b0ba      	sub	sp, #232	; 0xe8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005eda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10f      	bne.n	8005f02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <HAL_UART_IRQHandler+0x66>
 8005eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fc03 	bl	8006706 <UART_Receive_IT>
      return;
 8005f00:	e256      	b.n	80063b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 80de 	beq.w	80060c8 <HAL_UART_IRQHandler+0x22c>
 8005f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d106      	bne.n	8005f26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 80d1 	beq.w	80060c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00b      	beq.n	8005f4a <HAL_UART_IRQHandler+0xae>
 8005f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d005      	beq.n	8005f4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	f043 0201 	orr.w	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00b      	beq.n	8005f6e <HAL_UART_IRQHandler+0xd2>
 8005f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	f043 0202 	orr.w	r2, r3, #2
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00b      	beq.n	8005f92 <HAL_UART_IRQHandler+0xf6>
 8005f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d005      	beq.n	8005f92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	f043 0204 	orr.w	r2, r3, #4
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d011      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x126>
 8005f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d105      	bne.n	8005fb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f043 0208 	orr.w	r2, r3, #8
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 81ed 	beq.w	80063a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd0:	f003 0320 	and.w	r3, r3, #32
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d008      	beq.n	8005fea <HAL_UART_IRQHandler+0x14e>
 8005fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fb8e 	bl	8006706 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff4:	2b40      	cmp	r3, #64	; 0x40
 8005ff6:	bf0c      	ite	eq
 8005ff8:	2301      	moveq	r3, #1
 8005ffa:	2300      	movne	r3, #0
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d103      	bne.n	8006016 <HAL_UART_IRQHandler+0x17a>
 800600e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006012:	2b00      	cmp	r3, #0
 8006014:	d04f      	beq.n	80060b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fa96 	bl	8006548 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006026:	2b40      	cmp	r3, #64	; 0x40
 8006028:	d141      	bne.n	80060ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3314      	adds	r3, #20
 8006030:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006040:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3314      	adds	r3, #20
 8006052:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006056:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800605a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006062:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006066:	e841 2300 	strex	r3, r2, [r1]
 800606a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800606e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1d9      	bne.n	800602a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	2b00      	cmp	r3, #0
 800607c:	d013      	beq.n	80060a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	4a7d      	ldr	r2, [pc, #500]	; (8006278 <HAL_UART_IRQHandler+0x3dc>)
 8006084:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608a:	4618      	mov	r0, r3
 800608c:	f7fc fc33 	bl	80028f6 <HAL_DMA_Abort_IT>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d016      	beq.n	80060c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060a0:	4610      	mov	r0, r2
 80060a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a4:	e00e      	b.n	80060c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f990 	bl	80063cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ac:	e00a      	b.n	80060c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f98c 	bl	80063cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b4:	e006      	b.n	80060c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f988 	bl	80063cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80060c2:	e170      	b.n	80063a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c4:	bf00      	nop
    return;
 80060c6:	e16e      	b.n	80063a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	f040 814a 	bne.w	8006366 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d6:	f003 0310 	and.w	r3, r3, #16
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 8143 	beq.w	8006366 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e4:	f003 0310 	and.w	r3, r3, #16
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 813c 	beq.w	8006366 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ee:	2300      	movs	r3, #0
 80060f0:	60bb      	str	r3, [r7, #8]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60bb      	str	r3, [r7, #8]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	60bb      	str	r3, [r7, #8]
 8006102:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610e:	2b40      	cmp	r3, #64	; 0x40
 8006110:	f040 80b4 	bne.w	800627c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006120:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 8140 	beq.w	80063aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800612e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006132:	429a      	cmp	r2, r3
 8006134:	f080 8139 	bcs.w	80063aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800613e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614a:	f000 8088 	beq.w	800625e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	330c      	adds	r3, #12
 8006154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006164:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800616c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	330c      	adds	r3, #12
 8006176:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800617a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800617e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006186:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006192:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1d9      	bne.n	800614e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3314      	adds	r3, #20
 80061a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061ac:	f023 0301 	bic.w	r3, r3, #1
 80061b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	3314      	adds	r3, #20
 80061ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e1      	bne.n	800619a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3314      	adds	r3, #20
 80061dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3314      	adds	r3, #20
 80061f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006200:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e3      	bne.n	80061d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	330c      	adds	r3, #12
 8006222:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800622c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800622e:	f023 0310 	bic.w	r3, r3, #16
 8006232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	330c      	adds	r3, #12
 800623c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006240:	65ba      	str	r2, [r7, #88]	; 0x58
 8006242:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006244:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006246:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006248:	e841 2300 	strex	r3, r2, [r1]
 800624c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800624e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e3      	bne.n	800621c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	4618      	mov	r0, r3
 800625a:	f7fc fadc 	bl	8002816 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006266:	b29b      	uxth	r3, r3
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	b29b      	uxth	r3, r3
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f8b6 	bl	80063e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006274:	e099      	b.n	80063aa <HAL_UART_IRQHandler+0x50e>
 8006276:	bf00      	nop
 8006278:	0800660f 	.word	0x0800660f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006284:	b29b      	uxth	r3, r3
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006290:	b29b      	uxth	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 808b 	beq.w	80063ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006298:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 8086 	beq.w	80063ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	330c      	adds	r3, #12
 80062a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	330c      	adds	r3, #12
 80062c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80062c6:	647a      	str	r2, [r7, #68]	; 0x44
 80062c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e3      	bne.n	80062a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3314      	adds	r3, #20
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	623b      	str	r3, [r7, #32]
   return(result);
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	f023 0301 	bic.w	r3, r3, #1
 80062f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3314      	adds	r3, #20
 80062fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062fe:	633a      	str	r2, [r7, #48]	; 0x30
 8006300:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006306:	e841 2300 	strex	r3, r2, [r1]
 800630a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1e3      	bne.n	80062da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2220      	movs	r2, #32
 8006316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	330c      	adds	r3, #12
 8006326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0310 	bic.w	r3, r3, #16
 8006336:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	330c      	adds	r3, #12
 8006340:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006344:	61fa      	str	r2, [r7, #28]
 8006346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	69b9      	ldr	r1, [r7, #24]
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	617b      	str	r3, [r7, #20]
   return(result);
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e3      	bne.n	8006320 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f83e 	bl	80063e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006364:	e023      	b.n	80063ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <HAL_UART_IRQHandler+0x4ea>
 8006372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f959 	bl	8006636 <UART_Transmit_IT>
    return;
 8006384:	e014      	b.n	80063b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800638a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00e      	beq.n	80063b0 <HAL_UART_IRQHandler+0x514>
 8006392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d008      	beq.n	80063b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f999 	bl	80066d6 <UART_EndTransmit_IT>
    return;
 80063a4:	e004      	b.n	80063b0 <HAL_UART_IRQHandler+0x514>
    return;
 80063a6:	bf00      	nop
 80063a8:	e002      	b.n	80063b0 <HAL_UART_IRQHandler+0x514>
      return;
 80063aa:	bf00      	nop
 80063ac:	e000      	b.n	80063b0 <HAL_UART_IRQHandler+0x514>
      return;
 80063ae:	bf00      	nop
  }
}
 80063b0:	37e8      	adds	r7, #232	; 0xe8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop

080063b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b090      	sub	sp, #64	; 0x40
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	603b      	str	r3, [r7, #0]
 8006404:	4613      	mov	r3, r2
 8006406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006408:	e050      	b.n	80064ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800640a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800640c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006410:	d04c      	beq.n	80064ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <UART_WaitOnFlagUntilTimeout+0x30>
 8006418:	f7fc f8bc 	bl	8002594 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006424:	429a      	cmp	r2, r3
 8006426:	d241      	bcs.n	80064ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	330c      	adds	r3, #12
 800642e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800643e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	330c      	adds	r3, #12
 8006446:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006448:	637a      	str	r2, [r7, #52]	; 0x34
 800644a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800644e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e5      	bne.n	8006428 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3314      	adds	r3, #20
 8006462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	613b      	str	r3, [r7, #16]
   return(result);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f023 0301 	bic.w	r3, r3, #1
 8006472:	63bb      	str	r3, [r7, #56]	; 0x38
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3314      	adds	r3, #20
 800647a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800647c:	623a      	str	r2, [r7, #32]
 800647e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	69f9      	ldr	r1, [r7, #28]
 8006482:	6a3a      	ldr	r2, [r7, #32]
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	61bb      	str	r3, [r7, #24]
   return(result);
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e5      	bne.n	800645c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2220      	movs	r2, #32
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e00f      	b.n	80064cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	4013      	ands	r3, r2
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	bf0c      	ite	eq
 80064bc:	2301      	moveq	r3, #1
 80064be:	2300      	movne	r3, #0
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d09f      	beq.n	800640a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3740      	adds	r7, #64	; 0x40
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	88fa      	ldrh	r2, [r7, #6]
 80064ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	88fa      	ldrh	r2, [r7, #6]
 80064f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2222      	movs	r2, #34	; 0x22
 80064fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006518:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695a      	ldr	r2, [r3, #20]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f042 0201 	orr.w	r2, r2, #1
 8006528:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 0220 	orr.w	r2, r2, #32
 8006538:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006548:	b480      	push	{r7}
 800654a:	b095      	sub	sp, #84	; 0x54
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	330c      	adds	r3, #12
 8006556:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800655a:	e853 3f00 	ldrex	r3, [r3]
 800655e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	330c      	adds	r3, #12
 800656e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006570:	643a      	str	r2, [r7, #64]	; 0x40
 8006572:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006576:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006578:	e841 2300 	strex	r3, r2, [r1]
 800657c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800657e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e5      	bne.n	8006550 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3314      	adds	r3, #20
 800658a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	e853 3f00 	ldrex	r3, [r3]
 8006592:	61fb      	str	r3, [r7, #28]
   return(result);
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	f023 0301 	bic.w	r3, r3, #1
 800659a:	64bb      	str	r3, [r7, #72]	; 0x48
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3314      	adds	r3, #20
 80065a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e5      	bne.n	8006584 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d119      	bne.n	80065f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	330c      	adds	r3, #12
 80065c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	e853 3f00 	ldrex	r3, [r3]
 80065ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f023 0310 	bic.w	r3, r3, #16
 80065d6:	647b      	str	r3, [r7, #68]	; 0x44
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	330c      	adds	r3, #12
 80065de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065e0:	61ba      	str	r2, [r7, #24]
 80065e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e4:	6979      	ldr	r1, [r7, #20]
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	e841 2300 	strex	r3, r2, [r1]
 80065ec:	613b      	str	r3, [r7, #16]
   return(result);
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1e5      	bne.n	80065c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006602:	bf00      	nop
 8006604:	3754      	adds	r7, #84	; 0x54
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b084      	sub	sp, #16
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f7ff fecf 	bl	80063cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800662e:	bf00      	nop
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006636:	b480      	push	{r7}
 8006638:	b085      	sub	sp, #20
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b21      	cmp	r3, #33	; 0x21
 8006648:	d13e      	bne.n	80066c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006652:	d114      	bne.n	800667e <UART_Transmit_IT+0x48>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d110      	bne.n	800667e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006670:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	1c9a      	adds	r2, r3, #2
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	621a      	str	r2, [r3, #32]
 800667c:	e008      	b.n	8006690 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	1c59      	adds	r1, r3, #1
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6211      	str	r1, [r2, #32]
 8006688:	781a      	ldrb	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006694:	b29b      	uxth	r3, r3
 8006696:	3b01      	subs	r3, #1
 8006698:	b29b      	uxth	r3, r3
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	4619      	mov	r1, r3
 800669e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10f      	bne.n	80066c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	e000      	b.n	80066ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066c8:	2302      	movs	r3, #2
  }
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b082      	sub	sp, #8
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff fe5e 	bl	80063b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b08c      	sub	sp, #48	; 0x30
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b22      	cmp	r3, #34	; 0x22
 8006718:	f040 80ab 	bne.w	8006872 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006724:	d117      	bne.n	8006756 <UART_Receive_IT+0x50>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d113      	bne.n	8006756 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800672e:	2300      	movs	r3, #0
 8006730:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006736:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	b29b      	uxth	r3, r3
 8006740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006744:	b29a      	uxth	r2, r3
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674e:	1c9a      	adds	r2, r3, #2
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	629a      	str	r2, [r3, #40]	; 0x28
 8006754:	e026      	b.n	80067a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800675c:	2300      	movs	r3, #0
 800675e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006768:	d007      	beq.n	800677a <UART_Receive_IT+0x74>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10a      	bne.n	8006788 <UART_Receive_IT+0x82>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d106      	bne.n	8006788 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	b2da      	uxtb	r2, r3
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	e008      	b.n	800679a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	b2db      	uxtb	r3, r3
 8006790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006794:	b2da      	uxtb	r2, r3
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006798:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	3b01      	subs	r3, #1
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	4619      	mov	r1, r3
 80067b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d15a      	bne.n	800686e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0220 	bic.w	r2, r2, #32
 80067c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695a      	ldr	r2, [r3, #20]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0201 	bic.w	r2, r2, #1
 80067e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d135      	bne.n	8006864 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	330c      	adds	r3, #12
 8006804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	e853 3f00 	ldrex	r3, [r3]
 800680c:	613b      	str	r3, [r7, #16]
   return(result);
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f023 0310 	bic.w	r3, r3, #16
 8006814:	627b      	str	r3, [r7, #36]	; 0x24
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	330c      	adds	r3, #12
 800681c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800681e:	623a      	str	r2, [r7, #32]
 8006820:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006822:	69f9      	ldr	r1, [r7, #28]
 8006824:	6a3a      	ldr	r2, [r7, #32]
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	61bb      	str	r3, [r7, #24]
   return(result);
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1e5      	bne.n	80067fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0310 	and.w	r3, r3, #16
 800683c:	2b10      	cmp	r3, #16
 800683e:	d10a      	bne.n	8006856 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff fdbf 	bl	80063e0 <HAL_UARTEx_RxEventCallback>
 8006862:	e002      	b.n	800686a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7fb fd7f 	bl	8002368 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	e002      	b.n	8006874 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	e000      	b.n	8006874 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006872:	2302      	movs	r3, #2
  }
}
 8006874:	4618      	mov	r0, r3
 8006876:	3730      	adds	r7, #48	; 0x30
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800687c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006880:	b09f      	sub	sp, #124	; 0x7c
 8006882:	af00      	add	r7, sp, #0
 8006884:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006892:	68d9      	ldr	r1, [r3, #12]
 8006894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	ea40 0301 	orr.w	r3, r0, r1
 800689c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800689e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a0:	689a      	ldr	r2, [r3, #8]
 80068a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	431a      	orrs	r2, r3
 80068a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	431a      	orrs	r2, r3
 80068ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80068b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80068c0:	f021 010c 	bic.w	r1, r1, #12
 80068c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068ca:	430b      	orrs	r3, r1
 80068cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80068d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068da:	6999      	ldr	r1, [r3, #24]
 80068dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	ea40 0301 	orr.w	r3, r0, r1
 80068e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	4bc5      	ldr	r3, [pc, #788]	; (8006c00 <UART_SetConfig+0x384>)
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d004      	beq.n	80068fa <UART_SetConfig+0x7e>
 80068f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	4bc3      	ldr	r3, [pc, #780]	; (8006c04 <UART_SetConfig+0x388>)
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d103      	bne.n	8006902 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068fa:	f7fd ff3d 	bl	8004778 <HAL_RCC_GetPCLK2Freq>
 80068fe:	6778      	str	r0, [r7, #116]	; 0x74
 8006900:	e002      	b.n	8006908 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006902:	f7fd ff25 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8006906:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006910:	f040 80b6 	bne.w	8006a80 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006916:	461c      	mov	r4, r3
 8006918:	f04f 0500 	mov.w	r5, #0
 800691c:	4622      	mov	r2, r4
 800691e:	462b      	mov	r3, r5
 8006920:	1891      	adds	r1, r2, r2
 8006922:	6439      	str	r1, [r7, #64]	; 0x40
 8006924:	415b      	adcs	r3, r3
 8006926:	647b      	str	r3, [r7, #68]	; 0x44
 8006928:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800692c:	1912      	adds	r2, r2, r4
 800692e:	eb45 0303 	adc.w	r3, r5, r3
 8006932:	f04f 0000 	mov.w	r0, #0
 8006936:	f04f 0100 	mov.w	r1, #0
 800693a:	00d9      	lsls	r1, r3, #3
 800693c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006940:	00d0      	lsls	r0, r2, #3
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	1911      	adds	r1, r2, r4
 8006948:	6639      	str	r1, [r7, #96]	; 0x60
 800694a:	416b      	adcs	r3, r5
 800694c:	667b      	str	r3, [r7, #100]	; 0x64
 800694e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	461a      	mov	r2, r3
 8006954:	f04f 0300 	mov.w	r3, #0
 8006958:	1891      	adds	r1, r2, r2
 800695a:	63b9      	str	r1, [r7, #56]	; 0x38
 800695c:	415b      	adcs	r3, r3
 800695e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006960:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006964:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006968:	f7f9 fc36 	bl	80001d8 <__aeabi_uldivmod>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4ba5      	ldr	r3, [pc, #660]	; (8006c08 <UART_SetConfig+0x38c>)
 8006972:	fba3 2302 	umull	r2, r3, r3, r2
 8006976:	095b      	lsrs	r3, r3, #5
 8006978:	011e      	lsls	r6, r3, #4
 800697a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800697c:	461c      	mov	r4, r3
 800697e:	f04f 0500 	mov.w	r5, #0
 8006982:	4622      	mov	r2, r4
 8006984:	462b      	mov	r3, r5
 8006986:	1891      	adds	r1, r2, r2
 8006988:	6339      	str	r1, [r7, #48]	; 0x30
 800698a:	415b      	adcs	r3, r3
 800698c:	637b      	str	r3, [r7, #52]	; 0x34
 800698e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006992:	1912      	adds	r2, r2, r4
 8006994:	eb45 0303 	adc.w	r3, r5, r3
 8006998:	f04f 0000 	mov.w	r0, #0
 800699c:	f04f 0100 	mov.w	r1, #0
 80069a0:	00d9      	lsls	r1, r3, #3
 80069a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069a6:	00d0      	lsls	r0, r2, #3
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	1911      	adds	r1, r2, r4
 80069ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80069b0:	416b      	adcs	r3, r5
 80069b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	461a      	mov	r2, r3
 80069ba:	f04f 0300 	mov.w	r3, #0
 80069be:	1891      	adds	r1, r2, r2
 80069c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80069c2:	415b      	adcs	r3, r3
 80069c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80069ce:	f7f9 fc03 	bl	80001d8 <__aeabi_uldivmod>
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	4b8c      	ldr	r3, [pc, #560]	; (8006c08 <UART_SetConfig+0x38c>)
 80069d8:	fba3 1302 	umull	r1, r3, r3, r2
 80069dc:	095b      	lsrs	r3, r3, #5
 80069de:	2164      	movs	r1, #100	; 0x64
 80069e0:	fb01 f303 	mul.w	r3, r1, r3
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	3332      	adds	r3, #50	; 0x32
 80069ea:	4a87      	ldr	r2, [pc, #540]	; (8006c08 <UART_SetConfig+0x38c>)
 80069ec:	fba2 2303 	umull	r2, r3, r2, r3
 80069f0:	095b      	lsrs	r3, r3, #5
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069f8:	441e      	add	r6, r3
 80069fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069fc:	4618      	mov	r0, r3
 80069fe:	f04f 0100 	mov.w	r1, #0
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	1894      	adds	r4, r2, r2
 8006a08:	623c      	str	r4, [r7, #32]
 8006a0a:	415b      	adcs	r3, r3
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a12:	1812      	adds	r2, r2, r0
 8006a14:	eb41 0303 	adc.w	r3, r1, r3
 8006a18:	f04f 0400 	mov.w	r4, #0
 8006a1c:	f04f 0500 	mov.w	r5, #0
 8006a20:	00dd      	lsls	r5, r3, #3
 8006a22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a26:	00d4      	lsls	r4, r2, #3
 8006a28:	4622      	mov	r2, r4
 8006a2a:	462b      	mov	r3, r5
 8006a2c:	1814      	adds	r4, r2, r0
 8006a2e:	653c      	str	r4, [r7, #80]	; 0x50
 8006a30:	414b      	adcs	r3, r1
 8006a32:	657b      	str	r3, [r7, #84]	; 0x54
 8006a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f04f 0300 	mov.w	r3, #0
 8006a3e:	1891      	adds	r1, r2, r2
 8006a40:	61b9      	str	r1, [r7, #24]
 8006a42:	415b      	adcs	r3, r3
 8006a44:	61fb      	str	r3, [r7, #28]
 8006a46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006a4e:	f7f9 fbc3 	bl	80001d8 <__aeabi_uldivmod>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4b6c      	ldr	r3, [pc, #432]	; (8006c08 <UART_SetConfig+0x38c>)
 8006a58:	fba3 1302 	umull	r1, r3, r3, r2
 8006a5c:	095b      	lsrs	r3, r3, #5
 8006a5e:	2164      	movs	r1, #100	; 0x64
 8006a60:	fb01 f303 	mul.w	r3, r1, r3
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	3332      	adds	r3, #50	; 0x32
 8006a6a:	4a67      	ldr	r2, [pc, #412]	; (8006c08 <UART_SetConfig+0x38c>)
 8006a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	f003 0207 	and.w	r2, r3, #7
 8006a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4432      	add	r2, r6
 8006a7c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a7e:	e0b9      	b.n	8006bf4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a82:	461c      	mov	r4, r3
 8006a84:	f04f 0500 	mov.w	r5, #0
 8006a88:	4622      	mov	r2, r4
 8006a8a:	462b      	mov	r3, r5
 8006a8c:	1891      	adds	r1, r2, r2
 8006a8e:	6139      	str	r1, [r7, #16]
 8006a90:	415b      	adcs	r3, r3
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006a98:	1912      	adds	r2, r2, r4
 8006a9a:	eb45 0303 	adc.w	r3, r5, r3
 8006a9e:	f04f 0000 	mov.w	r0, #0
 8006aa2:	f04f 0100 	mov.w	r1, #0
 8006aa6:	00d9      	lsls	r1, r3, #3
 8006aa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006aac:	00d0      	lsls	r0, r2, #3
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	eb12 0804 	adds.w	r8, r2, r4
 8006ab6:	eb43 0905 	adc.w	r9, r3, r5
 8006aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f04f 0100 	mov.w	r1, #0
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	008b      	lsls	r3, r1, #2
 8006ace:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ad2:	0082      	lsls	r2, r0, #2
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	f7f9 fb7e 	bl	80001d8 <__aeabi_uldivmod>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4b49      	ldr	r3, [pc, #292]	; (8006c08 <UART_SetConfig+0x38c>)
 8006ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ae6:	095b      	lsrs	r3, r3, #5
 8006ae8:	011e      	lsls	r6, r3, #4
 8006aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aec:	4618      	mov	r0, r3
 8006aee:	f04f 0100 	mov.w	r1, #0
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	1894      	adds	r4, r2, r2
 8006af8:	60bc      	str	r4, [r7, #8]
 8006afa:	415b      	adcs	r3, r3
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b02:	1812      	adds	r2, r2, r0
 8006b04:	eb41 0303 	adc.w	r3, r1, r3
 8006b08:	f04f 0400 	mov.w	r4, #0
 8006b0c:	f04f 0500 	mov.w	r5, #0
 8006b10:	00dd      	lsls	r5, r3, #3
 8006b12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b16:	00d4      	lsls	r4, r2, #3
 8006b18:	4622      	mov	r2, r4
 8006b1a:	462b      	mov	r3, r5
 8006b1c:	1814      	adds	r4, r2, r0
 8006b1e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006b20:	414b      	adcs	r3, r1
 8006b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f04f 0100 	mov.w	r1, #0
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	f04f 0300 	mov.w	r3, #0
 8006b36:	008b      	lsls	r3, r1, #2
 8006b38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b3c:	0082      	lsls	r2, r0, #2
 8006b3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006b42:	f7f9 fb49 	bl	80001d8 <__aeabi_uldivmod>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4b2f      	ldr	r3, [pc, #188]	; (8006c08 <UART_SetConfig+0x38c>)
 8006b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b50:	095b      	lsrs	r3, r3, #5
 8006b52:	2164      	movs	r1, #100	; 0x64
 8006b54:	fb01 f303 	mul.w	r3, r1, r3
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	3332      	adds	r3, #50	; 0x32
 8006b5e:	4a2a      	ldr	r2, [pc, #168]	; (8006c08 <UART_SetConfig+0x38c>)
 8006b60:	fba2 2303 	umull	r2, r3, r2, r3
 8006b64:	095b      	lsrs	r3, r3, #5
 8006b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b6a:	441e      	add	r6, r3
 8006b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f04f 0100 	mov.w	r1, #0
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	1894      	adds	r4, r2, r2
 8006b7a:	603c      	str	r4, [r7, #0]
 8006b7c:	415b      	adcs	r3, r3
 8006b7e:	607b      	str	r3, [r7, #4]
 8006b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b84:	1812      	adds	r2, r2, r0
 8006b86:	eb41 0303 	adc.w	r3, r1, r3
 8006b8a:	f04f 0400 	mov.w	r4, #0
 8006b8e:	f04f 0500 	mov.w	r5, #0
 8006b92:	00dd      	lsls	r5, r3, #3
 8006b94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b98:	00d4      	lsls	r4, r2, #3
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	462b      	mov	r3, r5
 8006b9e:	eb12 0a00 	adds.w	sl, r2, r0
 8006ba2:	eb43 0b01 	adc.w	fp, r3, r1
 8006ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f04f 0100 	mov.w	r1, #0
 8006bb0:	f04f 0200 	mov.w	r2, #0
 8006bb4:	f04f 0300 	mov.w	r3, #0
 8006bb8:	008b      	lsls	r3, r1, #2
 8006bba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006bbe:	0082      	lsls	r2, r0, #2
 8006bc0:	4650      	mov	r0, sl
 8006bc2:	4659      	mov	r1, fp
 8006bc4:	f7f9 fb08 	bl	80001d8 <__aeabi_uldivmod>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4b0e      	ldr	r3, [pc, #56]	; (8006c08 <UART_SetConfig+0x38c>)
 8006bce:	fba3 1302 	umull	r1, r3, r3, r2
 8006bd2:	095b      	lsrs	r3, r3, #5
 8006bd4:	2164      	movs	r1, #100	; 0x64
 8006bd6:	fb01 f303 	mul.w	r3, r1, r3
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	3332      	adds	r3, #50	; 0x32
 8006be0:	4a09      	ldr	r2, [pc, #36]	; (8006c08 <UART_SetConfig+0x38c>)
 8006be2:	fba2 2303 	umull	r2, r3, r2, r3
 8006be6:	095b      	lsrs	r3, r3, #5
 8006be8:	f003 020f 	and.w	r2, r3, #15
 8006bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4432      	add	r2, r6
 8006bf2:	609a      	str	r2, [r3, #8]
}
 8006bf4:	bf00      	nop
 8006bf6:	377c      	adds	r7, #124	; 0x7c
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfe:	bf00      	nop
 8006c00:	40011000 	.word	0x40011000
 8006c04:	40011400 	.word	0x40011400
 8006c08:	51eb851f 	.word	0x51eb851f

08006c0c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c24:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4b20      	ldr	r3, [pc, #128]	; (8006cac <FSMC_NORSRAM_Init+0xa0>)
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006c36:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006c3c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006c42:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006c48:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006c4e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006c54:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006c5a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006c60:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006c66:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006c6c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006c72:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006c78:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d103      	bne.n	8006c90 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c8e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68f9      	ldr	r1, [r7, #12]
 8006c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	fff00080 	.word	0xfff00080

08006cb0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cca:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006cd2:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006cde:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006ce6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006cee:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006cf8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	3b02      	subs	r3, #2
 8006d00:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006d02:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6979      	ldr	r1, [r7, #20]
 8006d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
	...

08006d2c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d44:	d122      	bne.n	8006d8c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	4b15      	ldr	r3, [pc, #84]	; (8006da8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006d62:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006d6a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006d72:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006d78:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	6979      	ldr	r1, [r7, #20]
 8006d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006d8a:	e005      	b.n	8006d98 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	cff00000 	.word	0xcff00000

08006dac <__libc_init_array>:
 8006dac:	b570      	push	{r4, r5, r6, lr}
 8006dae:	4d0d      	ldr	r5, [pc, #52]	; (8006de4 <__libc_init_array+0x38>)
 8006db0:	4c0d      	ldr	r4, [pc, #52]	; (8006de8 <__libc_init_array+0x3c>)
 8006db2:	1b64      	subs	r4, r4, r5
 8006db4:	10a4      	asrs	r4, r4, #2
 8006db6:	2600      	movs	r6, #0
 8006db8:	42a6      	cmp	r6, r4
 8006dba:	d109      	bne.n	8006dd0 <__libc_init_array+0x24>
 8006dbc:	4d0b      	ldr	r5, [pc, #44]	; (8006dec <__libc_init_array+0x40>)
 8006dbe:	4c0c      	ldr	r4, [pc, #48]	; (8006df0 <__libc_init_array+0x44>)
 8006dc0:	f000 f820 	bl	8006e04 <_init>
 8006dc4:	1b64      	subs	r4, r4, r5
 8006dc6:	10a4      	asrs	r4, r4, #2
 8006dc8:	2600      	movs	r6, #0
 8006dca:	42a6      	cmp	r6, r4
 8006dcc:	d105      	bne.n	8006dda <__libc_init_array+0x2e>
 8006dce:	bd70      	pop	{r4, r5, r6, pc}
 8006dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dd4:	4798      	blx	r3
 8006dd6:	3601      	adds	r6, #1
 8006dd8:	e7ee      	b.n	8006db8 <__libc_init_array+0xc>
 8006dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dde:	4798      	blx	r3
 8006de0:	3601      	adds	r6, #1
 8006de2:	e7f2      	b.n	8006dca <__libc_init_array+0x1e>
 8006de4:	08009dec 	.word	0x08009dec
 8006de8:	08009dec 	.word	0x08009dec
 8006dec:	08009dec 	.word	0x08009dec
 8006df0:	08009df0 	.word	0x08009df0

08006df4 <memset>:
 8006df4:	4402      	add	r2, r0
 8006df6:	4603      	mov	r3, r0
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d100      	bne.n	8006dfe <memset+0xa>
 8006dfc:	4770      	bx	lr
 8006dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8006e02:	e7f9      	b.n	8006df8 <memset+0x4>

08006e04 <_init>:
 8006e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e06:	bf00      	nop
 8006e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0a:	bc08      	pop	{r3}
 8006e0c:	469e      	mov	lr, r3
 8006e0e:	4770      	bx	lr

08006e10 <_fini>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	bf00      	nop
 8006e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e16:	bc08      	pop	{r3}
 8006e18:	469e      	mov	lr, r3
 8006e1a:	4770      	bx	lr
