
DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006f00  08006834  08006834  00016834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d734  0800d734  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800d734  0800d734  0001d734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d73c  0800d73c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d73c  0800d73c  0001d73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d740  0800d740  0001d740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800d744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000228  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000023c  2000023c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bc06  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a30  00000000  00000000  0003bc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  0003f680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001368  00000000  00000000  00040b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242ee  00000000  00000000  00041ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b8d4  00000000  00000000  000661d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2fcf  00000000  00000000  00081aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00154a79  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005638  00000000  00000000  00154acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800681c 	.word	0x0800681c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800681c 	.word	0x0800681c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2108      	movs	r1, #8
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <button_init+0x14>)
 80004da:	f002 f8d7 	bl	800268c <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020c00 	.word	0x40020c00

080004e8 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2108      	movs	r1, #8
 80004f2:	482f      	ldr	r0, [pc, #188]	; (80005b0 <button_Scan+0xc8>)
 80004f4:	f002 f8ca 	bl	800268c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2108      	movs	r1, #8
 80004fc:	482c      	ldr	r0, [pc, #176]	; (80005b0 <button_Scan+0xc8>)
 80004fe:	f002 f8c5 	bl	800268c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000502:	230a      	movs	r3, #10
 8000504:	2202      	movs	r2, #2
 8000506:	492b      	ldr	r1, [pc, #172]	; (80005b4 <button_Scan+0xcc>)
 8000508:	482b      	ldr	r0, [pc, #172]	; (80005b8 <button_Scan+0xd0>)
 800050a:	f004 f81a 	bl	8004542 <HAL_SPI_Receive>
	  int button_index = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000516:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	e03f      	b.n	800059e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	db06      	blt.n	8000532 <button_Scan+0x4a>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b03      	cmp	r3, #3
 8000528:	dc03      	bgt.n	8000532 <button_Scan+0x4a>
			  button_index = i + 4;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3304      	adds	r3, #4
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e018      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b03      	cmp	r3, #3
 8000536:	dd07      	ble.n	8000548 <button_Scan+0x60>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dc04      	bgt.n	8000548 <button_Scan+0x60>
			  button_index = 7 - i;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f1c3 0307 	rsb	r3, r3, #7
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	e00d      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b07      	cmp	r3, #7
 800054c:	dd06      	ble.n	800055c <button_Scan+0x74>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b0b      	cmp	r3, #11
 8000552:	dc03      	bgt.n	800055c <button_Scan+0x74>
			  button_index = i + 4;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3304      	adds	r3, #4
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e003      	b.n	8000564 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f1c3 0317 	rsb	r3, r3, #23
 8000562:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <button_Scan+0xcc>)
 8000566:	881a      	ldrh	r2, [r3, #0]
 8000568:	897b      	ldrh	r3, [r7, #10]
 800056a:	4013      	ands	r3, r2
 800056c:	b29b      	uxth	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <button_Scan+0x96>
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <button_Scan+0xd4>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2100      	movs	r1, #0
 8000578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800057c:	e009      	b.n	8000592 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <button_Scan+0xd4>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000586:	3301      	adds	r3, #1
 8000588:	b299      	uxth	r1, r3
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <button_Scan+0xd4>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000592:	897b      	ldrh	r3, [r7, #10]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3301      	adds	r3, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	ddbc      	ble.n	800051e <button_Scan+0x36>
	  }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	20000030 	.word	0x20000030
 80005b8:	20000154 	.word	0x20000154
 80005bc:	20000044 	.word	0x20000044

080005c0 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80005c4:	201e      	movs	r0, #30
 80005c6:	f001 fc3d 	bl	8001e44 <DEC2BCD>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <ds3231_init+0x80>)
 80005d0:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80005d2:	2016      	movs	r0, #22
 80005d4:	f001 fc36 	bl	8001e44 <DEC2BCD>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <ds3231_init+0x80>)
 80005de:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80005e0:	2015      	movs	r0, #21
 80005e2:	f001 fc2f 	bl	8001e44 <DEC2BCD>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <ds3231_init+0x80>)
 80005ec:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80005ee:	2006      	movs	r0, #6
 80005f0:	f001 fc28 	bl	8001e44 <DEC2BCD>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <ds3231_init+0x80>)
 80005fa:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80005fc:	200f      	movs	r0, #15
 80005fe:	f001 fc21 	bl	8001e44 <DEC2BCD>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <ds3231_init+0x80>)
 8000608:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 800060a:	2009      	movs	r0, #9
 800060c:	f001 fc1a 	bl	8001e44 <DEC2BCD>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <ds3231_init+0x80>)
 8000616:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000618:	2017      	movs	r0, #23
 800061a:	f001 fc13 	bl	8001e44 <DEC2BCD>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <ds3231_init+0x80>)
 8000624:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 100) != HAL_OK){
 8000626:	2364      	movs	r3, #100	; 0x64
 8000628:	2203      	movs	r2, #3
 800062a:	21d0      	movs	r1, #208	; 0xd0
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <ds3231_init+0x84>)
 800062e:	f002 fcc5 	bl	8002fbc <HAL_I2C_IsDeviceReady>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d000      	beq.n	800063a <ds3231_init+0x7a>
		while(1);
 8000638:	e7fe      	b.n	8000638 <ds3231_init+0x78>
	};
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000006c 	.word	0x2000006c
 8000644:	200000c4 	.word	0x200000c4

08000648 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af04      	add	r7, sp, #16
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fbf2 	bl	8001e44 <DEC2BCD>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	b29a      	uxth	r2, r3
 8000668:	230a      	movs	r3, #10
 800066a:	9302      	str	r3, [sp, #8]
 800066c:	2301      	movs	r3, #1
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	f107 030f 	add.w	r3, r7, #15
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2301      	movs	r3, #1
 8000678:	21d0      	movs	r1, #208	; 0xd0
 800067a:	4803      	ldr	r0, [pc, #12]	; (8000688 <ds3231_Write+0x40>)
 800067c:	f002 f97e 	bl	800297c <HAL_I2C_Mem_Write>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000c4 	.word	0x200000c4

0800068c <ds3231_ReadTime>:

void ds3231_ReadTime(){
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000692:	230a      	movs	r3, #10
 8000694:	9302      	str	r3, [sp, #8]
 8000696:	2307      	movs	r3, #7
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <ds3231_ReadTime+0xa4>)
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2301      	movs	r3, #1
 80006a0:	2200      	movs	r2, #0
 80006a2:	21d0      	movs	r1, #208	; 0xd0
 80006a4:	4823      	ldr	r0, [pc, #140]	; (8000734 <ds3231_ReadTime+0xa8>)
 80006a6:	f002 fa63 	bl	8002b70 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80006aa:	4b21      	ldr	r3, [pc, #132]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fbae 	bl	8001e10 <BCD2DEC>
 80006b4:	4603      	mov	r3, r0
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <ds3231_ReadTime+0xac>)
 80006ba:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 fba5 	bl	8001e10 <BCD2DEC>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <ds3231_ReadTime+0xb0>)
 80006cc:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006d0:	789b      	ldrb	r3, [r3, #2]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fb9c 	bl	8001e10 <BCD2DEC>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <ds3231_ReadTime+0xb4>)
 80006de:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006e2:	78db      	ldrb	r3, [r3, #3]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fb93 	bl	8001e10 <BCD2DEC>
 80006ea:	4603      	mov	r3, r0
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <ds3231_ReadTime+0xb8>)
 80006f0:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <ds3231_ReadTime+0xa4>)
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fb8a 	bl	8001e10 <BCD2DEC>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <ds3231_ReadTime+0xbc>)
 8000702:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <ds3231_ReadTime+0xa4>)
 8000706:	795b      	ldrb	r3, [r3, #5]
 8000708:	4618      	mov	r0, r3
 800070a:	f001 fb81 	bl	8001e10 <BCD2DEC>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <ds3231_ReadTime+0xc0>)
 8000714:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <ds3231_ReadTime+0xa4>)
 8000718:	799b      	ldrb	r3, [r3, #6]
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fb78 	bl	8001e10 <BCD2DEC>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <ds3231_ReadTime+0xc4>)
 8000726:	701a      	strb	r2, [r3, #0]
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000006c 	.word	0x2000006c
 8000734:	200000c4 	.word	0x200000c4
 8000738:	20000064 	.word	0x20000064
 800073c:	20000066 	.word	0x20000066
 8000740:	20000069 	.word	0x20000069
 8000744:	20000068 	.word	0x20000068
 8000748:	20000067 	.word	0x20000067
 800074c:	2000006a 	.word	0x2000006a
 8000750:	20000065 	.word	0x20000065

08000754 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
 800076a:	615a      	str	r2, [r3, #20]
 800076c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]
 800077e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000780:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <MX_FSMC_Init+0xec>)
 8000782:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000786:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000788:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <MX_FSMC_Init+0xec>)
 800078a:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <MX_FSMC_Init+0xf0>)
 800078c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800078e:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <MX_FSMC_Init+0xec>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000794:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <MX_FSMC_Init+0xec>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800079a:	4b29      	ldr	r3, [pc, #164]	; (8000840 <MX_FSMC_Init+0xec>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80007a0:	4b27      	ldr	r3, [pc, #156]	; (8000840 <MX_FSMC_Init+0xec>)
 80007a2:	2210      	movs	r2, #16
 80007a4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <MX_FSMC_Init+0xec>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <MX_FSMC_Init+0xec>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <MX_FSMC_Init+0xec>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007b8:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_FSMC_Init+0xec>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_FSMC_Init+0xec>)
 80007c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_FSMC_Init+0xec>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_FSMC_Init+0xec>)
 80007ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_FSMC_Init+0xec>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_FSMC_Init+0xec>)
 80007dc:	2200      	movs	r2, #0
 80007de:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_FSMC_Init+0xec>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007e6:	230f      	movs	r3, #15
 80007e8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007ea:	230f      	movs	r3, #15
 80007ec:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007ee:	233c      	movs	r3, #60	; 0x3c
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80007f6:	2310      	movs	r3, #16
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80007fa:	2311      	movs	r3, #17
 80007fc:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007fe:	2300      	movs	r3, #0
 8000800:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000802:	2308      	movs	r3, #8
 8000804:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000806:	230f      	movs	r3, #15
 8000808:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800080a:	2309      	movs	r3, #9
 800080c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000812:	2310      	movs	r3, #16
 8000814:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000816:	2311      	movs	r3, #17
 8000818:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800081e:	463a      	mov	r2, r7
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_FSMC_Init+0xec>)
 8000828:	f004 fa6e 	bl	8004d08 <HAL_SRAM_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000832:	f000 fff9 	bl	8001828 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000836:	bf00      	nop
 8000838:	3738      	adds	r7, #56	; 0x38
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000074 	.word	0x20000074
 8000844:	a0000104 	.word	0xa0000104

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
 8000862:	4b69      	ldr	r3, [pc, #420]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a68      	ldr	r2, [pc, #416]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 8000868:	f043 0310 	orr.w	r3, r3, #16
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b66      	ldr	r3, [pc, #408]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0310 	and.w	r3, r3, #16
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	4b62      	ldr	r3, [pc, #392]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a61      	ldr	r2, [pc, #388]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b5f      	ldr	r3, [pc, #380]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b5b      	ldr	r3, [pc, #364]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a5a      	ldr	r2, [pc, #360]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b58      	ldr	r3, [pc, #352]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b54      	ldr	r3, [pc, #336]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a53      	ldr	r2, [pc, #332]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b51      	ldr	r3, [pc, #324]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	4b4d      	ldr	r3, [pc, #308]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a4c      	ldr	r2, [pc, #304]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b4a      	ldr	r3, [pc, #296]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b46      	ldr	r3, [pc, #280]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a45      	ldr	r2, [pc, #276]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 80008f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b3f      	ldr	r3, [pc, #252]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a3e      	ldr	r2, [pc, #248]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b3c      	ldr	r3, [pc, #240]	; (8000a08 <MX_GPIO_Init+0x1c0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_DEBUG_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2170      	movs	r1, #112	; 0x70
 8000926:	4839      	ldr	r0, [pc, #228]	; (8000a0c <MX_GPIO_Init+0x1c4>)
 8000928:	f001 feb0 	bl	800268c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|INPUT_X2_Pin|INPUT_X3_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f242 0130 	movw	r1, #8240	; 0x2030
 8000932:	4837      	ldr	r0, [pc, #220]	; (8000a10 <MX_GPIO_Init+0x1c8>)
 8000934:	f001 feaa 	bl	800268c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INPUT_X1_Pin|FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800093e:	4835      	ldr	r0, [pc, #212]	; (8000a14 <MX_GPIO_Init+0x1cc>)
 8000940:	f001 fea4 	bl	800268c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2140      	movs	r1, #64	; 0x40
 8000948:	4833      	ldr	r0, [pc, #204]	; (8000a18 <MX_GPIO_Init+0x1d0>)
 800094a:	f001 fe9f 	bl	800268c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2108      	movs	r1, #8
 8000952:	4832      	ldr	r0, [pc, #200]	; (8000a1c <MX_GPIO_Init+0x1d4>)
 8000954:	f001 fe9a 	bl	800268c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_DEBUG_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000958:	2370      	movs	r3, #112	; 0x70
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4827      	ldr	r0, [pc, #156]	; (8000a0c <MX_GPIO_Init+0x1c4>)
 8000970:	f001 fcf0 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin INPUT_X2_Pin INPUT_X3_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|INPUT_X2_Pin|INPUT_X3_Pin;
 8000974:	f242 0330 	movw	r3, #8240	; 0x2030
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4820      	ldr	r0, [pc, #128]	; (8000a10 <MX_GPIO_Init+0x1c8>)
 800098e:	f001 fce1 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_X0_Pin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin;
 8000992:	2340      	movs	r3, #64	; 0x40
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INPUT_X0_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	481b      	ldr	r0, [pc, #108]	; (8000a14 <MX_GPIO_Init+0x1cc>)
 80009a6:	f001 fcd5 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X1_Pin FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = INPUT_X1_Pin|FSMC_BLK_Pin;
 80009aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4814      	ldr	r0, [pc, #80]	; (8000a14 <MX_GPIO_Init+0x1cc>)
 80009c4:	f001 fcc6 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_LATCH_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80009c8:	2340      	movs	r3, #64	; 0x40
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	480e      	ldr	r0, [pc, #56]	; (8000a18 <MX_GPIO_Init+0x1d0>)
 80009e0:	f001 fcb8 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80009e4:	2308      	movs	r3, #8
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4808      	ldr	r0, [pc, #32]	; (8000a1c <MX_GPIO_Init+0x1d4>)
 80009fc:	f001 fcaa 	bl	8002354 <HAL_GPIO_Init>

}
 8000a00:	bf00      	nop
 8000a02:	3730      	adds	r7, #48	; 0x30
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40020800 	.word	0x40020800
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40021800 	.word	0x40021800
 8000a1c:	40020c00 	.word	0x40020c00

08000a20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a26:	4a13      	ldr	r2, [pc, #76]	; (8000a74 <MX_I2C1_Init+0x54>)
 8000a28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a2c:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <MX_I2C1_Init+0x58>)
 8000a2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_I2C1_Init+0x50>)
 8000a5e:	f001 fe49 	bl	80026f4 <HAL_I2C_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 fede 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200000c4 	.word	0x200000c4
 8000a74:	40005400 	.word	0x40005400
 8000a78:	000186a0 	.word	0x000186a0

08000a7c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <LCD_WR_REG+0x1c>)
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	8013      	strh	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	600ffffe 	.word	0x600ffffe

08000a9c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <LCD_WR_DATA+0x1c>)
 8000aa8:	88fb      	ldrh	r3, [r7, #6]
 8000aaa:	8053      	strh	r3, [r2, #2]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	600ffffe 	.word	0x600ffffe

08000abc <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <LCD_RD_DATA+0x20>)
 8000ac4:	885b      	ldrh	r3, [r3, #2]
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	b29b      	uxth	r3, r3
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	600ffffe 	.word	0x600ffffe

08000ae0 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	4608      	mov	r0, r1
 8000aea:	4611      	mov	r1, r2
 8000aec:	461a      	mov	r2, r3
 8000aee:	4623      	mov	r3, r4
 8000af0:	80fb      	strh	r3, [r7, #6]
 8000af2:	4603      	mov	r3, r0
 8000af4:	80bb      	strh	r3, [r7, #4]
 8000af6:	460b      	mov	r3, r1
 8000af8:	807b      	strh	r3, [r7, #2]
 8000afa:	4613      	mov	r3, r2
 8000afc:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000afe:	202a      	movs	r0, #42	; 0x2a
 8000b00:	f7ff ffbc 	bl	8000a7c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	0a1b      	lsrs	r3, r3, #8
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ffc6 	bl	8000a9c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ffc0 	bl	8000a9c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000b1c:	887b      	ldrh	r3, [r7, #2]
 8000b1e:	0a1b      	lsrs	r3, r3, #8
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ffba 	bl	8000a9c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000b28:	887b      	ldrh	r3, [r7, #2]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ffb4 	bl	8000a9c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000b34:	202b      	movs	r0, #43	; 0x2b
 8000b36:	f7ff ffa1 	bl	8000a7c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000b3a:	88bb      	ldrh	r3, [r7, #4]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ffab 	bl	8000a9c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000b46:	88bb      	ldrh	r3, [r7, #4]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ffa5 	bl	8000a9c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000b52:	883b      	ldrh	r3, [r7, #0]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff9f 	bl	8000a9c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000b5e:	883b      	ldrh	r3, [r7, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff99 	bl	8000a9c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000b6a:	202c      	movs	r0, #44	; 0x2c
 8000b6c:	f7ff ff86 	bl	8000a7c <LCD_WR_REG>
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd90      	pop	{r4, r7, pc}

08000b78 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4604      	mov	r4, r0
 8000b80:	4608      	mov	r0, r1
 8000b82:	4611      	mov	r1, r2
 8000b84:	461a      	mov	r2, r3
 8000b86:	4623      	mov	r3, r4
 8000b88:	80fb      	strh	r3, [r7, #6]
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80bb      	strh	r3, [r7, #4]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	807b      	strh	r3, [r7, #2]
 8000b92:	4613      	mov	r3, r2
 8000b94:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	883b      	ldrh	r3, [r7, #0]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	88b9      	ldrh	r1, [r7, #4]
 8000ba4:	88f8      	ldrh	r0, [r7, #6]
 8000ba6:	f7ff ff9b 	bl	8000ae0 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000baa:	88bb      	ldrh	r3, [r7, #4]
 8000bac:	81fb      	strh	r3, [r7, #14]
 8000bae:	e010      	b.n	8000bd2 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	81bb      	strh	r3, [r7, #12]
 8000bb4:	e006      	b.n	8000bc4 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000bb6:	8c3b      	ldrh	r3, [r7, #32]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff6f 	bl	8000a9c <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000bbe:	89bb      	ldrh	r3, [r7, #12]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	81bb      	strh	r3, [r7, #12]
 8000bc4:	89ba      	ldrh	r2, [r7, #12]
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d3f4      	bcc.n	8000bb6 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000bcc:	89fb      	ldrh	r3, [r7, #14]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	81fb      	strh	r3, [r7, #14]
 8000bd2:	89fa      	ldrh	r2, [r7, #14]
 8000bd4:	883b      	ldrh	r3, [r7, #0]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d3ea      	bcc.n	8000bb0 <lcd_Fill+0x38>
		}
	}
}
 8000bda:	bf00      	nop
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd90      	pop	{r4, r7, pc}

08000be4 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	80fb      	strh	r3, [r7, #6]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	80bb      	strh	r3, [r7, #4]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000bf6:	88bb      	ldrh	r3, [r7, #4]
 8000bf8:	88fa      	ldrh	r2, [r7, #6]
 8000bfa:	88b9      	ldrh	r1, [r7, #4]
 8000bfc:	88f8      	ldrh	r0, [r7, #6]
 8000bfe:	f7ff ff6f 	bl	8000ae0 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff49 	bl	8000a9c <LCD_WR_DATA>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b087      	sub	sp, #28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	4611      	mov	r1, r2
 8000c20:	461a      	mov	r2, r3
 8000c22:	4623      	mov	r3, r4
 8000c24:	80fb      	strh	r3, [r7, #6]
 8000c26:	4603      	mov	r3, r0
 8000c28:	80bb      	strh	r3, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	70fb      	strb	r3, [r7, #3]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000c3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c3e:	085b      	lsrs	r3, r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	08db      	lsrs	r3, r3, #3
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	f003 0307 	and.w	r3, r3, #7
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bf14      	ite	ne
 8000c56:	2301      	movne	r3, #1
 8000c58:	2300      	moveq	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	4413      	add	r3, r2
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	fb12 f303 	smulbb	r3, r2, r3
 8000c6a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	3b20      	subs	r3, #32
 8000c70:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	4413      	add	r3, r2
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	b29c      	uxth	r4, r3
 8000c80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	88bb      	ldrh	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	88b9      	ldrh	r1, [r7, #4]
 8000c92:	88f8      	ldrh	r0, [r7, #6]
 8000c94:	4622      	mov	r2, r4
 8000c96:	f7ff ff23 	bl	8000ae0 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	827b      	strh	r3, [r7, #18]
 8000c9e:	e07a      	b.n	8000d96 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000ca0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ca4:	2b0c      	cmp	r3, #12
 8000ca6:	d028      	beq.n	8000cfa <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000ca8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cac:	2b10      	cmp	r3, #16
 8000cae:	d108      	bne.n	8000cc2 <lcd_ShowChar+0xae>
 8000cb0:	78fa      	ldrb	r2, [r7, #3]
 8000cb2:	8a7b      	ldrh	r3, [r7, #18]
 8000cb4:	493c      	ldr	r1, [pc, #240]	; (8000da8 <lcd_ShowChar+0x194>)
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	440a      	add	r2, r1
 8000cba:	4413      	add	r3, r2
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	75fb      	strb	r3, [r7, #23]
 8000cc0:	e01b      	b.n	8000cfa <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000cc2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cc6:	2b18      	cmp	r3, #24
 8000cc8:	d10b      	bne.n	8000ce2 <lcd_ShowChar+0xce>
 8000cca:	78fa      	ldrb	r2, [r7, #3]
 8000ccc:	8a79      	ldrh	r1, [r7, #18]
 8000cce:	4837      	ldr	r0, [pc, #220]	; (8000dac <lcd_ShowChar+0x198>)
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	011b      	lsls	r3, r3, #4
 8000cd8:	4403      	add	r3, r0
 8000cda:	440b      	add	r3, r1
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	75fb      	strb	r3, [r7, #23]
 8000ce0:	e00b      	b.n	8000cfa <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000ce2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ce6:	2b20      	cmp	r3, #32
 8000ce8:	d15a      	bne.n	8000da0 <lcd_ShowChar+0x18c>
 8000cea:	78fa      	ldrb	r2, [r7, #3]
 8000cec:	8a7b      	ldrh	r3, [r7, #18]
 8000cee:	4930      	ldr	r1, [pc, #192]	; (8000db0 <lcd_ShowChar+0x19c>)
 8000cf0:	0192      	lsls	r2, r2, #6
 8000cf2:	440a      	add	r2, r1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	75bb      	strb	r3, [r7, #22]
 8000cfe:	e044      	b.n	8000d8a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000d00:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d120      	bne.n	8000d4a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000d08:	7dfa      	ldrb	r2, [r7, #23]
 8000d0a:	7dbb      	ldrb	r3, [r7, #22]
 8000d0c:	fa42 f303 	asr.w	r3, r2, r3
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d004      	beq.n	8000d22 <lcd_ShowChar+0x10e>
 8000d18:	883b      	ldrh	r3, [r7, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff febe 	bl	8000a9c <LCD_WR_DATA>
 8000d20:	e003      	b.n	8000d2a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000d22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff feb9 	bl	8000a9c <LCD_WR_DATA>
				m++;
 8000d2a:	7d7b      	ldrb	r3, [r7, #21]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000d30:	7d7b      	ldrb	r3, [r7, #21]
 8000d32:	7bfa      	ldrb	r2, [r7, #15]
 8000d34:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d38:	fb02 f201 	mul.w	r2, r2, r1
 8000d3c:	1a9b      	subs	r3, r3, r2
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d11f      	bne.n	8000d84 <lcd_ShowChar+0x170>
				{
					m=0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	757b      	strb	r3, [r7, #21]
					break;
 8000d48:	e022      	b.n	8000d90 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000d4a:	7dfa      	ldrb	r2, [r7, #23]
 8000d4c:	7dbb      	ldrb	r3, [r7, #22]
 8000d4e:	fa42 f303 	asr.w	r3, r2, r3
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d005      	beq.n	8000d66 <lcd_ShowChar+0x152>
 8000d5a:	883a      	ldrh	r2, [r7, #0]
 8000d5c:	88b9      	ldrh	r1, [r7, #4]
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff3f 	bl	8000be4 <lcd_DrawPoint>
				x++;
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000d6c:	88fa      	ldrh	r2, [r7, #6]
 8000d6e:	8a3b      	ldrh	r3, [r7, #16]
 8000d70:	1ad2      	subs	r2, r2, r3
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d105      	bne.n	8000d84 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000d78:	8a3b      	ldrh	r3, [r7, #16]
 8000d7a:	80fb      	strh	r3, [r7, #6]
					y++;
 8000d7c:	88bb      	ldrh	r3, [r7, #4]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	80bb      	strh	r3, [r7, #4]
					break;
 8000d82:	e005      	b.n	8000d90 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000d84:	7dbb      	ldrb	r3, [r7, #22]
 8000d86:	3301      	adds	r3, #1
 8000d88:	75bb      	strb	r3, [r7, #22]
 8000d8a:	7dbb      	ldrb	r3, [r7, #22]
 8000d8c:	2b07      	cmp	r3, #7
 8000d8e:	d9b7      	bls.n	8000d00 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000d90:	8a7b      	ldrh	r3, [r7, #18]
 8000d92:	3301      	adds	r3, #1
 8000d94:	827b      	strh	r3, [r7, #18]
 8000d96:	8a7a      	ldrh	r2, [r7, #18]
 8000d98:	89bb      	ldrh	r3, [r7, #12]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d380      	bcc.n	8000ca0 <lcd_ShowChar+0x8c>
 8000d9e:	e000      	b.n	8000da2 <lcd_ShowChar+0x18e>
		else return;
 8000da0:	bf00      	nop
				}
			}
		}
	}
}
 8000da2:	371c      	adds	r7, #28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	08006854 	.word	0x08006854
 8000dac:	08006e44 	.word	0x08006e44
 8000db0:	08008014 	.word	0x08008014

08000db4 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	71fb      	strb	r3, [r7, #7]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000dc8:	e004      	b.n	8000dd4 <mypow+0x20>
 8000dca:	79fa      	ldrb	r2, [r7, #7]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	79bb      	ldrb	r3, [r7, #6]
 8000dd6:	1e5a      	subs	r2, r3, #1
 8000dd8:	71ba      	strb	r2, [r7, #6]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f5      	bne.n	8000dca <mypow+0x16>
	return result;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af04      	add	r7, sp, #16
 8000df2:	4604      	mov	r4, r0
 8000df4:	4608      	mov	r0, r1
 8000df6:	4611      	mov	r1, r2
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	80fb      	strh	r3, [r7, #6]
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80bb      	strh	r3, [r7, #4]
 8000e02:	460b      	mov	r3, r1
 8000e04:	807b      	strh	r3, [r7, #2]
 8000e06:	4613      	mov	r3, r2
 8000e08:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000e0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e12:	085b      	lsrs	r3, r3, #1
 8000e14:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	e059      	b.n	8000ed0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000e1c:	887c      	ldrh	r4, [r7, #2]
 8000e1e:	787a      	ldrb	r2, [r7, #1]
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	200a      	movs	r0, #10
 8000e2e:	f7ff ffc1 	bl	8000db4 <mypow>
 8000e32:	4603      	mov	r3, r0
 8000e34:	fbb4 f1f3 	udiv	r1, r4, r3
 8000e38:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <lcd_ShowIntNum+0xf8>)
 8000e3a:	fba3 2301 	umull	r2, r3, r3, r1
 8000e3e:	08da      	lsrs	r2, r3, #3
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	1aca      	subs	r2, r1, r3
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000e4e:	7bbb      	ldrb	r3, [r7, #14]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d121      	bne.n	8000e98 <lcd_ShowIntNum+0xac>
 8000e54:	7bfa      	ldrb	r2, [r7, #15]
 8000e56:	787b      	ldrb	r3, [r7, #1]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	da1c      	bge.n	8000e98 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000e5e:	7b3b      	ldrb	r3, [r7, #12]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d117      	bne.n	8000e94 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	7b7b      	ldrb	r3, [r7, #13]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	fb12 f303 	smulbb	r3, r2, r3
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	4413      	add	r3, r2
 8000e76:	b298      	uxth	r0, r3
 8000e78:	8c3a      	ldrh	r2, [r7, #32]
 8000e7a:	88b9      	ldrh	r1, [r7, #4]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	9302      	str	r3, [sp, #8]
 8000e80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e84:	9301      	str	r3, [sp, #4]
 8000e86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	2220      	movs	r2, #32
 8000e8e:	f7ff fec1 	bl	8000c14 <lcd_ShowChar>
				continue;
 8000e92:	e01a      	b.n	8000eca <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	7b7b      	ldrb	r3, [r7, #13]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	fb12 f303 	smulbb	r3, r2, r3
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b298      	uxth	r0, r3
 8000eac:	7b3b      	ldrb	r3, [r7, #12]
 8000eae:	3330      	adds	r3, #48	; 0x30
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	8c3c      	ldrh	r4, [r7, #32]
 8000eb4:	88b9      	ldrh	r1, [r7, #4]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	4623      	mov	r3, r4
 8000ec6:	f7ff fea5 	bl	8000c14 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	787b      	ldrb	r3, [r7, #1]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d3a1      	bcc.n	8000e1c <lcd_ShowIntNum+0x30>
	}
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd90      	pop	{r4, r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	cccccccd 	.word	0xcccccccd

08000ee8 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4604      	mov	r4, r0
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	80fb      	strh	r3, [r7, #6]
 8000efa:	4603      	mov	r3, r0
 8000efc:	80bb      	strh	r3, [r7, #4]
 8000efe:	460b      	mov	r3, r1
 8000f00:	807b      	strh	r3, [r7, #2]
 8000f02:	4613      	mov	r3, r2
 8000f04:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8000f0a:	88fa      	ldrh	r2, [r7, #6]
 8000f0c:	887b      	ldrh	r3, [r7, #2]
 8000f0e:	4413      	add	r3, r2
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	3b01      	subs	r3, #1
 8000f14:	b29c      	uxth	r4, r3
 8000f16:	88ba      	ldrh	r2, [r7, #4]
 8000f18:	883b      	ldrh	r3, [r7, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	88b9      	ldrh	r1, [r7, #4]
 8000f24:	88f8      	ldrh	r0, [r7, #6]
 8000f26:	4622      	mov	r2, r4
 8000f28:	f7ff fdda 	bl	8000ae0 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	82fb      	strh	r3, [r7, #22]
 8000f30:	e027      	b.n	8000f82 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	82bb      	strh	r3, [r7, #20]
 8000f36:	e01d      	b.n	8000f74 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f3e:	4413      	add	r3, r2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	3301      	adds	r3, #1
 8000f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	7bbb      	ldrb	r3, [r7, #14]
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fd9a 	bl	8000a9c <LCD_WR_DATA>
			k++;
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8000f6e:	8abb      	ldrh	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	82bb      	strh	r3, [r7, #20]
 8000f74:	8aba      	ldrh	r2, [r7, #20]
 8000f76:	883b      	ldrh	r3, [r7, #0]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d3dd      	bcc.n	8000f38 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8000f7c:	8afb      	ldrh	r3, [r7, #22]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	82fb      	strh	r3, [r7, #22]
 8000f82:	8afa      	ldrh	r2, [r7, #22]
 8000f84:	887b      	ldrh	r3, [r7, #2]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d3d3      	bcc.n	8000f32 <lcd_ShowPicture+0x4a>
		}
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd90      	pop	{r4, r7, pc}

08000f94 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d007      	beq.n	8000fbe <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <lcd_SetDir+0x44>)
 8000fb0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000fb4:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <lcd_SetDir+0x44>)
 8000fb8:	22f0      	movs	r2, #240	; 0xf0
 8000fba:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000fbc:	e006      	b.n	8000fcc <lcd_SetDir+0x38>
		lcddev.width=240;
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <lcd_SetDir+0x44>)
 8000fc0:	22f0      	movs	r2, #240	; 0xf0
 8000fc2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <lcd_SetDir+0x44>)
 8000fc6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000fca:	805a      	strh	r2, [r3, #2]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	20000118 	.word	0x20000118

08000fdc <lcd_init>:


void lcd_init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe6:	48aa      	ldr	r0, [pc, #680]	; (8001290 <lcd_init+0x2b4>)
 8000fe8:	f001 fb50 	bl	800268c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000fec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ff0:	f000 ffe8 	bl	8001fc4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffa:	48a5      	ldr	r0, [pc, #660]	; (8001290 <lcd_init+0x2b4>)
 8000ffc:	f001 fb46 	bl	800268c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001000:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001004:	f000 ffde 	bl	8001fc4 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff ffc3 	bl	8000f94 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800100e:	20d3      	movs	r0, #211	; 0xd3
 8001010:	f7ff fd34 	bl	8000a7c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001014:	f7ff fd52 	bl	8000abc <LCD_RD_DATA>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	4b9d      	ldr	r3, [pc, #628]	; (8001294 <lcd_init+0x2b8>)
 800101e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001020:	f7ff fd4c 	bl	8000abc <LCD_RD_DATA>
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	4b9a      	ldr	r3, [pc, #616]	; (8001294 <lcd_init+0x2b8>)
 800102a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800102c:	f7ff fd46 	bl	8000abc <LCD_RD_DATA>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4b97      	ldr	r3, [pc, #604]	; (8001294 <lcd_init+0x2b8>)
 8001036:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001038:	4b96      	ldr	r3, [pc, #600]	; (8001294 <lcd_init+0x2b8>)
 800103a:	889b      	ldrh	r3, [r3, #4]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b94      	ldr	r3, [pc, #592]	; (8001294 <lcd_init+0x2b8>)
 8001042:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001044:	f7ff fd3a 	bl	8000abc <LCD_RD_DATA>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	4b91      	ldr	r3, [pc, #580]	; (8001294 <lcd_init+0x2b8>)
 800104e:	889b      	ldrh	r3, [r3, #4]
 8001050:	4313      	orrs	r3, r2
 8001052:	b29a      	uxth	r2, r3
 8001054:	4b8f      	ldr	r3, [pc, #572]	; (8001294 <lcd_init+0x2b8>)
 8001056:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001058:	20cf      	movs	r0, #207	; 0xcf
 800105a:	f7ff fd0f 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff fd1c 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001064:	20c1      	movs	r0, #193	; 0xc1
 8001066:	f7ff fd19 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800106a:	2030      	movs	r0, #48	; 0x30
 800106c:	f7ff fd16 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001070:	20ed      	movs	r0, #237	; 0xed
 8001072:	f7ff fd03 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001076:	2064      	movs	r0, #100	; 0x64
 8001078:	f7ff fd10 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800107c:	2003      	movs	r0, #3
 800107e:	f7ff fd0d 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001082:	2012      	movs	r0, #18
 8001084:	f7ff fd0a 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001088:	2081      	movs	r0, #129	; 0x81
 800108a:	f7ff fd07 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800108e:	20e8      	movs	r0, #232	; 0xe8
 8001090:	f7ff fcf4 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001094:	2085      	movs	r0, #133	; 0x85
 8001096:	f7ff fd01 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800109a:	2010      	movs	r0, #16
 800109c:	f7ff fcfe 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80010a0:	207a      	movs	r0, #122	; 0x7a
 80010a2:	f7ff fcfb 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80010a6:	20cb      	movs	r0, #203	; 0xcb
 80010a8:	f7ff fce8 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80010ac:	2039      	movs	r0, #57	; 0x39
 80010ae:	f7ff fcf5 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80010b2:	202c      	movs	r0, #44	; 0x2c
 80010b4:	f7ff fcf2 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff fcef 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80010be:	2034      	movs	r0, #52	; 0x34
 80010c0:	f7ff fcec 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80010c4:	2002      	movs	r0, #2
 80010c6:	f7ff fce9 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80010ca:	20f7      	movs	r0, #247	; 0xf7
 80010cc:	f7ff fcd6 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80010d0:	2020      	movs	r0, #32
 80010d2:	f7ff fce3 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80010d6:	20ea      	movs	r0, #234	; 0xea
 80010d8:	f7ff fcd0 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff fcdd 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff fcda 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80010e8:	20c0      	movs	r0, #192	; 0xc0
 80010ea:	f7ff fcc7 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80010ee:	201b      	movs	r0, #27
 80010f0:	f7ff fcd4 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80010f4:	20c1      	movs	r0, #193	; 0xc1
 80010f6:	f7ff fcc1 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80010fa:	2001      	movs	r0, #1
 80010fc:	f7ff fcce 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001100:	20c5      	movs	r0, #197	; 0xc5
 8001102:	f7ff fcbb 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001106:	2030      	movs	r0, #48	; 0x30
 8001108:	f7ff fcc8 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800110c:	2030      	movs	r0, #48	; 0x30
 800110e:	f7ff fcc5 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001112:	20c7      	movs	r0, #199	; 0xc7
 8001114:	f7ff fcb2 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001118:	20b7      	movs	r0, #183	; 0xb7
 800111a:	f7ff fcbf 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800111e:	2036      	movs	r0, #54	; 0x36
 8001120:	f7ff fcac 	bl	8000a7c <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001124:	2008      	movs	r0, #8
 8001126:	f7ff fcb9 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800112a:	203a      	movs	r0, #58	; 0x3a
 800112c:	f7ff fca6 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001130:	2055      	movs	r0, #85	; 0x55
 8001132:	f7ff fcb3 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001136:	20b1      	movs	r0, #177	; 0xb1
 8001138:	f7ff fca0 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff fcad 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001142:	201a      	movs	r0, #26
 8001144:	f7ff fcaa 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001148:	20b6      	movs	r0, #182	; 0xb6
 800114a:	f7ff fc97 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800114e:	200a      	movs	r0, #10
 8001150:	f7ff fca4 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001154:	20a2      	movs	r0, #162	; 0xa2
 8001156:	f7ff fca1 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800115a:	20f2      	movs	r0, #242	; 0xf2
 800115c:	f7ff fc8e 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fc9b 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001166:	2026      	movs	r0, #38	; 0x26
 8001168:	f7ff fc88 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fc95 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001172:	20e0      	movs	r0, #224	; 0xe0
 8001174:	f7ff fc82 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001178:	200f      	movs	r0, #15
 800117a:	f7ff fc8f 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800117e:	202a      	movs	r0, #42	; 0x2a
 8001180:	f7ff fc8c 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001184:	2028      	movs	r0, #40	; 0x28
 8001186:	f7ff fc89 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800118a:	2008      	movs	r0, #8
 800118c:	f7ff fc86 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001190:	200e      	movs	r0, #14
 8001192:	f7ff fc83 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001196:	2008      	movs	r0, #8
 8001198:	f7ff fc80 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800119c:	2054      	movs	r0, #84	; 0x54
 800119e:	f7ff fc7d 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80011a2:	20a9      	movs	r0, #169	; 0xa9
 80011a4:	f7ff fc7a 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80011a8:	2043      	movs	r0, #67	; 0x43
 80011aa:	f7ff fc77 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80011ae:	200a      	movs	r0, #10
 80011b0:	f7ff fc74 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80011b4:	200f      	movs	r0, #15
 80011b6:	f7ff fc71 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff fc6e 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fc6b 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f7ff fc68 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff fc65 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80011d2:	20e1      	movs	r0, #225	; 0xe1
 80011d4:	f7ff fc52 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fc5f 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80011de:	2015      	movs	r0, #21
 80011e0:	f7ff fc5c 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80011e4:	2017      	movs	r0, #23
 80011e6:	f7ff fc59 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80011ea:	2007      	movs	r0, #7
 80011ec:	f7ff fc56 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80011f0:	2011      	movs	r0, #17
 80011f2:	f7ff fc53 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80011f6:	2006      	movs	r0, #6
 80011f8:	f7ff fc50 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80011fc:	202b      	movs	r0, #43	; 0x2b
 80011fe:	f7ff fc4d 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001202:	2056      	movs	r0, #86	; 0x56
 8001204:	f7ff fc4a 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001208:	203c      	movs	r0, #60	; 0x3c
 800120a:	f7ff fc47 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800120e:	2005      	movs	r0, #5
 8001210:	f7ff fc44 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001214:	2010      	movs	r0, #16
 8001216:	f7ff fc41 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800121a:	200f      	movs	r0, #15
 800121c:	f7ff fc3e 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001220:	203f      	movs	r0, #63	; 0x3f
 8001222:	f7ff fc3b 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001226:	203f      	movs	r0, #63	; 0x3f
 8001228:	f7ff fc38 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800122c:	200f      	movs	r0, #15
 800122e:	f7ff fc35 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001232:	202b      	movs	r0, #43	; 0x2b
 8001234:	f7ff fc22 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fc2f 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff fc2c 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff fc29 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800124a:	203f      	movs	r0, #63	; 0x3f
 800124c:	f7ff fc26 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001250:	202a      	movs	r0, #42	; 0x2a
 8001252:	f7ff fc13 	bl	8000a7c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff fc20 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff fc1d 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff fc1a 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001268:	20ef      	movs	r0, #239	; 0xef
 800126a:	f7ff fc17 	bl	8000a9c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800126e:	2011      	movs	r0, #17
 8001270:	f7ff fc04 	bl	8000a7c <LCD_WR_REG>
	HAL_Delay(120);
 8001274:	2078      	movs	r0, #120	; 0x78
 8001276:	f000 fea5 	bl	8001fc4 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800127a:	2029      	movs	r0, #41	; 0x29
 800127c:	f7ff fbfe 	bl	8000a7c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001286:	4804      	ldr	r0, [pc, #16]	; (8001298 <lcd_init+0x2bc>)
 8001288:	f001 fa00 	bl	800268c <HAL_GPIO_WritePin>
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40020800 	.word	0x40020800
 8001294:	20000118 	.word	0x20000118
 8001298:	40020000 	.word	0x40020000

0800129c <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b08b      	sub	sp, #44	; 0x2c
 80012a0:	af04      	add	r7, sp, #16
 80012a2:	60ba      	str	r2, [r7, #8]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4603      	mov	r3, r0
 80012a8:	81fb      	strh	r3, [r7, #14]
 80012aa:	460b      	mov	r3, r1
 80012ac:	81bb      	strh	r3, [r7, #12]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80012b2:	89fb      	ldrh	r3, [r7, #14]
 80012b4:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80012ba:	e048      	b.n	800134e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d145      	bne.n	800134e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80012c2:	89fa      	ldrh	r2, [r7, #14]
 80012c4:	4b26      	ldr	r3, [pc, #152]	; (8001360 <lcd_ShowStr+0xc4>)
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012ce:	085b      	lsrs	r3, r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	1acb      	subs	r3, r1, r3
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dc3f      	bgt.n	8001358 <lcd_ShowStr+0xbc>
 80012d8:	89ba      	ldrh	r2, [r7, #12]
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <lcd_ShowStr+0xc4>)
 80012dc:	885b      	ldrh	r3, [r3, #2]
 80012de:	4619      	mov	r1, r3
 80012e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012e4:	1acb      	subs	r3, r1, r3
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dc36      	bgt.n	8001358 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b80      	cmp	r3, #128	; 0x80
 80012f0:	d902      	bls.n	80012f8 <lcd_ShowStr+0x5c>
 80012f2:	2301      	movs	r3, #1
 80012f4:	75fb      	strb	r3, [r7, #23]
 80012f6:	e02a      	b.n	800134e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b0d      	cmp	r3, #13
 80012fe:	d10b      	bne.n	8001318 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001300:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001304:	b29a      	uxth	r2, r3
 8001306:	89bb      	ldrh	r3, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 800130c:	8abb      	ldrh	r3, [r7, #20]
 800130e:	81fb      	strh	r3, [r7, #14]
					str++;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3301      	adds	r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	e017      	b.n	8001348 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	781a      	ldrb	r2, [r3, #0]
 800131c:	88fc      	ldrh	r4, [r7, #6]
 800131e:	89b9      	ldrh	r1, [r7, #12]
 8001320:	89f8      	ldrh	r0, [r7, #14]
 8001322:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	4623      	mov	r3, r4
 8001334:	f7ff fc6e 	bl	8000c14 <lcd_ShowChar>
					x+=sizey/2;
 8001338:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800133c:	085b      	lsrs	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	b29a      	uxth	r2, r3
 8001342:	89fb      	ldrh	r3, [r7, #14]
 8001344:	4413      	add	r3, r2
 8001346:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3301      	adds	r3, #1
 800134c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1b2      	bne.n	80012bc <lcd_ShowStr+0x20>
 8001356:	e000      	b.n	800135a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001358:	bf00      	nop
			}
		}
	}
}
 800135a:	371c      	adds	r7, #28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd90      	pop	{r4, r7, pc}
 8001360:	20000118 	.word	0x20000118

08001364 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af04      	add	r7, sp, #16
 800136a:	60ba      	str	r2, [r7, #8]
 800136c:	461a      	mov	r2, r3
 800136e:	4603      	mov	r3, r0
 8001370:	81fb      	strh	r3, [r7, #14]
 8001372:	460b      	mov	r3, r1
 8001374:	81bb      	strh	r3, [r7, #12]
 8001376:	4613      	mov	r3, r2
 8001378:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800137a:	68b8      	ldr	r0, [r7, #8]
 800137c:	f7fe ff24 	bl	80001c8 <strlen>
 8001380:	4603      	mov	r3, r0
 8001382:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <lcd_StrCenter+0x60>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	8afb      	ldrh	r3, [r7, #22]
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	0fda      	lsrs	r2, r3, #31
 8001392:	4413      	add	r3, r2
 8001394:	105b      	asrs	r3, r3, #1
 8001396:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001398:	89fa      	ldrh	r2, [r7, #14]
 800139a:	8abb      	ldrh	r3, [r7, #20]
 800139c:	4413      	add	r3, r2
 800139e:	b298      	uxth	r0, r3
 80013a0:	88fa      	ldrh	r2, [r7, #6]
 80013a2:	89b9      	ldrh	r1, [r7, #12]
 80013a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013a8:	9302      	str	r3, [sp, #8]
 80013aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	8c3b      	ldrh	r3, [r7, #32]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	4613      	mov	r3, r2
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	f7ff ff70 	bl	800129c <lcd_ShowStr>
}
 80013bc:	bf00      	nop
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000118 	.word	0x20000118

080013c8 <led7_init>:
uint8_t led7seg[4] = {0, 1, 2, 3}; //4 index
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;
uint16_t led7_index = 0;

void led7_init(){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80013cc:	2201      	movs	r2, #1
 80013ce:	2140      	movs	r1, #64	; 0x40
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <led7_init+0x14>)
 80013d2:	f001 f95b 	bl	800268c <HAL_GPIO_WritePin>
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40021800 	.word	0x40021800

080013e0 <led7_Scan>:

void led7_Scan(){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80013e4:	4b3f      	ldr	r3, [pc, #252]	; (80014e4 <led7_Scan+0x104>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <led7_Scan+0x104>)
 80013ee:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80013f0:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <led7_Scan+0x108>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <led7_Scan+0x10c>)
 80013f8:	5c9b      	ldrb	r3, [r3, r2]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	4b39      	ldr	r3, [pc, #228]	; (80014e4 <led7_Scan+0x104>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	b21b      	sxth	r3, r3
 8001404:	4313      	orrs	r3, r2
 8001406:	b21b      	sxth	r3, r3
 8001408:	b29a      	uxth	r2, r3
 800140a:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <led7_Scan+0x104>)
 800140c:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <led7_Scan+0x108>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d846      	bhi.n	80014a4 <led7_Scan+0xc4>
 8001416:	a201      	add	r2, pc, #4	; (adr r2, 800141c <led7_Scan+0x3c>)
 8001418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141c:	0800142d 	.word	0x0800142d
 8001420:	0800144b 	.word	0x0800144b
 8001424:	08001469 	.word	0x08001469
 8001428:	08001487 	.word	0x08001487
	case 0:
		spi_buffer |= 0x00b0;
 800142c:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <led7_Scan+0x104>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001434:	b29a      	uxth	r2, r3
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <led7_Scan+0x104>)
 8001438:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 800143a:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <led7_Scan+0x104>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <led7_Scan+0x104>)
 8001446:	801a      	strh	r2, [r3, #0]
		break;
 8001448:	e02d      	b.n	80014a6 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <led7_Scan+0x104>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <led7_Scan+0x104>)
 8001456:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001458:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <led7_Scan+0x104>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	f023 0320 	bic.w	r3, r3, #32
 8001460:	b29a      	uxth	r2, r3
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <led7_Scan+0x104>)
 8001464:	801a      	strh	r2, [r3, #0]
		break;
 8001466:	e01e      	b.n	80014a6 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <led7_Scan+0x104>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001470:	b29a      	uxth	r2, r3
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <led7_Scan+0x104>)
 8001474:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <led7_Scan+0x104>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	f023 0310 	bic.w	r3, r3, #16
 800147e:	b29a      	uxth	r2, r3
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <led7_Scan+0x104>)
 8001482:	801a      	strh	r2, [r3, #0]
		break;
 8001484:	e00f      	b.n	80014a6 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <led7_Scan+0x104>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800148e:	b29a      	uxth	r2, r3
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <led7_Scan+0x104>)
 8001492:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <led7_Scan+0x104>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <led7_Scan+0x104>)
 80014a0:	801a      	strh	r2, [r3, #0]
		break;
 80014a2:	e000      	b.n	80014a6 <led7_Scan+0xc6>
	default:
		break;
 80014a4:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <led7_Scan+0x108>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	425a      	negs	r2, r3
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	f002 0203 	and.w	r2, r2, #3
 80014b6:	bf58      	it	pl
 80014b8:	4253      	negpl	r3, r2
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <led7_Scan+0x108>)
 80014be:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2140      	movs	r1, #64	; 0x40
 80014c4:	480a      	ldr	r0, [pc, #40]	; (80014f0 <led7_Scan+0x110>)
 80014c6:	f001 f8e1 	bl	800268c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80014ca:	2301      	movs	r3, #1
 80014cc:	2202      	movs	r2, #2
 80014ce:	4905      	ldr	r1, [pc, #20]	; (80014e4 <led7_Scan+0x104>)
 80014d0:	4808      	ldr	r0, [pc, #32]	; (80014f4 <led7_Scan+0x114>)
 80014d2:	f002 fefa 	bl	80042ca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80014d6:	2201      	movs	r2, #1
 80014d8:	2140      	movs	r1, #64	; 0x40
 80014da:	4805      	ldr	r0, [pc, #20]	; (80014f0 <led7_Scan+0x110>)
 80014dc:	f001 f8d6 	bl	800268c <HAL_GPIO_WritePin>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000004 	.word	0x20000004
 80014e8:	20000032 	.word	0x20000032
 80014ec:	20000000 	.word	0x20000000
 80014f0:	40021800 	.word	0x40021800
 80014f4:	20000154 	.word	0x20000154

080014f8 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fc:	f000 fcf0 	bl	8001ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001500:	f000 f826 	bl	8001550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001504:	f7ff f9a0 	bl	8000848 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001508:	f000 fbee 	bl	8001ce8 <MX_TIM2_Init>
  MX_SPI1_Init();
 800150c:	f000 f9e2 	bl	80018d4 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001510:	f7ff f920 	bl	8000754 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001514:	f7ff fa84 	bl	8000a20 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001518:	f000 fc50 	bl	8001dbc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  system_init();
 800151c:	f000 f882 	bl	8001624 <system_init>
  updateTime();
 8001520:	f000 f8e4 	bl	80016ec <updateTime>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  while(!flag_timer2);
 8001524:	bf00      	nop
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <main+0x54>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0fb      	beq.n	8001526 <main+0x2e>
	  flag_timer2 = 0;
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <main+0x54>)
 8001530:	2200      	movs	r2, #0
 8001532:	801a      	strh	r2, [r3, #0]
	  test_led();
 8001534:	f000 f898 	bl	8001668 <test_led>
	  button_Scan();
 8001538:	f7fe ffd6 	bl	80004e8 <button_Scan>
	  test_lcd();
 800153c:	f000 f89e 	bl	800167c <test_lcd>
	  ds3231_ReadTime();
 8001540:	f7ff f8a4 	bl	800068c <ds3231_ReadTime>
	  displayTime();
 8001544:	f000 f8f2 	bl	800172c <displayTime>
	  while(!flag_timer2);
 8001548:	e7ec      	b.n	8001524 <main+0x2c>
 800154a:	bf00      	nop
 800154c:	20000034 	.word	0x20000034

08001550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b094      	sub	sp, #80	; 0x50
 8001554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	2230      	movs	r2, #48	; 0x30
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f005 f954 	bl	800680c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	4b28      	ldr	r3, [pc, #160]	; (800161c <SystemClock_Config+0xcc>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	4a27      	ldr	r2, [pc, #156]	; (800161c <SystemClock_Config+0xcc>)
 800157e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001582:	6413      	str	r3, [r2, #64]	; 0x40
 8001584:	4b25      	ldr	r3, [pc, #148]	; (800161c <SystemClock_Config+0xcc>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	4b22      	ldr	r3, [pc, #136]	; (8001620 <SystemClock_Config+0xd0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a21      	ldr	r2, [pc, #132]	; (8001620 <SystemClock_Config+0xd0>)
 800159a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <SystemClock_Config+0xd0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ac:	2302      	movs	r3, #2
 80015ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b0:	2301      	movs	r3, #1
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b4:	2310      	movs	r3, #16
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b8:	2302      	movs	r3, #2
 80015ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015bc:	2300      	movs	r3, #0
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015c0:	2308      	movs	r3, #8
 80015c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015c4:	23a8      	movs	r3, #168	; 0xa8
 80015c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015cc:	2304      	movs	r3, #4
 80015ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d0:	f107 0320 	add.w	r3, r7, #32
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 f97b 	bl	80038d0 <HAL_RCC_OscConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015e0:	f000 f922 	bl	8001828 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e4:	230f      	movs	r3, #15
 80015e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e8:	2302      	movs	r3, #2
 80015ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	2105      	movs	r1, #5
 8001602:	4618      	mov	r0, r3
 8001604:	f002 fbdc 	bl	8003dc0 <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800160e:	f000 f90b 	bl	8001828 <Error_Handler>
  }
}
 8001612:	bf00      	nop
 8001614:	3750      	adds	r7, #80	; 0x50
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800
 8001620:	40007000 	.word	0x40007000

08001624 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	2120      	movs	r1, #32
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <system_init+0x40>)
 800162e:	f001 f82d 	bl	800268c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2140      	movs	r1, #64	; 0x40
 8001636:	480b      	ldr	r0, [pc, #44]	; (8001664 <system_init+0x40>)
 8001638:	f001 f828 	bl	800268c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2110      	movs	r1, #16
 8001640:	4808      	ldr	r0, [pc, #32]	; (8001664 <system_init+0x40>)
 8001642:	f001 f823 	bl	800268c <HAL_GPIO_WritePin>
	  timer_init();
 8001646:	f000 f8f5 	bl	8001834 <timer_init>
	  led7_init();
 800164a:	f7ff febd 	bl	80013c8 <led7_init>
	  button_init();
 800164e:	f7fe ff3f 	bl	80004d0 <button_init>
	  lcd_init();
 8001652:	f7ff fcc3 	bl	8000fdc <lcd_init>
	  ds3231_init();
 8001656:	f7fe ffb3 	bl	80005c0 <ds3231_init>
	  setTimer2(50);
 800165a:	2032      	movs	r0, #50	; 0x32
 800165c:	f000 f8f4 	bl	8001848 <setTimer2>
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000

08001668 <test_led>:
void test_led(){
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 800166c:	2110      	movs	r1, #16
 800166e:	4802      	ldr	r0, [pc, #8]	; (8001678 <test_led+0x10>)
 8001670:	f001 f825 	bl	80026be <HAL_GPIO_TogglePin>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40021000 	.word	0x40021000

0800167c <test_lcd>:
	led7_SetDigit(1, 0, 0);
	led7_SetDigit(2, 1, 0);
	led7_SetDigit(3, 2, 0);
	led7_SetDigit(4, 3, 0);
}
void test_lcd(){
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af04      	add	r7, sp, #16
	lcd_Fill(0, 0, 240, 20, BLUE);
 8001682:	231f      	movs	r3, #31
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2314      	movs	r3, #20
 8001688:	22f0      	movs	r2, #240	; 0xf0
 800168a:	2100      	movs	r1, #0
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff fa73 	bl	8000b78 <lcd_Fill>
	lcd_StrCenter(0, 2, "Hello World !!!", RED, BLUE, 16, 1);
 8001692:	2301      	movs	r3, #1
 8001694:	9302      	str	r3, [sp, #8]
 8001696:	2310      	movs	r3, #16
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	231f      	movs	r3, #31
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <test_lcd+0x64>)
 80016a4:	2102      	movs	r1, #2
 80016a6:	2000      	movs	r0, #0
 80016a8:	f7ff fe5c 	bl	8001364 <lcd_StrCenter>
	lcd_ShowStr(20, 30, "Test lcd screen", WHITE, RED, 24, 0);
 80016ac:	2300      	movs	r3, #0
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	2318      	movs	r3, #24
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016be:	4a09      	ldr	r2, [pc, #36]	; (80016e4 <test_lcd+0x68>)
 80016c0:	211e      	movs	r1, #30
 80016c2:	2014      	movs	r0, #20
 80016c4:	f7ff fdea 	bl	800129c <lcd_ShowStr>
	lcd_ShowPicture(80, 200, 90, 90, gImage_logo);
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <test_lcd+0x6c>)
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	235a      	movs	r3, #90	; 0x5a
 80016ce:	225a      	movs	r2, #90	; 0x5a
 80016d0:	21c8      	movs	r1, #200	; 0xc8
 80016d2:	2050      	movs	r0, #80	; 0x50
 80016d4:	f7ff fc08 	bl	8000ee8 <lcd_ShowPicture>
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	08006834 	.word	0x08006834
 80016e4:	08006844 	.word	0x08006844
 80016e8:	080097d4 	.word	0x080097d4

080016ec <updateTime>:
		if(button_count[i] == 1){
			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
		}
	}
}
void updateTime(){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 23);
 80016f0:	2117      	movs	r1, #23
 80016f2:	2006      	movs	r0, #6
 80016f4:	f7fe ffa8 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 9);
 80016f8:	2109      	movs	r1, #9
 80016fa:	2005      	movs	r0, #5
 80016fc:	f7fe ffa4 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 15);
 8001700:	210f      	movs	r1, #15
 8001702:	2004      	movs	r0, #4
 8001704:	f7fe ffa0 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8001708:	2106      	movs	r1, #6
 800170a:	2003      	movs	r0, #3
 800170c:	f7fe ff9c 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 21);
 8001710:	2115      	movs	r1, #21
 8001712:	2002      	movs	r0, #2
 8001714:	f7fe ff98 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 22);
 8001718:	2116      	movs	r1, #22
 800171a:	2001      	movs	r0, #1
 800171c:	f7fe ff94 	bl	8000648 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 30);
 8001720:	211e      	movs	r1, #30
 8001722:	2000      	movs	r0, #0
 8001724:	f7fe ff90 	bl	8000648 <ds3231_Write>
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <displayTime>:
void displayTime(){
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001732:	4b36      	ldr	r3, [pc, #216]	; (800180c <displayTime+0xe0>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b29a      	uxth	r2, r3
 8001738:	2318      	movs	r3, #24
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	2300      	movs	r3, #0
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2302      	movs	r3, #2
 8001748:	2164      	movs	r1, #100	; 0x64
 800174a:	2046      	movs	r0, #70	; 0x46
 800174c:	f7ff fb4e 	bl	8000dec <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001750:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <displayTime+0xe4>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b29a      	uxth	r2, r3
 8001756:	2318      	movs	r3, #24
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	2300      	movs	r3, #0
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2302      	movs	r3, #2
 8001766:	2164      	movs	r1, #100	; 0x64
 8001768:	206e      	movs	r0, #110	; 0x6e
 800176a:	f7ff fb3f 	bl	8000dec <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 800176e:	4b29      	ldr	r3, [pc, #164]	; (8001814 <displayTime+0xe8>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b29a      	uxth	r2, r3
 8001774:	2318      	movs	r3, #24
 8001776:	9302      	str	r3, [sp, #8]
 8001778:	2300      	movs	r3, #0
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2302      	movs	r3, #2
 8001784:	2164      	movs	r1, #100	; 0x64
 8001786:	2096      	movs	r0, #150	; 0x96
 8001788:	f7ff fb30 	bl	8000dec <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <displayTime+0xec>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b29a      	uxth	r2, r3
 8001792:	2318      	movs	r3, #24
 8001794:	9302      	str	r3, [sp, #8]
 8001796:	2300      	movs	r3, #0
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2302      	movs	r3, #2
 80017a2:	2182      	movs	r1, #130	; 0x82
 80017a4:	2014      	movs	r0, #20
 80017a6:	f7ff fb21 	bl	8000dec <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <displayTime+0xf0>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	2318      	movs	r3, #24
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	2300      	movs	r3, #0
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2302      	movs	r3, #2
 80017c0:	2182      	movs	r1, #130	; 0x82
 80017c2:	2046      	movs	r0, #70	; 0x46
 80017c4:	f7ff fb12 	bl	8000dec <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <displayTime+0xf4>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	2318      	movs	r3, #24
 80017d0:	9302      	str	r3, [sp, #8]
 80017d2:	2300      	movs	r3, #0
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2302      	movs	r3, #2
 80017de:	2182      	movs	r1, #130	; 0x82
 80017e0:	206e      	movs	r0, #110	; 0x6e
 80017e2:	f7ff fb03 	bl	8000dec <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <displayTime+0xf8>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	2318      	movs	r3, #24
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	2300      	movs	r3, #0
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2302      	movs	r3, #2
 80017fc:	2182      	movs	r1, #130	; 0x82
 80017fe:	2096      	movs	r0, #150	; 0x96
 8001800:	f7ff faf4 	bl	8000dec <lcd_ShowIntNum>
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000069 	.word	0x20000069
 8001810:	20000066 	.word	0x20000066
 8001814:	20000064 	.word	0x20000064
 8001818:	20000068 	.word	0x20000068
 800181c:	20000067 	.word	0x20000067
 8001820:	2000006a 	.word	0x2000006a
 8001824:	20000065 	.word	0x20000065

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182c:	b672      	cpsid	i
}
 800182e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001830:	e7fe      	b.n	8001830 <Error_Handler+0x8>
	...

08001834 <timer_init>:
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;



void timer_init(){
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <timer_init+0x10>)
 800183a:	f003 faf9 	bl	8004e30 <HAL_TIM_Base_Start_IT>
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200001ac 	.word	0x200001ac

08001848 <setTimer2>:
	timer1_MUL = duration / TIMER_CYCLE_2;
	timer1_counter = timer1_MUL;
	flag_timer1 = 0;
}*/

void setTimer2(uint16_t duration){
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration / TIMER_CYCLE_2;
 8001852:	4a08      	ldr	r2, [pc, #32]	; (8001874 <setTimer2+0x2c>)
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <setTimer2+0x2c>)
 800185a:	881a      	ldrh	r2, [r3, #0]
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <setTimer2+0x30>)
 800185e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <setTimer2+0x34>)
 8001862:	2200      	movs	r2, #0
 8001864:	801a      	strh	r2, [r3, #0]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000038 	.word	0x20000038
 8001878:	20000036 	.word	0x20000036
 800187c:	20000034 	.word	0x20000034

08001880 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001890:	d116      	bne.n	80018c0 <HAL_TIM_PeriodElapsedCallback+0x40>
			if(timer1_counter == 0) {
				flag_timer1 = 1;
				timer1_counter = timer1_MUL;
			}
		}*/
		if(timer2_counter > 0){
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d010      	beq.n	80018bc <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80018a4:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d106      	bne.n	80018bc <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80018b6:	881a      	ldrh	r2, [r3, #0]
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80018ba:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 80018bc:	f7ff fd90 	bl	80013e0 <led7_Scan>
	}
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000036 	.word	0x20000036
 80018cc:	20000034 	.word	0x20000034
 80018d0:	20000038 	.word	0x20000038

080018d4 <MX_SPI1_Init>:
  * @param None
  * @retval None
  */

void MX_SPI1_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <MX_SPI1_Init+0x64>)
 80018da:	4a18      	ldr	r2, [pc, #96]	; (800193c <MX_SPI1_Init+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <MX_SPI1_Init+0x64>)
 80018e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_SPI1_Init+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <MX_SPI1_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_SPI1_Init+0x64>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_SPI1_Init+0x64>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_SPI1_Init+0x64>)
 8001900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001904:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_SPI1_Init+0x64>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <MX_SPI1_Init+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_SPI1_Init+0x64>)
 8001914:	2200      	movs	r2, #0
 8001916:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <MX_SPI1_Init+0x64>)
 800191a:	2200      	movs	r2, #0
 800191c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_SPI1_Init+0x64>)
 8001920:	220a      	movs	r2, #10
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <MX_SPI1_Init+0x64>)
 8001926:	f002 fc47 	bl	80041b8 <HAL_SPI_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001930:	f7ff ff7a 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000154 	.word	0x20000154
 800193c:	40013000 	.word	0x40013000

08001940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <HAL_MspInit+0x4c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a0f      	ldr	r2, [pc, #60]	; (800198c <HAL_MspInit+0x4c>)
 8001950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001954:	6453      	str	r3, [r2, #68]	; 0x44
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_MspInit+0x4c>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_MspInit+0x4c>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a08      	ldr	r2, [pc, #32]	; (800198c <HAL_MspInit+0x4c>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_MspInit+0x4c>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800

08001990 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a19      	ldr	r2, [pc, #100]	; (8001a14 <HAL_I2C_MspInit+0x84>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d12b      	bne.n	8001a0a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <HAL_I2C_MspInit+0x88>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a17      	ldr	r2, [pc, #92]	; (8001a18 <HAL_I2C_MspInit+0x88>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_I2C_MspInit+0x88>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ce:	23c0      	movs	r3, #192	; 0xc0
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d2:	2312      	movs	r3, #18
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019de:	2304      	movs	r3, #4
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	480c      	ldr	r0, [pc, #48]	; (8001a1c <HAL_I2C_MspInit+0x8c>)
 80019ea:	f000 fcb3 	bl	8002354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_I2C_MspInit+0x88>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_I2C_MspInit+0x88>)
 80019f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_I2C_MspInit+0x88>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	; 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40005400 	.word	0x40005400
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020400 	.word	0x40020400

08001a20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a19      	ldr	r2, [pc, #100]	; (8001aa4 <HAL_SPI_MspInit+0x84>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d12b      	bne.n	8001a9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <HAL_SPI_MspInit+0x88>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <HAL_SPI_MspInit+0x88>)
 8001a4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a50:	6453      	str	r3, [r2, #68]	; 0x44
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_SPI_MspInit+0x88>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_SPI_MspInit+0x88>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a10      	ldr	r2, [pc, #64]	; (8001aa8 <HAL_SPI_MspInit+0x88>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <HAL_SPI_MspInit+0x88>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001a7a:	2338      	movs	r3, #56	; 0x38
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a86:	2303      	movs	r3, #3
 8001a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	; (8001aac <HAL_SPI_MspInit+0x8c>)
 8001a96:	f000 fc5d 	bl	8002354 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	; 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40013000 	.word	0x40013000
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020400 	.word	0x40020400

08001ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac0:	d115      	bne.n	8001aee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_TIM_Base_MspInit+0x48>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a0b      	ldr	r2, [pc, #44]	; (8001af8 <HAL_TIM_Base_MspInit+0x48>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_TIM_Base_MspInit+0x48>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	201c      	movs	r0, #28
 8001ae4:	f000 fb6d 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ae8:	201c      	movs	r0, #28
 8001aea:	f000 fb86 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800

08001afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a1d      	ldr	r2, [pc, #116]	; (8001b90 <HAL_UART_MspInit+0x94>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d134      	bne.n	8001b88 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <HAL_UART_MspInit+0x98>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <HAL_UART_MspInit+0x98>)
 8001b28:	f043 0310 	orr.w	r3, r3, #16
 8001b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <HAL_UART_MspInit+0x98>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_UART_MspInit+0x98>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a14      	ldr	r2, [pc, #80]	; (8001b94 <HAL_UART_MspInit+0x98>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_UART_MspInit+0x98>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b64:	2303      	movs	r3, #3
 8001b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b68:	2307      	movs	r3, #7
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	4809      	ldr	r0, [pc, #36]	; (8001b98 <HAL_UART_MspInit+0x9c>)
 8001b74:	f000 fbee 	bl	8002354 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2025      	movs	r0, #37	; 0x25
 8001b7e:	f000 fb20 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b82:	2025      	movs	r0, #37	; 0x25
 8001b84:	f000 fb39 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b88:	bf00      	nop
 8001b8a:	3728      	adds	r7, #40	; 0x28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40011000 	.word	0x40011000
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020000 	.word	0x40020000

08001b9c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <HAL_FSMC_MspInit+0x88>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d131      	bne.n	8001c1c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001bb8:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <HAL_FSMC_MspInit+0x88>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_FSMC_MspInit+0x8c>)
 8001bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc6:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <HAL_FSMC_MspInit+0x8c>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6393      	str	r3, [r2, #56]	; 0x38
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <HAL_FSMC_MspInit+0x8c>)
 8001bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001bda:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001bde:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001bec:	230c      	movs	r3, #12
 8001bee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <HAL_FSMC_MspInit+0x90>)
 8001bf6:	f000 fbad 	bl	8002354 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001bfa:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001bfe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001c0c:	230c      	movs	r3, #12
 8001c0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	4619      	mov	r1, r3
 8001c14:	4806      	ldr	r0, [pc, #24]	; (8001c30 <HAL_FSMC_MspInit+0x94>)
 8001c16:	f000 fb9d 	bl	8002354 <HAL_GPIO_Init>
 8001c1a:	e000      	b.n	8001c1e <HAL_FSMC_MspInit+0x82>
    return;
 8001c1c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	2000003c 	.word	0x2000003c
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40020c00 	.word	0x40020c00

08001c34 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001c3c:	f7ff ffae 	bl	8001b9c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <NMI_Handler+0x4>

08001c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c94:	f000 f976 	bl	8001f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <TIM2_IRQHandler+0x10>)
 8001ca2:	f003 f935 	bl	8004f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200001ac 	.word	0x200001ac

08001cb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <USART1_IRQHandler+0x10>)
 8001cb6:	f003 fdfd 	bl	80058b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200001f4 	.word	0x200001f4

08001cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <SystemInit+0x20>)
 8001cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <SystemInit+0x20>)
 8001cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cee:	f107 0308 	add.w	r3, r7, #8
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d0e:	f240 3247 	movw	r2, #839	; 0x347
 8001d12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d1c:	2263      	movs	r2, #99	; 0x63
 8001d1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d2c:	4813      	ldr	r0, [pc, #76]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d2e:	f003 f82f 	bl	8004d90 <HAL_TIM_Base_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d38:	f7ff fd76 	bl	8001828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d42:	f107 0308 	add.w	r3, r7, #8
 8001d46:	4619      	mov	r1, r3
 8001d48:	480c      	ldr	r0, [pc, #48]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d4a:	f003 f9e9 	bl	8005120 <HAL_TIM_ConfigClockSource>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d54:	f7ff fd68 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d60:	463b      	mov	r3, r7
 8001d62:	4619      	mov	r1, r3
 8001d64:	4805      	ldr	r0, [pc, #20]	; (8001d7c <MX_TIM2_Init+0x94>)
 8001d66:	f003 fc05 	bl	8005574 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d70:	f7ff fd5a 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d74:	bf00      	nop
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200001ac 	.word	0x200001ac

08001d80 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a08      	ldr	r2, [pc, #32]	; (8001db0 <HAL_UART_RxCpltCallback+0x30>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d10a      	bne.n	8001da8 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8001d92:	230a      	movs	r3, #10
 8001d94:	2201      	movs	r2, #1
 8001d96:	4907      	ldr	r1, [pc, #28]	; (8001db4 <HAL_UART_RxCpltCallback+0x34>)
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <HAL_UART_RxCpltCallback+0x38>)
 8001d9a:	f003 fcc8 	bl	800572e <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4904      	ldr	r1, [pc, #16]	; (8001db4 <HAL_UART_RxCpltCallback+0x34>)
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <HAL_UART_RxCpltCallback+0x38>)
 8001da4:	f003 fd55 	bl	8005852 <HAL_UART_Receive_IT>
	}
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40011000 	.word	0x40011000
 8001db4:	20000040 	.word	0x20000040
 8001db8:	200001f4 	.word	0x200001f4

08001dbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <MX_USART1_UART_Init+0x50>)
 8001dc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001de2:	220c      	movs	r2, #12
 8001de4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_USART1_UART_Init+0x4c>)
 8001df4:	f003 fc4e 	bl	8005694 <HAL_UART_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dfe:	f7ff fd13 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200001f4 	.word	0x200001f4
 8001e0c:	40011000 	.word	0x40011000

08001e10 <BCD2DEC>:
 *      Author: ADMIN
 */

#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	b2db      	uxtb	r3, r3
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <DEC2BCD+0x44>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	08db      	lsrs	r3, r3, #3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	b258      	sxtb	r0, r3
 8001e5e:	79fa      	ldrb	r2, [r7, #7]
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <DEC2BCD+0x44>)
 8001e62:	fba3 1302 	umull	r1, r3, r3, r2
 8001e66:	08d9      	lsrs	r1, r3, #3
 8001e68:	460b      	mov	r3, r1
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	b25b      	sxtb	r3, r3
 8001e76:	4303      	orrs	r3, r0
 8001e78:	b25b      	sxtb	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	cccccccd 	.word	0xcccccccd

08001e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e90:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e92:	490e      	ldr	r1, [pc, #56]	; (8001ecc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e94:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e98:	e002      	b.n	8001ea0 <LoopCopyDataInit>

08001e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9e:	3304      	adds	r3, #4

08001ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea4:	d3f9      	bcc.n	8001e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea6:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ea8:	4c0b      	ldr	r4, [pc, #44]	; (8001ed8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eac:	e001      	b.n	8001eb2 <LoopFillZerobss>

08001eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb0:	3204      	adds	r2, #4

08001eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb4:	d3fb      	bcc.n	8001eae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eb6:	f7ff ff05 	bl	8001cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eba:	f004 fc83 	bl	80067c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ebe:	f7ff fb1b 	bl	80014f8 <main>
  bx  lr    
 8001ec2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ecc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001ed0:	0800d744 	.word	0x0800d744
  ldr r2, =_sbss
 8001ed4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001ed8:	2000023c 	.word	0x2000023c

08001edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC_IRQHandler>
	...

08001ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <HAL_Init+0x40>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	; (8001f20 <HAL_Init+0x40>)
 8001eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_Init+0x40>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <HAL_Init+0x40>)
 8001ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <HAL_Init+0x40>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <HAL_Init+0x40>)
 8001f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f08:	2003      	movs	r0, #3
 8001f0a:	f000 f94f 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0e:	200f      	movs	r0, #15
 8001f10:	f000 f808 	bl	8001f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f14:	f7ff fd14 	bl	8001940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023c00 	.word	0x40023c00

08001f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_InitTick+0x54>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_InitTick+0x58>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4619      	mov	r1, r3
 8001f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f967 	bl	8002216 <HAL_SYSTICK_Config>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00e      	b.n	8001f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b0f      	cmp	r3, #15
 8001f56:	d80a      	bhi.n	8001f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f000 f92f 	bl	80021c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f64:	4a06      	ldr	r2, [pc, #24]	; (8001f80 <HAL_InitTick+0x5c>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	20000010 	.word	0x20000010
 8001f80:	2000000c 	.word	0x2000000c

08001f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_IncTick+0x20>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_IncTick+0x24>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <HAL_IncTick+0x24>)
 8001f96:	6013      	str	r3, [r2, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000010 	.word	0x20000010
 8001fa8:	20000238 	.word	0x20000238

08001fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_GetTick+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000238 	.word	0x20000238

08001fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fcc:	f7ff ffee 	bl	8001fac <HAL_GetTick>
 8001fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d005      	beq.n	8001fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_Delay+0x44>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fea:	bf00      	nop
 8001fec:	f7ff ffde 	bl	8001fac <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d8f7      	bhi.n	8001fec <HAL_Delay+0x28>
  {
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000010 	.word	0x20000010

0800200c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002028:	4013      	ands	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800203c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203e:	4a04      	ldr	r2, [pc, #16]	; (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	60d3      	str	r3, [r2, #12]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <__NVIC_GetPriorityGrouping+0x18>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	f003 0307 	and.w	r3, r3, #7
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	2b00      	cmp	r3, #0
 8002080:	db0b      	blt.n	800209a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	f003 021f 	and.w	r2, r3, #31
 8002088:	4907      	ldr	r1, [pc, #28]	; (80020a8 <__NVIC_EnableIRQ+0x38>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	2001      	movs	r0, #1
 8002092:	fa00 f202 	lsl.w	r2, r0, r2
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000e100 	.word	0xe000e100

080020ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0a      	blt.n	80020d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	490c      	ldr	r1, [pc, #48]	; (80020f8 <__NVIC_SetPriority+0x4c>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d4:	e00a      	b.n	80020ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4908      	ldr	r1, [pc, #32]	; (80020fc <__NVIC_SetPriority+0x50>)
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3b04      	subs	r3, #4
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	761a      	strb	r2, [r3, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f1c3 0307 	rsb	r3, r3, #7
 800211a:	2b04      	cmp	r3, #4
 800211c:	bf28      	it	cs
 800211e:	2304      	movcs	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	2b06      	cmp	r3, #6
 8002128:	d902      	bls.n	8002130 <NVIC_EncodePriority+0x30>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3b03      	subs	r3, #3
 800212e:	e000      	b.n	8002132 <NVIC_EncodePriority+0x32>
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43d9      	mvns	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	4313      	orrs	r3, r2
         );
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	; 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002178:	d301      	bcc.n	800217e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217a:	2301      	movs	r3, #1
 800217c:	e00f      	b.n	800219e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <SysTick_Config+0x40>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002186:	210f      	movs	r1, #15
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f7ff ff8e 	bl	80020ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <SysTick_Config+0x40>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002196:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <SysTick_Config+0x40>)
 8002198:	2207      	movs	r2, #7
 800219a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000e010 	.word	0xe000e010

080021ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff29 	bl	800200c <__NVIC_SetPriorityGrouping>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d4:	f7ff ff3e 	bl	8002054 <__NVIC_GetPriorityGrouping>
 80021d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	f7ff ff8e 	bl	8002100 <NVIC_EncodePriority>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff5d 	bl	80020ac <__NVIC_SetPriority>
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff31 	bl	8002070 <__NVIC_EnableIRQ>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ffa2 	bl	8002168 <SysTick_Config>
 8002224:	4603      	mov	r3, r0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff feb6 	bl	8001fac <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d008      	beq.n	8002260 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e052      	b.n	8002306 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0216 	bic.w	r2, r2, #22
 800226e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800227e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	2b00      	cmp	r3, #0
 8002286:	d103      	bne.n	8002290 <HAL_DMA_Abort+0x62>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0208 	bic.w	r2, r2, #8
 800229e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0201 	bic.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022b0:	e013      	b.n	80022da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022b2:	f7ff fe7b 	bl	8001fac <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d90c      	bls.n	80022da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2203      	movs	r2, #3
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e015      	b.n	8002306 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1e4      	bne.n	80022b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ec:	223f      	movs	r2, #63	; 0x3f
 80022ee:	409a      	lsls	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d004      	beq.n	800232c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2280      	movs	r2, #128	; 0x80
 8002326:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e00c      	b.n	8002346 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2205      	movs	r2, #5
 8002330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	e16b      	b.n	8002648 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002370:	2201      	movs	r2, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	429a      	cmp	r2, r3
 800238a:	f040 815a 	bne.w	8002642 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d005      	beq.n	80023a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d130      	bne.n	8002408 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 0201 	and.w	r2, r3, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b03      	cmp	r3, #3
 8002412:	d017      	beq.n	8002444 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d123      	bne.n	8002498 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	08da      	lsrs	r2, r3, #3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3208      	adds	r2, #8
 8002458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	220f      	movs	r2, #15
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	08da      	lsrs	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3208      	adds	r2, #8
 8002492:	69b9      	ldr	r1, [r7, #24]
 8002494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0203 	and.w	r2, r3, #3
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80b4 	beq.w	8002642 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b60      	ldr	r3, [pc, #384]	; (8002660 <HAL_GPIO_Init+0x30c>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	4a5f      	ldr	r2, [pc, #380]	; (8002660 <HAL_GPIO_Init+0x30c>)
 80024e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ea:	4b5d      	ldr	r3, [pc, #372]	; (8002660 <HAL_GPIO_Init+0x30c>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024f6:	4a5b      	ldr	r2, [pc, #364]	; (8002664 <HAL_GPIO_Init+0x310>)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3302      	adds	r3, #2
 80024fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	220f      	movs	r2, #15
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a52      	ldr	r2, [pc, #328]	; (8002668 <HAL_GPIO_Init+0x314>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d02b      	beq.n	800257a <HAL_GPIO_Init+0x226>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a51      	ldr	r2, [pc, #324]	; (800266c <HAL_GPIO_Init+0x318>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d025      	beq.n	8002576 <HAL_GPIO_Init+0x222>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a50      	ldr	r2, [pc, #320]	; (8002670 <HAL_GPIO_Init+0x31c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d01f      	beq.n	8002572 <HAL_GPIO_Init+0x21e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a4f      	ldr	r2, [pc, #316]	; (8002674 <HAL_GPIO_Init+0x320>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d019      	beq.n	800256e <HAL_GPIO_Init+0x21a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4e      	ldr	r2, [pc, #312]	; (8002678 <HAL_GPIO_Init+0x324>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <HAL_GPIO_Init+0x216>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4d      	ldr	r2, [pc, #308]	; (800267c <HAL_GPIO_Init+0x328>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00d      	beq.n	8002566 <HAL_GPIO_Init+0x212>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a4c      	ldr	r2, [pc, #304]	; (8002680 <HAL_GPIO_Init+0x32c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d007      	beq.n	8002562 <HAL_GPIO_Init+0x20e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4b      	ldr	r2, [pc, #300]	; (8002684 <HAL_GPIO_Init+0x330>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d101      	bne.n	800255e <HAL_GPIO_Init+0x20a>
 800255a:	2307      	movs	r3, #7
 800255c:	e00e      	b.n	800257c <HAL_GPIO_Init+0x228>
 800255e:	2308      	movs	r3, #8
 8002560:	e00c      	b.n	800257c <HAL_GPIO_Init+0x228>
 8002562:	2306      	movs	r3, #6
 8002564:	e00a      	b.n	800257c <HAL_GPIO_Init+0x228>
 8002566:	2305      	movs	r3, #5
 8002568:	e008      	b.n	800257c <HAL_GPIO_Init+0x228>
 800256a:	2304      	movs	r3, #4
 800256c:	e006      	b.n	800257c <HAL_GPIO_Init+0x228>
 800256e:	2303      	movs	r3, #3
 8002570:	e004      	b.n	800257c <HAL_GPIO_Init+0x228>
 8002572:	2302      	movs	r3, #2
 8002574:	e002      	b.n	800257c <HAL_GPIO_Init+0x228>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <HAL_GPIO_Init+0x228>
 800257a:	2300      	movs	r3, #0
 800257c:	69fa      	ldr	r2, [r7, #28]
 800257e:	f002 0203 	and.w	r2, r2, #3
 8002582:	0092      	lsls	r2, r2, #2
 8002584:	4093      	lsls	r3, r2
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800258c:	4935      	ldr	r1, [pc, #212]	; (8002664 <HAL_GPIO_Init+0x310>)
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	089b      	lsrs	r3, r3, #2
 8002592:	3302      	adds	r3, #2
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800259a:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <HAL_GPIO_Init+0x334>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025be:	4a32      	ldr	r2, [pc, #200]	; (8002688 <HAL_GPIO_Init+0x334>)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025c4:	4b30      	ldr	r3, [pc, #192]	; (8002688 <HAL_GPIO_Init+0x334>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025e8:	4a27      	ldr	r2, [pc, #156]	; (8002688 <HAL_GPIO_Init+0x334>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ee:	4b26      	ldr	r3, [pc, #152]	; (8002688 <HAL_GPIO_Init+0x334>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002612:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <HAL_GPIO_Init+0x334>)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_GPIO_Init+0x334>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800263c:	4a12      	ldr	r2, [pc, #72]	; (8002688 <HAL_GPIO_Init+0x334>)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3301      	adds	r3, #1
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	2b0f      	cmp	r3, #15
 800264c:	f67f ae90 	bls.w	8002370 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3724      	adds	r7, #36	; 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800
 8002664:	40013800 	.word	0x40013800
 8002668:	40020000 	.word	0x40020000
 800266c:	40020400 	.word	0x40020400
 8002670:	40020800 	.word	0x40020800
 8002674:	40020c00 	.word	0x40020c00
 8002678:	40021000 	.word	0x40021000
 800267c:	40021400 	.word	0x40021400
 8002680:	40021800 	.word	0x40021800
 8002684:	40021c00 	.word	0x40021c00
 8002688:	40013c00 	.word	0x40013c00

0800268c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	807b      	strh	r3, [r7, #2]
 8002698:	4613      	mov	r3, r2
 800269a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800269c:	787b      	ldrb	r3, [r7, #1]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026a2:	887a      	ldrh	r2, [r7, #2]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026a8:	e003      	b.n	80026b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026aa:	887b      	ldrh	r3, [r7, #2]
 80026ac:	041a      	lsls	r2, r3, #16
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	619a      	str	r2, [r3, #24]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026be:	b480      	push	{r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	460b      	mov	r3, r1
 80026c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026d0:	887a      	ldrh	r2, [r7, #2]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4013      	ands	r3, r2
 80026d6:	041a      	lsls	r2, r3, #16
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	43d9      	mvns	r1, r3
 80026dc:	887b      	ldrh	r3, [r7, #2]
 80026de:	400b      	ands	r3, r1
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	619a      	str	r2, [r3, #24]
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e12b      	b.n	800295e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff f938 	bl	8001990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2224      	movs	r2, #36	; 0x24
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002746:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002756:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002758:	f001 fd06 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 800275c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4a81      	ldr	r2, [pc, #516]	; (8002968 <HAL_I2C_Init+0x274>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d807      	bhi.n	8002778 <HAL_I2C_Init+0x84>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4a80      	ldr	r2, [pc, #512]	; (800296c <HAL_I2C_Init+0x278>)
 800276c:	4293      	cmp	r3, r2
 800276e:	bf94      	ite	ls
 8002770:	2301      	movls	r3, #1
 8002772:	2300      	movhi	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	e006      	b.n	8002786 <HAL_I2C_Init+0x92>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4a7d      	ldr	r2, [pc, #500]	; (8002970 <HAL_I2C_Init+0x27c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	bf94      	ite	ls
 8002780:	2301      	movls	r3, #1
 8002782:	2300      	movhi	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e0e7      	b.n	800295e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4a78      	ldr	r2, [pc, #480]	; (8002974 <HAL_I2C_Init+0x280>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	0c9b      	lsrs	r3, r3, #18
 8002798:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a6a      	ldr	r2, [pc, #424]	; (8002968 <HAL_I2C_Init+0x274>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d802      	bhi.n	80027c8 <HAL_I2C_Init+0xd4>
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	3301      	adds	r3, #1
 80027c6:	e009      	b.n	80027dc <HAL_I2C_Init+0xe8>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027ce:	fb02 f303 	mul.w	r3, r2, r3
 80027d2:	4a69      	ldr	r2, [pc, #420]	; (8002978 <HAL_I2C_Init+0x284>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	099b      	lsrs	r3, r3, #6
 80027da:	3301      	adds	r3, #1
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	430b      	orrs	r3, r1
 80027e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	495c      	ldr	r1, [pc, #368]	; (8002968 <HAL_I2C_Init+0x274>)
 80027f8:	428b      	cmp	r3, r1
 80027fa:	d819      	bhi.n	8002830 <HAL_I2C_Init+0x13c>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1e59      	subs	r1, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	fbb1 f3f3 	udiv	r3, r1, r3
 800280a:	1c59      	adds	r1, r3, #1
 800280c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002810:	400b      	ands	r3, r1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_I2C_Init+0x138>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1e59      	subs	r1, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	fbb1 f3f3 	udiv	r3, r1, r3
 8002824:	3301      	adds	r3, #1
 8002826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282a:	e051      	b.n	80028d0 <HAL_I2C_Init+0x1dc>
 800282c:	2304      	movs	r3, #4
 800282e:	e04f      	b.n	80028d0 <HAL_I2C_Init+0x1dc>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d111      	bne.n	800285c <HAL_I2C_Init+0x168>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1e58      	subs	r0, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6859      	ldr	r1, [r3, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	440b      	add	r3, r1
 8002846:	fbb0 f3f3 	udiv	r3, r0, r3
 800284a:	3301      	adds	r3, #1
 800284c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	e012      	b.n	8002882 <HAL_I2C_Init+0x18e>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1e58      	subs	r0, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	0099      	lsls	r1, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_I2C_Init+0x196>
 8002886:	2301      	movs	r3, #1
 8002888:	e022      	b.n	80028d0 <HAL_I2C_Init+0x1dc>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10e      	bne.n	80028b0 <HAL_I2C_Init+0x1bc>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1e58      	subs	r0, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	460b      	mov	r3, r1
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	440b      	add	r3, r1
 80028a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a4:	3301      	adds	r3, #1
 80028a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ae:	e00f      	b.n	80028d0 <HAL_I2C_Init+0x1dc>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1e58      	subs	r0, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6859      	ldr	r1, [r3, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	0099      	lsls	r1, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c6:	3301      	adds	r3, #1
 80028c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	6809      	ldr	r1, [r1, #0]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69da      	ldr	r2, [r3, #28]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6911      	ldr	r1, [r2, #16]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68d2      	ldr	r2, [r2, #12]
 800290a:	4311      	orrs	r1, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	430b      	orrs	r3, r1
 8002912:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	000186a0 	.word	0x000186a0
 800296c:	001e847f 	.word	0x001e847f
 8002970:	003d08ff 	.word	0x003d08ff
 8002974:	431bde83 	.word	0x431bde83
 8002978:	10624dd3 	.word	0x10624dd3

0800297c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	4608      	mov	r0, r1
 8002986:	4611      	mov	r1, r2
 8002988:	461a      	mov	r2, r3
 800298a:	4603      	mov	r3, r0
 800298c:	817b      	strh	r3, [r7, #10]
 800298e:	460b      	mov	r3, r1
 8002990:	813b      	strh	r3, [r7, #8]
 8002992:	4613      	mov	r3, r2
 8002994:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002996:	f7ff fb09 	bl	8001fac <HAL_GetTick>
 800299a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	f040 80d9 	bne.w	8002b5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2319      	movs	r3, #25
 80029b0:	2201      	movs	r2, #1
 80029b2:	496d      	ldr	r1, [pc, #436]	; (8002b68 <HAL_I2C_Mem_Write+0x1ec>)
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 fdad 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80029c0:	2302      	movs	r3, #2
 80029c2:	e0cc      	b.n	8002b5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_I2C_Mem_Write+0x56>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e0c5      	b.n	8002b5e <HAL_I2C_Mem_Write+0x1e2>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d007      	beq.n	80029f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2221      	movs	r2, #33	; 0x21
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2240      	movs	r2, #64	; 0x40
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a3a      	ldr	r2, [r7, #32]
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a4d      	ldr	r2, [pc, #308]	; (8002b6c <HAL_I2C_Mem_Write+0x1f0>)
 8002a38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a3a:	88f8      	ldrh	r0, [r7, #6]
 8002a3c:	893a      	ldrh	r2, [r7, #8]
 8002a3e:	8979      	ldrh	r1, [r7, #10]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	4603      	mov	r3, r0
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 fbe4 	bl	8003218 <I2C_RequestMemoryWrite>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d052      	beq.n	8002afc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e081      	b.n	8002b5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fe2e 	bl	80036c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00d      	beq.n	8002a86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d107      	bne.n	8002a82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e06b      	b.n	8002b5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	781a      	ldrb	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d11b      	bne.n	8002afc <HAL_I2C_Mem_Write+0x180>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d017      	beq.n	8002afc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1aa      	bne.n	8002a5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 fe1a 	bl	8003742 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00d      	beq.n	8002b30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d107      	bne.n	8002b2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e016      	b.n	8002b5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e000      	b.n	8002b5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b5c:	2302      	movs	r3, #2
  }
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	00100002 	.word	0x00100002
 8002b6c:	ffff0000 	.word	0xffff0000

08002b70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08c      	sub	sp, #48	; 0x30
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	4608      	mov	r0, r1
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	817b      	strh	r3, [r7, #10]
 8002b82:	460b      	mov	r3, r1
 8002b84:	813b      	strh	r3, [r7, #8]
 8002b86:	4613      	mov	r3, r2
 8002b88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b8a:	f7ff fa0f 	bl	8001fac <HAL_GetTick>
 8002b8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	f040 8208 	bne.w	8002fae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2319      	movs	r3, #25
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	497b      	ldr	r1, [pc, #492]	; (8002d94 <HAL_I2C_Mem_Read+0x224>)
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fcb3 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e1fb      	b.n	8002fb0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2C_Mem_Read+0x56>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e1f4      	b.n	8002fb0 <HAL_I2C_Mem_Read+0x440>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d007      	beq.n	8002bec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2222      	movs	r2, #34	; 0x22
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2240      	movs	r2, #64	; 0x40
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a5b      	ldr	r2, [pc, #364]	; (8002d98 <HAL_I2C_Mem_Read+0x228>)
 8002c2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c2e:	88f8      	ldrh	r0, [r7, #6]
 8002c30:	893a      	ldrh	r2, [r7, #8]
 8002c32:	8979      	ldrh	r1, [r7, #10]
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fb80 	bl	8003344 <I2C_RequestMemoryRead>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e1b0      	b.n	8002fb0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d113      	bne.n	8002c7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c56:	2300      	movs	r3, #0
 8002c58:	623b      	str	r3, [r7, #32]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	623b      	str	r3, [r7, #32]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	623b      	str	r3, [r7, #32]
 8002c6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	e184      	b.n	8002f88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d11b      	bne.n	8002cbe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e164      	b.n	8002f88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d11b      	bne.n	8002cfe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	e144      	b.n	8002f88 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d14:	e138      	b.n	8002f88 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	f200 80f1 	bhi.w	8002f02 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d123      	bne.n	8002d70 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 fd49 	bl	80037c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e139      	b.n	8002fb0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d6e:	e10b      	b.n	8002f88 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d14e      	bne.n	8002e16 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7e:	2200      	movs	r2, #0
 8002d80:	4906      	ldr	r1, [pc, #24]	; (8002d9c <HAL_I2C_Mem_Read+0x22c>)
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fbc6 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d008      	beq.n	8002da0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e10e      	b.n	8002fb0 <HAL_I2C_Mem_Read+0x440>
 8002d92:	bf00      	nop
 8002d94:	00100002 	.word	0x00100002
 8002d98:	ffff0000 	.word	0xffff0000
 8002d9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e14:	e0b8      	b.n	8002f88 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	4966      	ldr	r1, [pc, #408]	; (8002fb8 <HAL_I2C_Mem_Read+0x448>)
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fb77 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0bf      	b.n	8002fb0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e78:	2200      	movs	r2, #0
 8002e7a:	494f      	ldr	r1, [pc, #316]	; (8002fb8 <HAL_I2C_Mem_Read+0x448>)
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fb49 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e091      	b.n	8002fb0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f00:	e042      	b.n	8002f88 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fc5c 	bl	80037c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e04c      	b.n	8002fb0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d118      	bne.n	8002f88 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f47f aec2 	bne.w	8002d16 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e000      	b.n	8002fb0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002fae:	2302      	movs	r3, #2
  }
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3728      	adds	r7, #40	; 0x28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	00010004 	.word	0x00010004

08002fbc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7fe ffee 	bl	8001fac <HAL_GetTick>
 8002fd0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	f040 8111 	bne.w	8003206 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2319      	movs	r3, #25
 8002fea:	2201      	movs	r2, #1
 8002fec:	4988      	ldr	r1, [pc, #544]	; (8003210 <HAL_I2C_IsDeviceReady+0x254>)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fa90 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e104      	b.n	8003208 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_I2C_IsDeviceReady+0x50>
 8003008:	2302      	movs	r3, #2
 800300a:	e0fd      	b.n	8003208 <HAL_I2C_IsDeviceReady+0x24c>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b01      	cmp	r3, #1
 8003020:	d007      	beq.n	8003032 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003040:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2224      	movs	r2, #36	; 0x24
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a70      	ldr	r2, [pc, #448]	; (8003214 <HAL_I2C_IsDeviceReady+0x258>)
 8003054:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003064:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2200      	movs	r2, #0
 800306e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fa4e 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00d      	beq.n	800309a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308c:	d103      	bne.n	8003096 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e0b6      	b.n	8003208 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800309a:	897b      	ldrh	r3, [r7, #10]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030a8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80030aa:	f7fe ff7f 	bl	8001fac <HAL_GetTick>
 80030ae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	bf0c      	ite	eq
 80030be:	2301      	moveq	r3, #1
 80030c0:	2300      	movne	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030de:	e025      	b.n	800312c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030e0:	f7fe ff64 	bl	8001fac <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d302      	bcc.n	80030f6 <HAL_I2C_IsDeviceReady+0x13a>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d103      	bne.n	80030fe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	22a0      	movs	r2, #160	; 0xa0
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b02      	cmp	r3, #2
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2ba0      	cmp	r3, #160	; 0xa0
 8003136:	d005      	beq.n	8003144 <HAL_I2C_IsDeviceReady+0x188>
 8003138:	7dfb      	ldrb	r3, [r7, #23]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <HAL_I2C_IsDeviceReady+0x188>
 800313e:	7dbb      	ldrb	r3, [r7, #22]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0cd      	beq.n	80030e0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b02      	cmp	r3, #2
 8003158:	d129      	bne.n	80031ae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003168:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800316a:	2300      	movs	r3, #0
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2319      	movs	r3, #25
 8003186:	2201      	movs	r2, #1
 8003188:	4921      	ldr	r1, [pc, #132]	; (8003210 <HAL_I2C_IsDeviceReady+0x254>)
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f9c2 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e036      	b.n	8003208 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e02c      	b.n	8003208 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031bc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031c6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2319      	movs	r3, #25
 80031ce:	2201      	movs	r2, #1
 80031d0:	490f      	ldr	r1, [pc, #60]	; (8003210 <HAL_I2C_IsDeviceReady+0x254>)
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f99e 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e012      	b.n	8003208 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	3301      	adds	r3, #1
 80031e6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	f4ff af32 	bcc.w	8003056 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003206:	2302      	movs	r3, #2
  }
}
 8003208:	4618      	mov	r0, r3
 800320a:	3720      	adds	r7, #32
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	00100002 	.word	0x00100002
 8003214:	ffff0000 	.word	0xffff0000

08003218 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	4608      	mov	r0, r1
 8003222:	4611      	mov	r1, r2
 8003224:	461a      	mov	r2, r3
 8003226:	4603      	mov	r3, r0
 8003228:	817b      	strh	r3, [r7, #10]
 800322a:	460b      	mov	r3, r1
 800322c:	813b      	strh	r3, [r7, #8]
 800322e:	4613      	mov	r3, r2
 8003230:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003240:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	2200      	movs	r2, #0
 800324a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f960 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00d      	beq.n	8003276 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003268:	d103      	bne.n	8003272 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003270:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e05f      	b.n	8003336 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003276:	897b      	ldrh	r3, [r7, #10]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003284:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	6a3a      	ldr	r2, [r7, #32]
 800328a:	492d      	ldr	r1, [pc, #180]	; (8003340 <I2C_RequestMemoryWrite+0x128>)
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f998 	bl	80035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e04c      	b.n	8003336 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b4:	6a39      	ldr	r1, [r7, #32]
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fa02 	bl	80036c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00d      	beq.n	80032de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d107      	bne.n	80032da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e02b      	b.n	8003336 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032de:	88fb      	ldrh	r3, [r7, #6]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d105      	bne.n	80032f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032e4:	893b      	ldrh	r3, [r7, #8]
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	611a      	str	r2, [r3, #16]
 80032ee:	e021      	b.n	8003334 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032f0:	893b      	ldrh	r3, [r7, #8]
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003300:	6a39      	ldr	r1, [r7, #32]
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f9dc 	bl	80036c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00d      	beq.n	800332a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b04      	cmp	r3, #4
 8003314:	d107      	bne.n	8003326 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003324:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e005      	b.n	8003336 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800332a:	893b      	ldrh	r3, [r7, #8]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	00010002 	.word	0x00010002

08003344 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af02      	add	r7, sp, #8
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	4608      	mov	r0, r1
 800334e:	4611      	mov	r1, r2
 8003350:	461a      	mov	r2, r3
 8003352:	4603      	mov	r3, r0
 8003354:	817b      	strh	r3, [r7, #10]
 8003356:	460b      	mov	r3, r1
 8003358:	813b      	strh	r3, [r7, #8]
 800335a:	4613      	mov	r3, r2
 800335c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800336c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800337c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	2200      	movs	r2, #0
 8003386:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f8c2 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00d      	beq.n	80033b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a4:	d103      	bne.n	80033ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e0aa      	b.n	8003508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033b2:	897b      	ldrh	r3, [r7, #10]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	6a3a      	ldr	r2, [r7, #32]
 80033c6:	4952      	ldr	r1, [pc, #328]	; (8003510 <I2C_RequestMemoryRead+0x1cc>)
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f8fa 	bl	80035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e097      	b.n	8003508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	6a39      	ldr	r1, [r7, #32]
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f964 	bl	80036c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00d      	beq.n	800341a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	2b04      	cmp	r3, #4
 8003404:	d107      	bne.n	8003416 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003414:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e076      	b.n	8003508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800341a:	88fb      	ldrh	r3, [r7, #6]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d105      	bne.n	800342c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003420:	893b      	ldrh	r3, [r7, #8]
 8003422:	b2da      	uxtb	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	611a      	str	r2, [r3, #16]
 800342a:	e021      	b.n	8003470 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800342c:	893b      	ldrh	r3, [r7, #8]
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	b29b      	uxth	r3, r3
 8003432:	b2da      	uxtb	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800343a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343c:	6a39      	ldr	r1, [r7, #32]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f93e 	bl	80036c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00d      	beq.n	8003466 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2b04      	cmp	r3, #4
 8003450:	d107      	bne.n	8003462 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003460:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e050      	b.n	8003508 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003466:	893b      	ldrh	r3, [r7, #8]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003472:	6a39      	ldr	r1, [r7, #32]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f923 	bl	80036c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00d      	beq.n	800349c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	2b04      	cmp	r3, #4
 8003486:	d107      	bne.n	8003498 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003496:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e035      	b.n	8003508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f82b 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00d      	beq.n	80034e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034d2:	d103      	bne.n	80034dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e013      	b.n	8003508 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034e0:	897b      	ldrh	r3, [r7, #10]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	6a3a      	ldr	r2, [r7, #32]
 80034f4:	4906      	ldr	r1, [pc, #24]	; (8003510 <I2C_RequestMemoryRead+0x1cc>)
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f863 	bl	80035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	00010002 	.word	0x00010002

08003514 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003524:	e025      	b.n	8003572 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352c:	d021      	beq.n	8003572 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352e:	f7fe fd3d 	bl	8001fac <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <I2C_WaitOnFlagUntilTimeout+0x30>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d116      	bne.n	8003572 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f043 0220 	orr.w	r2, r3, #32
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e023      	b.n	80035ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	0c1b      	lsrs	r3, r3, #16
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	d10d      	bne.n	8003598 <I2C_WaitOnFlagUntilTimeout+0x84>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	43da      	mvns	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4013      	ands	r3, r2
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	bf0c      	ite	eq
 800358e:	2301      	moveq	r3, #1
 8003590:	2300      	movne	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	461a      	mov	r2, r3
 8003596:	e00c      	b.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	43da      	mvns	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4013      	ands	r3, r2
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf0c      	ite	eq
 80035aa:	2301      	moveq	r3, #1
 80035ac:	2300      	movne	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d0b6      	beq.n	8003526 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	607a      	str	r2, [r7, #4]
 80035ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035d0:	e051      	b.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e0:	d123      	bne.n	800362a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f043 0204 	orr.w	r2, r3, #4
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e046      	b.n	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d021      	beq.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7fe fcbb 	bl	8001fac <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d116      	bne.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f043 0220 	orr.w	r2, r3, #32
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e020      	b.n	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	0c1b      	lsrs	r3, r3, #16
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b01      	cmp	r3, #1
 800367e:	d10c      	bne.n	800369a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	43da      	mvns	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4013      	ands	r3, r2
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	bf14      	ite	ne
 8003692:	2301      	movne	r3, #1
 8003694:	2300      	moveq	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	e00b      	b.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	43da      	mvns	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4013      	ands	r3, r2
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf14      	ite	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	2300      	moveq	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d18d      	bne.n	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036cc:	e02d      	b.n	800372a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f8ce 	bl	8003870 <I2C_IsAcknowledgeFailed>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e02d      	b.n	800373a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e4:	d021      	beq.n	800372a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e6:	f7fe fc61 	bl	8001fac <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d116      	bne.n	800372a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f043 0220 	orr.w	r2, r3, #32
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e007      	b.n	800373a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003734:	2b80      	cmp	r3, #128	; 0x80
 8003736:	d1ca      	bne.n	80036ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800374e:	e02d      	b.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f88d 	bl	8003870 <I2C_IsAcknowledgeFailed>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e02d      	b.n	80037bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003766:	d021      	beq.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003768:	f7fe fc20 	bl	8001fac <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	429a      	cmp	r2, r3
 8003776:	d302      	bcc.n	800377e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d116      	bne.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f043 0220 	orr.w	r2, r3, #32
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e007      	b.n	80037bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d1ca      	bne.n	8003750 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037d0:	e042      	b.n	8003858 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b10      	cmp	r3, #16
 80037de:	d119      	bne.n	8003814 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0210 	mvn.w	r2, #16
 80037e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e029      	b.n	8003868 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003814:	f7fe fbca 	bl	8001fac <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	429a      	cmp	r2, r3
 8003822:	d302      	bcc.n	800382a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d116      	bne.n	8003858 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	f043 0220 	orr.w	r2, r3, #32
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e007      	b.n	8003868 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b40      	cmp	r3, #64	; 0x40
 8003864:	d1b5      	bne.n	80037d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003886:	d11b      	bne.n	80038c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003890:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	f043 0204 	orr.w	r2, r3, #4
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e264      	b.n	8003dac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d075      	beq.n	80039da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ee:	4ba3      	ldr	r3, [pc, #652]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d00c      	beq.n	8003914 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fa:	4ba0      	ldr	r3, [pc, #640]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003902:	2b08      	cmp	r3, #8
 8003904:	d112      	bne.n	800392c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003906:	4b9d      	ldr	r3, [pc, #628]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003912:	d10b      	bne.n	800392c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	4b99      	ldr	r3, [pc, #612]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d05b      	beq.n	80039d8 <HAL_RCC_OscConfig+0x108>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d157      	bne.n	80039d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e23f      	b.n	8003dac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003934:	d106      	bne.n	8003944 <HAL_RCC_OscConfig+0x74>
 8003936:	4b91      	ldr	r3, [pc, #580]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a90      	ldr	r2, [pc, #576]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e01d      	b.n	8003980 <HAL_RCC_OscConfig+0xb0>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800394c:	d10c      	bne.n	8003968 <HAL_RCC_OscConfig+0x98>
 800394e:	4b8b      	ldr	r3, [pc, #556]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a8a      	ldr	r2, [pc, #552]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	4b88      	ldr	r3, [pc, #544]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a87      	ldr	r2, [pc, #540]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e00b      	b.n	8003980 <HAL_RCC_OscConfig+0xb0>
 8003968:	4b84      	ldr	r3, [pc, #528]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a83      	ldr	r2, [pc, #524]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 800396e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b81      	ldr	r3, [pc, #516]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a80      	ldr	r2, [pc, #512]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 800397a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d013      	beq.n	80039b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fe fb10 	bl	8001fac <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003990:	f7fe fb0c 	bl	8001fac <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e204      	b.n	8003dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a2:	4b76      	ldr	r3, [pc, #472]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0xc0>
 80039ae:	e014      	b.n	80039da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7fe fafc 	bl	8001fac <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b8:	f7fe faf8 	bl	8001fac <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e1f0      	b.n	8003dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ca:	4b6c      	ldr	r3, [pc, #432]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0xe8>
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d063      	beq.n	8003aae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039e6:	4b65      	ldr	r3, [pc, #404]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039f2:	4b62      	ldr	r3, [pc, #392]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d11c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fe:	4b5f      	ldr	r3, [pc, #380]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d116      	bne.n	8003a38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0a:	4b5c      	ldr	r3, [pc, #368]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_RCC_OscConfig+0x152>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d001      	beq.n	8003a22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e1c4      	b.n	8003dac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a22:	4b56      	ldr	r3, [pc, #344]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4952      	ldr	r1, [pc, #328]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a36:	e03a      	b.n	8003aae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d020      	beq.n	8003a82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a40:	4b4f      	ldr	r3, [pc, #316]	; (8003b80 <HAL_RCC_OscConfig+0x2b0>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a46:	f7fe fab1 	bl	8001fac <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a4e:	f7fe faad 	bl	8001fac <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e1a5      	b.n	8003dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a60:	4b46      	ldr	r3, [pc, #280]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6c:	4b43      	ldr	r3, [pc, #268]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4940      	ldr	r1, [pc, #256]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	600b      	str	r3, [r1, #0]
 8003a80:	e015      	b.n	8003aae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a82:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <HAL_RCC_OscConfig+0x2b0>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7fe fa90 	bl	8001fac <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a90:	f7fe fa8c 	bl	8001fac <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e184      	b.n	8003dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa2:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d030      	beq.n	8003b1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d016      	beq.n	8003af0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ac2:	4b30      	ldr	r3, [pc, #192]	; (8003b84 <HAL_RCC_OscConfig+0x2b4>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7fe fa70 	bl	8001fac <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad0:	f7fe fa6c 	bl	8001fac <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e164      	b.n	8003dac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae2:	4b26      	ldr	r3, [pc, #152]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x200>
 8003aee:	e015      	b.n	8003b1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af0:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <HAL_RCC_OscConfig+0x2b4>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af6:	f7fe fa59 	bl	8001fac <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003afe:	f7fe fa55 	bl	8001fac <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e14d      	b.n	8003dac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b10:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f0      	bne.n	8003afe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80a0 	beq.w	8003c6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2e:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10f      	bne.n	8003b5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	4a0e      	ldr	r2, [pc, #56]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b48:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_OscConfig+0x2b8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d121      	bne.n	8003baa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <HAL_RCC_OscConfig+0x2b8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a07      	ldr	r2, [pc, #28]	; (8003b88 <HAL_RCC_OscConfig+0x2b8>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b72:	f7fe fa1b 	bl	8001fac <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	e011      	b.n	8003b9e <HAL_RCC_OscConfig+0x2ce>
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	42470000 	.word	0x42470000
 8003b84:	42470e80 	.word	0x42470e80
 8003b88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8c:	f7fe fa0e 	bl	8001fac <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e106      	b.n	8003dac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9e:	4b85      	ldr	r3, [pc, #532]	; (8003db4 <HAL_RCC_OscConfig+0x4e4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d106      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x2f0>
 8003bb2:	4b81      	ldr	r3, [pc, #516]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	4a80      	ldr	r2, [pc, #512]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bbe:	e01c      	b.n	8003bfa <HAL_RCC_OscConfig+0x32a>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	d10c      	bne.n	8003be2 <HAL_RCC_OscConfig+0x312>
 8003bc8:	4b7b      	ldr	r3, [pc, #492]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	4a7a      	ldr	r2, [pc, #488]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003bce:	f043 0304 	orr.w	r3, r3, #4
 8003bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd4:	4b78      	ldr	r3, [pc, #480]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a77      	ldr	r2, [pc, #476]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
 8003be0:	e00b      	b.n	8003bfa <HAL_RCC_OscConfig+0x32a>
 8003be2:	4b75      	ldr	r3, [pc, #468]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	4a74      	ldr	r2, [pc, #464]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	6713      	str	r3, [r2, #112]	; 0x70
 8003bee:	4b72      	ldr	r3, [pc, #456]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	4a71      	ldr	r2, [pc, #452]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d015      	beq.n	8003c2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c02:	f7fe f9d3 	bl	8001fac <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c08:	e00a      	b.n	8003c20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c0a:	f7fe f9cf 	bl	8001fac <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e0c5      	b.n	8003dac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c20:	4b65      	ldr	r3, [pc, #404]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ee      	beq.n	8003c0a <HAL_RCC_OscConfig+0x33a>
 8003c2c:	e014      	b.n	8003c58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2e:	f7fe f9bd 	bl	8001fac <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c36:	f7fe f9b9 	bl	8001fac <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e0af      	b.n	8003dac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4c:	4b5a      	ldr	r3, [pc, #360]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ee      	bne.n	8003c36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d105      	bne.n	8003c6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c5e:	4b56      	ldr	r3, [pc, #344]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	4a55      	ldr	r2, [pc, #340]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 809b 	beq.w	8003daa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c74:	4b50      	ldr	r3, [pc, #320]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d05c      	beq.n	8003d3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d141      	bne.n	8003d0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c88:	4b4c      	ldr	r3, [pc, #304]	; (8003dbc <HAL_RCC_OscConfig+0x4ec>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8e:	f7fe f98d 	bl	8001fac <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c96:	f7fe f989 	bl	8001fac <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e081      	b.n	8003dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca8:	4b43      	ldr	r3, [pc, #268]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	019b      	lsls	r3, r3, #6
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	085b      	lsrs	r3, r3, #1
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	041b      	lsls	r3, r3, #16
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	061b      	lsls	r3, r3, #24
 8003cd8:	4937      	ldr	r1, [pc, #220]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cde:	4b37      	ldr	r3, [pc, #220]	; (8003dbc <HAL_RCC_OscConfig+0x4ec>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce4:	f7fe f962 	bl	8001fac <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fe f95e 	bl	8001fac <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e056      	b.n	8003dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfe:	4b2e      	ldr	r3, [pc, #184]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x41c>
 8003d0a:	e04e      	b.n	8003daa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0c:	4b2b      	ldr	r3, [pc, #172]	; (8003dbc <HAL_RCC_OscConfig+0x4ec>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7fe f94b 	bl	8001fac <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1a:	f7fe f947 	bl	8001fac <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e03f      	b.n	8003dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2c:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0x44a>
 8003d38:	e037      	b.n	8003daa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e032      	b.n	8003dac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d46:	4b1c      	ldr	r3, [pc, #112]	; (8003db8 <HAL_RCC_OscConfig+0x4e8>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d028      	beq.n	8003da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d121      	bne.n	8003da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d11a      	bne.n	8003da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d76:	4013      	ands	r3, r2
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d111      	bne.n	8003da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	085b      	lsrs	r3, r3, #1
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d107      	bne.n	8003da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d001      	beq.n	8003daa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40007000 	.word	0x40007000
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	42470060 	.word	0x42470060

08003dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0cc      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd4:	4b68      	ldr	r3, [pc, #416]	; (8003f78 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d90c      	bls.n	8003dfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de2:	4b65      	ldr	r3, [pc, #404]	; (8003f78 <HAL_RCC_ClockConfig+0x1b8>)
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dea:	4b63      	ldr	r3, [pc, #396]	; (8003f78 <HAL_RCC_ClockConfig+0x1b8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0b8      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d020      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e14:	4b59      	ldr	r3, [pc, #356]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	4a58      	ldr	r2, [pc, #352]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e2c:	4b53      	ldr	r3, [pc, #332]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	4a52      	ldr	r2, [pc, #328]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e38:	4b50      	ldr	r3, [pc, #320]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	494d      	ldr	r1, [pc, #308]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d044      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d107      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5e:	4b47      	ldr	r3, [pc, #284]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d119      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e07f      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d003      	beq.n	8003e7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d107      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7e:	4b3f      	ldr	r3, [pc, #252]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e06f      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8e:	4b3b      	ldr	r3, [pc, #236]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e067      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e9e:	4b37      	ldr	r3, [pc, #220]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f023 0203 	bic.w	r2, r3, #3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4934      	ldr	r1, [pc, #208]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eb0:	f7fe f87c 	bl	8001fac <HAL_GetTick>
 8003eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb6:	e00a      	b.n	8003ece <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb8:	f7fe f878 	bl	8001fac <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e04f      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ece:	4b2b      	ldr	r3, [pc, #172]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 020c 	and.w	r2, r3, #12
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d1eb      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee0:	4b25      	ldr	r3, [pc, #148]	; (8003f78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d20c      	bcs.n	8003f08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eee:	4b22      	ldr	r3, [pc, #136]	; (8003f78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef6:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d001      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e032      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f14:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	4916      	ldr	r1, [pc, #88]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	490e      	ldr	r1, [pc, #56]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f46:	f000 f821 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	490a      	ldr	r1, [pc, #40]	; (8003f80 <HAL_RCC_ClockConfig+0x1c0>)
 8003f58:	5ccb      	ldrb	r3, [r1, r3]
 8003f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5e:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <HAL_RCC_ClockConfig+0x1c4>)
 8003f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f62:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <HAL_RCC_ClockConfig+0x1c8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fd ffdc 	bl	8001f24 <HAL_InitTick>

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40023c00 	.word	0x40023c00
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	0800d71c 	.word	0x0800d71c
 8003f84:	20000008 	.word	0x20000008
 8003f88:	2000000c 	.word	0x2000000c

08003f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	607b      	str	r3, [r7, #4]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fa4:	4b67      	ldr	r3, [pc, #412]	; (8004144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 030c 	and.w	r3, r3, #12
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d00d      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x40>
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	f200 80bd 	bhi.w	8004130 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d003      	beq.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fbe:	e0b7      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fc0:	4b61      	ldr	r3, [pc, #388]	; (8004148 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003fc2:	60bb      	str	r3, [r7, #8]
       break;
 8003fc4:	e0b7      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fc6:	4b61      	ldr	r3, [pc, #388]	; (800414c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003fc8:	60bb      	str	r3, [r7, #8]
      break;
 8003fca:	e0b4      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fcc:	4b5d      	ldr	r3, [pc, #372]	; (8004144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fd6:	4b5b      	ldr	r3, [pc, #364]	; (8004144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d04d      	beq.n	800407e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe2:	4b58      	ldr	r3, [pc, #352]	; (8004144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	099b      	lsrs	r3, r3, #6
 8003fe8:	461a      	mov	r2, r3
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ff2:	f04f 0100 	mov.w	r1, #0
 8003ff6:	ea02 0800 	and.w	r8, r2, r0
 8003ffa:	ea03 0901 	and.w	r9, r3, r1
 8003ffe:	4640      	mov	r0, r8
 8004000:	4649      	mov	r1, r9
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	014b      	lsls	r3, r1, #5
 800400c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004010:	0142      	lsls	r2, r0, #5
 8004012:	4610      	mov	r0, r2
 8004014:	4619      	mov	r1, r3
 8004016:	ebb0 0008 	subs.w	r0, r0, r8
 800401a:	eb61 0109 	sbc.w	r1, r1, r9
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	018b      	lsls	r3, r1, #6
 8004028:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800402c:	0182      	lsls	r2, r0, #6
 800402e:	1a12      	subs	r2, r2, r0
 8004030:	eb63 0301 	sbc.w	r3, r3, r1
 8004034:	f04f 0000 	mov.w	r0, #0
 8004038:	f04f 0100 	mov.w	r1, #0
 800403c:	00d9      	lsls	r1, r3, #3
 800403e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004042:	00d0      	lsls	r0, r2, #3
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	eb12 0208 	adds.w	r2, r2, r8
 800404c:	eb43 0309 	adc.w	r3, r3, r9
 8004050:	f04f 0000 	mov.w	r0, #0
 8004054:	f04f 0100 	mov.w	r1, #0
 8004058:	0259      	lsls	r1, r3, #9
 800405a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800405e:	0250      	lsls	r0, r2, #9
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4610      	mov	r0, r2
 8004066:	4619      	mov	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	461a      	mov	r2, r3
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	f7fc f8b2 	bl	80001d8 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4613      	mov	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	e04a      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407e:	4b31      	ldr	r3, [pc, #196]	; (8004144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	099b      	lsrs	r3, r3, #6
 8004084:	461a      	mov	r2, r3
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	ea02 0400 	and.w	r4, r2, r0
 8004096:	ea03 0501 	and.w	r5, r3, r1
 800409a:	4620      	mov	r0, r4
 800409c:	4629      	mov	r1, r5
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	014b      	lsls	r3, r1, #5
 80040a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040ac:	0142      	lsls	r2, r0, #5
 80040ae:	4610      	mov	r0, r2
 80040b0:	4619      	mov	r1, r3
 80040b2:	1b00      	subs	r0, r0, r4
 80040b4:	eb61 0105 	sbc.w	r1, r1, r5
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	018b      	lsls	r3, r1, #6
 80040c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040c6:	0182      	lsls	r2, r0, #6
 80040c8:	1a12      	subs	r2, r2, r0
 80040ca:	eb63 0301 	sbc.w	r3, r3, r1
 80040ce:	f04f 0000 	mov.w	r0, #0
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	00d9      	lsls	r1, r3, #3
 80040d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040dc:	00d0      	lsls	r0, r2, #3
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	1912      	adds	r2, r2, r4
 80040e4:	eb45 0303 	adc.w	r3, r5, r3
 80040e8:	f04f 0000 	mov.w	r0, #0
 80040ec:	f04f 0100 	mov.w	r1, #0
 80040f0:	0299      	lsls	r1, r3, #10
 80040f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80040f6:	0290      	lsls	r0, r2, #10
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4610      	mov	r0, r2
 80040fe:	4619      	mov	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	461a      	mov	r2, r3
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	f7fc f866 	bl	80001d8 <__aeabi_uldivmod>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4613      	mov	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	0c1b      	lsrs	r3, r3, #16
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	3301      	adds	r3, #1
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	fbb2 f3f3 	udiv	r3, r2, r3
 800412c:	60bb      	str	r3, [r7, #8]
      break;
 800412e:	e002      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004132:	60bb      	str	r3, [r7, #8]
      break;
 8004134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004136:	68bb      	ldr	r3, [r7, #8]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004142:	bf00      	nop
 8004144:	40023800 	.word	0x40023800
 8004148:	00f42400 	.word	0x00f42400
 800414c:	007a1200 	.word	0x007a1200

08004150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <HAL_RCC_GetHCLKFreq+0x14>)
 8004156:	681b      	ldr	r3, [r3, #0]
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000008 	.word	0x20000008

08004168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800416c:	f7ff fff0 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	0a9b      	lsrs	r3, r3, #10
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4903      	ldr	r1, [pc, #12]	; (800418c <HAL_RCC_GetPCLK1Freq+0x24>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004184:	4618      	mov	r0, r3
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40023800 	.word	0x40023800
 800418c:	0800d72c 	.word	0x0800d72c

08004190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004194:	f7ff ffdc 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 8004198:	4602      	mov	r2, r0
 800419a:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	0b5b      	lsrs	r3, r3, #13
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	4903      	ldr	r1, [pc, #12]	; (80041b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041a6:	5ccb      	ldrb	r3, [r1, r3]
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40023800 	.word	0x40023800
 80041b4:	0800d72c 	.word	0x0800d72c

080041b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e07b      	b.n	80042c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d108      	bne.n	80041e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041da:	d009      	beq.n	80041f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	61da      	str	r2, [r3, #28]
 80041e2:	e005      	b.n	80041f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fd fc08 	bl	8001a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004226:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004274:	ea42 0103 	orr.w	r1, r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	0c1b      	lsrs	r3, r3, #16
 800428e:	f003 0104 	and.w	r1, r3, #4
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	f003 0210 	and.w	r2, r3, #16
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b088      	sub	sp, #32
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	4613      	mov	r3, r2
 80042d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_SPI_Transmit+0x22>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e126      	b.n	800453a <HAL_SPI_Transmit+0x270>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042f4:	f7fd fe5a 	bl	8001fac <HAL_GetTick>
 80042f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b01      	cmp	r3, #1
 8004308:	d002      	beq.n	8004310 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800430a:	2302      	movs	r3, #2
 800430c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800430e:	e10b      	b.n	8004528 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_SPI_Transmit+0x52>
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d102      	bne.n	8004322 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004320:	e102      	b.n	8004528 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2203      	movs	r2, #3
 8004326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	88fa      	ldrh	r2, [r7, #6]
 8004340:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004368:	d10f      	bne.n	800438a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004378:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004388:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	d007      	beq.n	80043a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b0:	d14b      	bne.n	800444a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <HAL_SPI_Transmit+0xf6>
 80043ba:	8afb      	ldrh	r3, [r7, #22]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d13e      	bne.n	800443e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c4:	881a      	ldrh	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	1c9a      	adds	r2, r3, #2
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043e4:	e02b      	b.n	800443e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d112      	bne.n	800441a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	881a      	ldrh	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004404:	1c9a      	adds	r2, r3, #2
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	86da      	strh	r2, [r3, #54]	; 0x36
 8004418:	e011      	b.n	800443e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800441a:	f7fd fdc7 	bl	8001fac <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d803      	bhi.n	8004432 <HAL_SPI_Transmit+0x168>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004430:	d102      	bne.n	8004438 <HAL_SPI_Transmit+0x16e>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d102      	bne.n	800443e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800443c:	e074      	b.n	8004528 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1ce      	bne.n	80043e6 <HAL_SPI_Transmit+0x11c>
 8004448:	e04c      	b.n	80044e4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <HAL_SPI_Transmit+0x18e>
 8004452:	8afb      	ldrh	r3, [r7, #22]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d140      	bne.n	80044da <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	7812      	ldrb	r2, [r2, #0]
 8004464:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800447e:	e02c      	b.n	80044da <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b02      	cmp	r3, #2
 800448c:	d113      	bne.n	80044b6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	330c      	adds	r3, #12
 8004498:	7812      	ldrb	r2, [r2, #0]
 800449a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80044b4:	e011      	b.n	80044da <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044b6:	f7fd fd79 	bl	8001fac <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d803      	bhi.n	80044ce <HAL_SPI_Transmit+0x204>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044cc:	d102      	bne.n	80044d4 <HAL_SPI_Transmit+0x20a>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d102      	bne.n	80044da <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044d8:	e026      	b.n	8004528 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1cd      	bne.n	8004480 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	6839      	ldr	r1, [r7, #0]
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fbcb 	bl	8004c84 <SPI_EndRxTxTransaction>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2220      	movs	r2, #32
 80044f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10a      	bne.n	8004518 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004502:	2300      	movs	r3, #0
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	77fb      	strb	r3, [r7, #31]
 8004524:	e000      	b.n	8004528 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004526:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004538:	7ffb      	ldrb	r3, [r7, #31]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b088      	sub	sp, #32
 8004546:	af02      	add	r7, sp, #8
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	603b      	str	r3, [r7, #0]
 800454e:	4613      	mov	r3, r2
 8004550:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800455e:	d112      	bne.n	8004586 <HAL_SPI_Receive+0x44>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10e      	bne.n	8004586 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2204      	movs	r2, #4
 800456c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004570:	88fa      	ldrh	r2, [r7, #6]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	4613      	mov	r3, r2
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f8f1 	bl	8004764 <HAL_SPI_TransmitReceive>
 8004582:	4603      	mov	r3, r0
 8004584:	e0ea      	b.n	800475c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_SPI_Receive+0x52>
 8004590:	2302      	movs	r3, #2
 8004592:	e0e3      	b.n	800475c <HAL_SPI_Receive+0x21a>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800459c:	f7fd fd06 	bl	8001fac <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d002      	beq.n	80045b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80045ae:	2302      	movs	r3, #2
 80045b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045b2:	e0ca      	b.n	800474a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_SPI_Receive+0x7e>
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045c4:	e0c1      	b.n	800474a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2204      	movs	r2, #4
 80045ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	88fa      	ldrh	r2, [r7, #6]
 80045de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	88fa      	ldrh	r2, [r7, #6]
 80045e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800460c:	d10f      	bne.n	800462e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800461c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800462c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004638:	2b40      	cmp	r3, #64	; 0x40
 800463a:	d007      	beq.n	800464c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800464a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d162      	bne.n	800471a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004654:	e02e      	b.n	80046b4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b01      	cmp	r3, #1
 8004662:	d115      	bne.n	8004690 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f103 020c 	add.w	r2, r3, #12
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	7812      	ldrb	r2, [r2, #0]
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800468e:	e011      	b.n	80046b4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004690:	f7fd fc8c 	bl	8001fac <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d803      	bhi.n	80046a8 <HAL_SPI_Receive+0x166>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a6:	d102      	bne.n	80046ae <HAL_SPI_Receive+0x16c>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046b2:	e04a      	b.n	800474a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1cb      	bne.n	8004656 <HAL_SPI_Receive+0x114>
 80046be:	e031      	b.n	8004724 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d113      	bne.n	80046f6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	b292      	uxth	r2, r2
 80046da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	1c9a      	adds	r2, r3, #2
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046f4:	e011      	b.n	800471a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046f6:	f7fd fc59 	bl	8001fac <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d803      	bhi.n	800470e <HAL_SPI_Receive+0x1cc>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d102      	bne.n	8004714 <HAL_SPI_Receive+0x1d2>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004718:	e017      	b.n	800474a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1cd      	bne.n	80046c0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	6839      	ldr	r1, [r7, #0]
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 fa45 	bl	8004bb8 <SPI_EndRxTransaction>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	75fb      	strb	r3, [r7, #23]
 8004746:	e000      	b.n	800474a <HAL_SPI_Receive+0x208>
  }

error :
 8004748:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800475a:	7dfb      	ldrb	r3, [r7, #23]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08c      	sub	sp, #48	; 0x30
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004772:	2301      	movs	r3, #1
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_SPI_TransmitReceive+0x26>
 8004786:	2302      	movs	r3, #2
 8004788:	e18a      	b.n	8004aa0 <HAL_SPI_TransmitReceive+0x33c>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004792:	f7fd fc0b 	bl	8001fac <HAL_GetTick>
 8004796:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80047a8:	887b      	ldrh	r3, [r7, #2]
 80047aa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d00f      	beq.n	80047d4 <HAL_SPI_TransmitReceive+0x70>
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ba:	d107      	bne.n	80047cc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d103      	bne.n	80047cc <HAL_SPI_TransmitReceive+0x68>
 80047c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d003      	beq.n	80047d4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80047cc:	2302      	movs	r3, #2
 80047ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047d2:	e15b      	b.n	8004a8c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_SPI_TransmitReceive+0x82>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <HAL_SPI_TransmitReceive+0x82>
 80047e0:	887b      	ldrh	r3, [r7, #2]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d103      	bne.n	80047ee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047ec:	e14e      	b.n	8004a8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d003      	beq.n	8004802 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2205      	movs	r2, #5
 80047fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	887a      	ldrh	r2, [r7, #2]
 8004812:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	887a      	ldrh	r2, [r7, #2]
 8004818:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	887a      	ldrh	r2, [r7, #2]
 8004824:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	887a      	ldrh	r2, [r7, #2]
 800482a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b40      	cmp	r3, #64	; 0x40
 8004844:	d007      	beq.n	8004856 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004854:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800485e:	d178      	bne.n	8004952 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <HAL_SPI_TransmitReceive+0x10a>
 8004868:	8b7b      	ldrh	r3, [r7, #26]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d166      	bne.n	800493c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	881a      	ldrh	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	1c9a      	adds	r2, r3, #2
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004892:	e053      	b.n	800493c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d11b      	bne.n	80048da <HAL_SPI_TransmitReceive+0x176>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d016      	beq.n	80048da <HAL_SPI_TransmitReceive+0x176>
 80048ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d113      	bne.n	80048da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	881a      	ldrh	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	1c9a      	adds	r2, r3, #2
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d119      	bne.n	800491c <HAL_SPI_TransmitReceive+0x1b8>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d014      	beq.n	800491c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	b292      	uxth	r2, r2
 80048fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	1c9a      	adds	r2, r3, #2
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004918:	2301      	movs	r3, #1
 800491a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800491c:	f7fd fb46 	bl	8001fac <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004928:	429a      	cmp	r2, r3
 800492a:	d807      	bhi.n	800493c <HAL_SPI_TransmitReceive+0x1d8>
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004932:	d003      	beq.n	800493c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800493a:	e0a7      	b.n	8004a8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1a6      	bne.n	8004894 <HAL_SPI_TransmitReceive+0x130>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1a1      	bne.n	8004894 <HAL_SPI_TransmitReceive+0x130>
 8004950:	e07c      	b.n	8004a4c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <HAL_SPI_TransmitReceive+0x1fc>
 800495a:	8b7b      	ldrh	r3, [r7, #26]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d16b      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	7812      	ldrb	r2, [r2, #0]
 800496c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004986:	e057      	b.n	8004a38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b02      	cmp	r3, #2
 8004994:	d11c      	bne.n	80049d0 <HAL_SPI_TransmitReceive+0x26c>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d017      	beq.n	80049d0 <HAL_SPI_TransmitReceive+0x26c>
 80049a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d114      	bne.n	80049d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	330c      	adds	r3, #12
 80049b0:	7812      	ldrb	r2, [r2, #0]
 80049b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d119      	bne.n	8004a12 <HAL_SPI_TransmitReceive+0x2ae>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d014      	beq.n	8004a12 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a12:	f7fd facb 	bl	8001fac <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d803      	bhi.n	8004a2a <HAL_SPI_TransmitReceive+0x2c6>
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d102      	bne.n	8004a30 <HAL_SPI_TransmitReceive+0x2cc>
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d103      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a36:	e029      	b.n	8004a8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1a2      	bne.n	8004988 <HAL_SPI_TransmitReceive+0x224>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d19d      	bne.n	8004988 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f917 	bl	8004c84 <SPI_EndRxTxTransaction>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d006      	beq.n	8004a6a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2220      	movs	r2, #32
 8004a66:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a68:	e010      	b.n	8004a8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	e000      	b.n	8004a8c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004a8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3730      	adds	r7, #48	; 0x30
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ab8:	f7fd fa78 	bl	8001fac <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	1a9b      	subs	r3, r3, r2
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ac8:	f7fd fa70 	bl	8001fac <HAL_GetTick>
 8004acc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ace:	4b39      	ldr	r3, [pc, #228]	; (8004bb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	015b      	lsls	r3, r3, #5
 8004ad4:	0d1b      	lsrs	r3, r3, #20
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	fb02 f303 	mul.w	r3, r2, r3
 8004adc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ade:	e054      	b.n	8004b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae6:	d050      	beq.n	8004b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ae8:	f7fd fa60 	bl	8001fac <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	69fa      	ldr	r2, [r7, #28]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d902      	bls.n	8004afe <SPI_WaitFlagStateUntilTimeout+0x56>
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d13d      	bne.n	8004b7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b16:	d111      	bne.n	8004b3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b20:	d004      	beq.n	8004b2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2a:	d107      	bne.n	8004b3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b44:	d10f      	bne.n	8004b66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e017      	b.n	8004baa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4013      	ands	r3, r2
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	bf0c      	ite	eq
 8004b9a:	2301      	moveq	r3, #1
 8004b9c:	2300      	movne	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d19b      	bne.n	8004ae0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3720      	adds	r7, #32
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000008 	.word	0x20000008

08004bb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bcc:	d111      	bne.n	8004bf2 <SPI_EndRxTransaction+0x3a>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd6:	d004      	beq.n	8004be2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be0:	d107      	bne.n	8004bf2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bfa:	d12a      	bne.n	8004c52 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c04:	d012      	beq.n	8004c2c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2180      	movs	r1, #128	; 0x80
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f7ff ff49 	bl	8004aa8 <SPI_WaitFlagStateUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d02d      	beq.n	8004c78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c20:	f043 0220 	orr.w	r2, r3, #32
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e026      	b.n	8004c7a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2200      	movs	r2, #0
 8004c34:	2101      	movs	r1, #1
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff ff36 	bl	8004aa8 <SPI_WaitFlagStateUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d01a      	beq.n	8004c78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c46:	f043 0220 	orr.w	r2, r3, #32
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e013      	b.n	8004c7a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7ff ff23 	bl	8004aa8 <SPI_WaitFlagStateUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d007      	beq.n	8004c78 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6c:	f043 0220 	orr.w	r2, r3, #32
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e000      	b.n	8004c7a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c90:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <SPI_EndRxTxTransaction+0x7c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a1b      	ldr	r2, [pc, #108]	; (8004d04 <SPI_EndRxTxTransaction+0x80>)
 8004c96:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9a:	0d5b      	lsrs	r3, r3, #21
 8004c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ca0:	fb02 f303 	mul.w	r3, r2, r3
 8004ca4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cae:	d112      	bne.n	8004cd6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2180      	movs	r1, #128	; 0x80
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f7ff fef4 	bl	8004aa8 <SPI_WaitFlagStateUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d016      	beq.n	8004cf4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cca:	f043 0220 	orr.w	r2, r3, #32
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e00f      	b.n	8004cf6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cec:	2b80      	cmp	r3, #128	; 0x80
 8004cee:	d0f2      	beq.n	8004cd6 <SPI_EndRxTxTransaction+0x52>
 8004cf0:	e000      	b.n	8004cf4 <SPI_EndRxTxTransaction+0x70>
        break;
 8004cf2:	bf00      	nop
  }

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000008 	.word	0x20000008
 8004d04:	165e9f81 	.word	0x165e9f81

08004d08 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e034      	b.n	8004d88 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f7fc ff7e 	bl	8001c34 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	3308      	adds	r3, #8
 8004d40:	4619      	mov	r1, r3
 8004d42:	4610      	mov	r0, r2
 8004d44:	f001 fc6e 	bl	8006624 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	461a      	mov	r2, r3
 8004d52:	68b9      	ldr	r1, [r7, #8]
 8004d54:	f001 fcb8 	bl	80066c8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6858      	ldr	r0, [r3, #4]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	f001 fced 	bl	8006744 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	6892      	ldr	r2, [r2, #8]
 8004d72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	6892      	ldr	r2, [r2, #8]
 8004d7e:	f041 0101 	orr.w	r1, r1, #1
 8004d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e041      	b.n	8004e26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fc fe7a 	bl	8001ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4610      	mov	r0, r2
 8004dd0:	f000 fa96 	bl	8005300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d001      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e04e      	b.n	8004ee6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a23      	ldr	r2, [pc, #140]	; (8004ef4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d022      	beq.n	8004eb0 <HAL_TIM_Base_Start_IT+0x80>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e72:	d01d      	beq.n	8004eb0 <HAL_TIM_Base_Start_IT+0x80>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a1f      	ldr	r2, [pc, #124]	; (8004ef8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d018      	beq.n	8004eb0 <HAL_TIM_Base_Start_IT+0x80>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a1e      	ldr	r2, [pc, #120]	; (8004efc <HAL_TIM_Base_Start_IT+0xcc>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d013      	beq.n	8004eb0 <HAL_TIM_Base_Start_IT+0x80>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1c      	ldr	r2, [pc, #112]	; (8004f00 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00e      	beq.n	8004eb0 <HAL_TIM_Base_Start_IT+0x80>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1b      	ldr	r2, [pc, #108]	; (8004f04 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d009      	beq.n	8004eb0 <HAL_TIM_Base_Start_IT+0x80>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a19      	ldr	r2, [pc, #100]	; (8004f08 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d004      	beq.n	8004eb0 <HAL_TIM_Base_Start_IT+0x80>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a18      	ldr	r2, [pc, #96]	; (8004f0c <HAL_TIM_Base_Start_IT+0xdc>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d111      	bne.n	8004ed4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b06      	cmp	r3, #6
 8004ec0:	d010      	beq.n	8004ee4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0201 	orr.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed2:	e007      	b.n	8004ee4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40000400 	.word	0x40000400
 8004efc:	40000800 	.word	0x40000800
 8004f00:	40000c00 	.word	0x40000c00
 8004f04:	40010400 	.word	0x40010400
 8004f08:	40014000 	.word	0x40014000
 8004f0c:	40001800 	.word	0x40001800

08004f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d122      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d11b      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0202 	mvn.w	r2, #2
 8004f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f9b5 	bl	80052c2 <HAL_TIM_IC_CaptureCallback>
 8004f58:	e005      	b.n	8004f66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f9a7 	bl	80052ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f9b8 	bl	80052d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d122      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d11b      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0204 	mvn.w	r2, #4
 8004f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2202      	movs	r2, #2
 8004f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f98b 	bl	80052c2 <HAL_TIM_IC_CaptureCallback>
 8004fac:	e005      	b.n	8004fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f97d 	bl	80052ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f98e 	bl	80052d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d122      	bne.n	8005014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d11b      	bne.n	8005014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0208 	mvn.w	r2, #8
 8004fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2204      	movs	r2, #4
 8004fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f961 	bl	80052c2 <HAL_TIM_IC_CaptureCallback>
 8005000:	e005      	b.n	800500e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f953 	bl	80052ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f964 	bl	80052d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0310 	and.w	r3, r3, #16
 800501e:	2b10      	cmp	r3, #16
 8005020:	d122      	bne.n	8005068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f003 0310 	and.w	r3, r3, #16
 800502c:	2b10      	cmp	r3, #16
 800502e:	d11b      	bne.n	8005068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0210 	mvn.w	r2, #16
 8005038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2208      	movs	r2, #8
 800503e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f937 	bl	80052c2 <HAL_TIM_IC_CaptureCallback>
 8005054:	e005      	b.n	8005062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f929 	bl	80052ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f93a 	bl	80052d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b01      	cmp	r3, #1
 8005074:	d10e      	bne.n	8005094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b01      	cmp	r3, #1
 8005082:	d107      	bne.n	8005094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0201 	mvn.w	r2, #1
 800508c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fc fbf6 	bl	8001880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509e:	2b80      	cmp	r3, #128	; 0x80
 80050a0:	d10e      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ac:	2b80      	cmp	r3, #128	; 0x80
 80050ae:	d107      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fae0 	bl	8005680 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ca:	2b40      	cmp	r3, #64	; 0x40
 80050cc:	d10e      	bne.n	80050ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d8:	2b40      	cmp	r3, #64	; 0x40
 80050da:	d107      	bne.n	80050ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f8ff 	bl	80052ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b20      	cmp	r3, #32
 80050f8:	d10e      	bne.n	8005118 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0320 	and.w	r3, r3, #32
 8005104:	2b20      	cmp	r3, #32
 8005106:	d107      	bne.n	8005118 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0220 	mvn.w	r2, #32
 8005110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 faaa 	bl	800566c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005118:	bf00      	nop
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_TIM_ConfigClockSource+0x1c>
 8005138:	2302      	movs	r3, #2
 800513a:	e0b4      	b.n	80052a6 <HAL_TIM_ConfigClockSource+0x186>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800515a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005174:	d03e      	beq.n	80051f4 <HAL_TIM_ConfigClockSource+0xd4>
 8005176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800517a:	f200 8087 	bhi.w	800528c <HAL_TIM_ConfigClockSource+0x16c>
 800517e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005182:	f000 8086 	beq.w	8005292 <HAL_TIM_ConfigClockSource+0x172>
 8005186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518a:	d87f      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 800518c:	2b70      	cmp	r3, #112	; 0x70
 800518e:	d01a      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0xa6>
 8005190:	2b70      	cmp	r3, #112	; 0x70
 8005192:	d87b      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 8005194:	2b60      	cmp	r3, #96	; 0x60
 8005196:	d050      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x11a>
 8005198:	2b60      	cmp	r3, #96	; 0x60
 800519a:	d877      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 800519c:	2b50      	cmp	r3, #80	; 0x50
 800519e:	d03c      	beq.n	800521a <HAL_TIM_ConfigClockSource+0xfa>
 80051a0:	2b50      	cmp	r3, #80	; 0x50
 80051a2:	d873      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 80051a4:	2b40      	cmp	r3, #64	; 0x40
 80051a6:	d058      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x13a>
 80051a8:	2b40      	cmp	r3, #64	; 0x40
 80051aa:	d86f      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 80051ac:	2b30      	cmp	r3, #48	; 0x30
 80051ae:	d064      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x15a>
 80051b0:	2b30      	cmp	r3, #48	; 0x30
 80051b2:	d86b      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d060      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x15a>
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d867      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d05c      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x15a>
 80051c0:	2b10      	cmp	r3, #16
 80051c2:	d05a      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x15a>
 80051c4:	e062      	b.n	800528c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6899      	ldr	r1, [r3, #8]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f000 f9ad 	bl	8005534 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	609a      	str	r2, [r3, #8]
      break;
 80051f2:	e04f      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	6899      	ldr	r1, [r3, #8]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f000 f996 	bl	8005534 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005216:	609a      	str	r2, [r3, #8]
      break;
 8005218:	e03c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6859      	ldr	r1, [r3, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	461a      	mov	r2, r3
 8005228:	f000 f90a 	bl	8005440 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2150      	movs	r1, #80	; 0x50
 8005232:	4618      	mov	r0, r3
 8005234:	f000 f963 	bl	80054fe <TIM_ITRx_SetConfig>
      break;
 8005238:	e02c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6859      	ldr	r1, [r3, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	461a      	mov	r2, r3
 8005248:	f000 f929 	bl	800549e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2160      	movs	r1, #96	; 0x60
 8005252:	4618      	mov	r0, r3
 8005254:	f000 f953 	bl	80054fe <TIM_ITRx_SetConfig>
      break;
 8005258:	e01c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6859      	ldr	r1, [r3, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	461a      	mov	r2, r3
 8005268:	f000 f8ea 	bl	8005440 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2140      	movs	r1, #64	; 0x40
 8005272:	4618      	mov	r0, r3
 8005274:	f000 f943 	bl	80054fe <TIM_ITRx_SetConfig>
      break;
 8005278:	e00c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4619      	mov	r1, r3
 8005284:	4610      	mov	r0, r2
 8005286:	f000 f93a 	bl	80054fe <TIM_ITRx_SetConfig>
      break;
 800528a:	e003      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	73fb      	strb	r3, [r7, #15]
      break;
 8005290:	e000      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
	...

08005300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a40      	ldr	r2, [pc, #256]	; (8005414 <TIM_Base_SetConfig+0x114>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d013      	beq.n	8005340 <TIM_Base_SetConfig+0x40>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531e:	d00f      	beq.n	8005340 <TIM_Base_SetConfig+0x40>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a3d      	ldr	r2, [pc, #244]	; (8005418 <TIM_Base_SetConfig+0x118>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d00b      	beq.n	8005340 <TIM_Base_SetConfig+0x40>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a3c      	ldr	r2, [pc, #240]	; (800541c <TIM_Base_SetConfig+0x11c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d007      	beq.n	8005340 <TIM_Base_SetConfig+0x40>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a3b      	ldr	r2, [pc, #236]	; (8005420 <TIM_Base_SetConfig+0x120>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_Base_SetConfig+0x40>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a3a      	ldr	r2, [pc, #232]	; (8005424 <TIM_Base_SetConfig+0x124>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d108      	bne.n	8005352 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a2f      	ldr	r2, [pc, #188]	; (8005414 <TIM_Base_SetConfig+0x114>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d02b      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005360:	d027      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a2c      	ldr	r2, [pc, #176]	; (8005418 <TIM_Base_SetConfig+0x118>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d023      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a2b      	ldr	r2, [pc, #172]	; (800541c <TIM_Base_SetConfig+0x11c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d01f      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a2a      	ldr	r2, [pc, #168]	; (8005420 <TIM_Base_SetConfig+0x120>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d01b      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a29      	ldr	r2, [pc, #164]	; (8005424 <TIM_Base_SetConfig+0x124>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d017      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a28      	ldr	r2, [pc, #160]	; (8005428 <TIM_Base_SetConfig+0x128>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d013      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a27      	ldr	r2, [pc, #156]	; (800542c <TIM_Base_SetConfig+0x12c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00f      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a26      	ldr	r2, [pc, #152]	; (8005430 <TIM_Base_SetConfig+0x130>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00b      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a25      	ldr	r2, [pc, #148]	; (8005434 <TIM_Base_SetConfig+0x134>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d007      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a24      	ldr	r2, [pc, #144]	; (8005438 <TIM_Base_SetConfig+0x138>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d003      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a23      	ldr	r2, [pc, #140]	; (800543c <TIM_Base_SetConfig+0x13c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d108      	bne.n	80053c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a0a      	ldr	r2, [pc, #40]	; (8005414 <TIM_Base_SetConfig+0x114>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d003      	beq.n	80053f8 <TIM_Base_SetConfig+0xf8>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a0c      	ldr	r2, [pc, #48]	; (8005424 <TIM_Base_SetConfig+0x124>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d103      	bne.n	8005400 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	615a      	str	r2, [r3, #20]
}
 8005406:	bf00      	nop
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40010000 	.word	0x40010000
 8005418:	40000400 	.word	0x40000400
 800541c:	40000800 	.word	0x40000800
 8005420:	40000c00 	.word	0x40000c00
 8005424:	40010400 	.word	0x40010400
 8005428:	40014000 	.word	0x40014000
 800542c:	40014400 	.word	0x40014400
 8005430:	40014800 	.word	0x40014800
 8005434:	40001800 	.word	0x40001800
 8005438:	40001c00 	.word	0x40001c00
 800543c:	40002000 	.word	0x40002000

08005440 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f023 0201 	bic.w	r2, r3, #1
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800546a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4313      	orrs	r3, r2
 8005474:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f023 030a 	bic.w	r3, r3, #10
 800547c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4313      	orrs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	bf00      	nop
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800549e:	b480      	push	{r7}
 80054a0:	b087      	sub	sp, #28
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f023 0210 	bic.w	r2, r3, #16
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	031b      	lsls	r3, r3, #12
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	621a      	str	r2, [r3, #32]
}
 80054f2:	bf00      	nop
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054fe:	b480      	push	{r7}
 8005500:	b085      	sub	sp, #20
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005514:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	f043 0307 	orr.w	r3, r3, #7
 8005520:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	609a      	str	r2, [r3, #8]
}
 8005528:	bf00      	nop
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800554e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	021a      	lsls	r2, r3, #8
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	431a      	orrs	r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4313      	orrs	r3, r2
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	609a      	str	r2, [r3, #8]
}
 8005568:	bf00      	nop
 800556a:	371c      	adds	r7, #28
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005588:	2302      	movs	r3, #2
 800558a:	e05a      	b.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a21      	ldr	r2, [pc, #132]	; (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d022      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d8:	d01d      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a1d      	ldr	r2, [pc, #116]	; (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d018      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a1b      	ldr	r2, [pc, #108]	; (8005658 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d013      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a1a      	ldr	r2, [pc, #104]	; (800565c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00e      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a18      	ldr	r2, [pc, #96]	; (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d009      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a17      	ldr	r2, [pc, #92]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d004      	beq.n	8005616 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a15      	ldr	r2, [pc, #84]	; (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d10c      	bne.n	8005630 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800561c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4313      	orrs	r3, r2
 8005626:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40010000 	.word	0x40010000
 8005654:	40000400 	.word	0x40000400
 8005658:	40000800 	.word	0x40000800
 800565c:	40000c00 	.word	0x40000c00
 8005660:	40010400 	.word	0x40010400
 8005664:	40014000 	.word	0x40014000
 8005668:	40001800 	.word	0x40001800

0800566c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e03f      	b.n	8005726 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fc fa1e 	bl	8001afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2224      	movs	r2, #36	; 0x24
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fddb 	bl	8006294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695a      	ldr	r2, [r3, #20]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800570c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b08a      	sub	sp, #40	; 0x28
 8005732:	af02      	add	r7, sp, #8
 8005734:	60f8      	str	r0, [r7, #12]
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	603b      	str	r3, [r7, #0]
 800573a:	4613      	mov	r3, r2
 800573c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b20      	cmp	r3, #32
 800574c:	d17c      	bne.n	8005848 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_UART_Transmit+0x2c>
 8005754:	88fb      	ldrh	r3, [r7, #6]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e075      	b.n	800584a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_UART_Transmit+0x3e>
 8005768:	2302      	movs	r3, #2
 800576a:	e06e      	b.n	800584a <HAL_UART_Transmit+0x11c>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2221      	movs	r2, #33	; 0x21
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005782:	f7fc fc13 	bl	8001fac <HAL_GetTick>
 8005786:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	88fa      	ldrh	r2, [r7, #6]
 800578c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	88fa      	ldrh	r2, [r7, #6]
 8005792:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579c:	d108      	bne.n	80057b0 <HAL_UART_Transmit+0x82>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d104      	bne.n	80057b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	e003      	b.n	80057b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057b4:	2300      	movs	r3, #0
 80057b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80057c0:	e02a      	b.n	8005818 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2200      	movs	r2, #0
 80057ca:	2180      	movs	r1, #128	; 0x80
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 fb1f 	bl	8005e10 <UART_WaitOnFlagUntilTimeout>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e036      	b.n	800584a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10b      	bne.n	80057fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	3302      	adds	r3, #2
 80057f6:	61bb      	str	r3, [r7, #24]
 80057f8:	e007      	b.n	800580a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	781a      	ldrb	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	3301      	adds	r3, #1
 8005808:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800580e:	b29b      	uxth	r3, r3
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1cf      	bne.n	80057c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2200      	movs	r2, #0
 800582a:	2140      	movs	r1, #64	; 0x40
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 faef 	bl	8005e10 <UART_WaitOnFlagUntilTimeout>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e006      	b.n	800584a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	e000      	b.n	800584a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005848:	2302      	movs	r3, #2
  }
}
 800584a:	4618      	mov	r0, r3
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	4613      	mov	r3, r2
 800585e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b20      	cmp	r3, #32
 800586a:	d11d      	bne.n	80058a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_UART_Receive_IT+0x26>
 8005872:	88fb      	ldrh	r3, [r7, #6]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e016      	b.n	80058aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_UART_Receive_IT+0x38>
 8005886:	2302      	movs	r3, #2
 8005888:	e00f      	b.n	80058aa <HAL_UART_Receive_IT+0x58>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005898:	88fb      	ldrh	r3, [r7, #6]
 800589a:	461a      	mov	r2, r3
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 fb24 	bl	8005eec <UART_Start_Receive_IT>
 80058a4:	4603      	mov	r3, r0
 80058a6:	e000      	b.n	80058aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80058a8:	2302      	movs	r3, #2
  }
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b0ba      	sub	sp, #232	; 0xe8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80058da:	2300      	movs	r3, #0
 80058dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10f      	bne.n	800591a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fe:	f003 0320 	and.w	r3, r3, #32
 8005902:	2b00      	cmp	r3, #0
 8005904:	d009      	beq.n	800591a <HAL_UART_IRQHandler+0x66>
 8005906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fc03 	bl	800611e <UART_Receive_IT>
      return;
 8005918:	e256      	b.n	8005dc8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800591a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 80de 	beq.w	8005ae0 <HAL_UART_IRQHandler+0x22c>
 8005924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d106      	bne.n	800593e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005934:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 80d1 	beq.w	8005ae0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800593e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00b      	beq.n	8005962 <HAL_UART_IRQHandler+0xae>
 800594a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800594e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005952:	2b00      	cmp	r3, #0
 8005954:	d005      	beq.n	8005962 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f043 0201 	orr.w	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005966:	f003 0304 	and.w	r3, r3, #4
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00b      	beq.n	8005986 <HAL_UART_IRQHandler+0xd2>
 800596e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d005      	beq.n	8005986 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	f043 0202 	orr.w	r2, r3, #2
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <HAL_UART_IRQHandler+0xf6>
 8005992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	f043 0204 	orr.w	r2, r3, #4
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d011      	beq.n	80059da <HAL_UART_IRQHandler+0x126>
 80059b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ba:	f003 0320 	and.w	r3, r3, #32
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d105      	bne.n	80059ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d005      	beq.n	80059da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	f043 0208 	orr.w	r2, r3, #8
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 81ed 	beq.w	8005dbe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e8:	f003 0320 	and.w	r3, r3, #32
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d008      	beq.n	8005a02 <HAL_UART_IRQHandler+0x14e>
 80059f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fb8e 	bl	800611e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	bf0c      	ite	eq
 8005a10:	2301      	moveq	r3, #1
 8005a12:	2300      	movne	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d103      	bne.n	8005a2e <HAL_UART_IRQHandler+0x17a>
 8005a26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d04f      	beq.n	8005ace <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fa96 	bl	8005f60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3e:	2b40      	cmp	r3, #64	; 0x40
 8005a40:	d141      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3314      	adds	r3, #20
 8005a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3314      	adds	r3, #20
 8005a6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a7e:	e841 2300 	strex	r3, r2, [r1]
 8005a82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1d9      	bne.n	8005a42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d013      	beq.n	8005abe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	4a7d      	ldr	r2, [pc, #500]	; (8005c90 <HAL_UART_IRQHandler+0x3dc>)
 8005a9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fc fc33 	bl	800230e <HAL_DMA_Abort_IT>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d016      	beq.n	8005adc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005abc:	e00e      	b.n	8005adc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f990 	bl	8005de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac4:	e00a      	b.n	8005adc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f98c 	bl	8005de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005acc:	e006      	b.n	8005adc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f988 	bl	8005de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ada:	e170      	b.n	8005dbe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005adc:	bf00      	nop
    return;
 8005ade:	e16e      	b.n	8005dbe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	f040 814a 	bne.w	8005d7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aee:	f003 0310 	and.w	r3, r3, #16
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 8143 	beq.w	8005d7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 813c 	beq.w	8005d7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b06:	2300      	movs	r3, #0
 8005b08:	60bb      	str	r3, [r7, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60bb      	str	r3, [r7, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b26:	2b40      	cmp	r3, #64	; 0x40
 8005b28:	f040 80b4 	bne.w	8005c94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 8140 	beq.w	8005dc2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	f080 8139 	bcs.w	8005dc2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b62:	f000 8088 	beq.w	8005c76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	330c      	adds	r3, #12
 8005b6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1d9      	bne.n	8005b66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3314      	adds	r3, #20
 8005bb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bc4:	f023 0301 	bic.w	r3, r3, #1
 8005bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3314      	adds	r3, #20
 8005bd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e1      	bne.n	8005bb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3314      	adds	r3, #20
 8005bf4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3314      	adds	r3, #20
 8005c0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e3      	bne.n	8005bee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	330c      	adds	r3, #12
 8005c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3e:	e853 3f00 	ldrex	r3, [r3]
 8005c42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c46:	f023 0310 	bic.w	r3, r3, #16
 8005c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	330c      	adds	r3, #12
 8005c54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c58:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c60:	e841 2300 	strex	r3, r2, [r1]
 8005c64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1e3      	bne.n	8005c34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fc fadc 	bl	800222e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f8b6 	bl	8005df8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c8c:	e099      	b.n	8005dc2 <HAL_UART_IRQHandler+0x50e>
 8005c8e:	bf00      	nop
 8005c90:	08006027 	.word	0x08006027
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 808b 	beq.w	8005dc6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005cb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 8086 	beq.w	8005dc6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ccc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	330c      	adds	r3, #12
 8005cda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005cde:	647a      	str	r2, [r7, #68]	; 0x44
 8005ce0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e3      	bne.n	8005cba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3314      	adds	r3, #20
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	623b      	str	r3, [r7, #32]
   return(result);
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	f023 0301 	bic.w	r3, r3, #1
 8005d08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3314      	adds	r3, #20
 8005d12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d16:	633a      	str	r2, [r7, #48]	; 0x30
 8005d18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e3      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	e853 3f00 	ldrex	r3, [r3]
 8005d46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0310 	bic.w	r3, r3, #16
 8005d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	330c      	adds	r3, #12
 8005d58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d5c:	61fa      	str	r2, [r7, #28]
 8005d5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	69b9      	ldr	r1, [r7, #24]
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	617b      	str	r3, [r7, #20]
   return(result);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e3      	bne.n	8005d38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d74:	4619      	mov	r1, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f83e 	bl	8005df8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d7c:	e023      	b.n	8005dc6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <HAL_UART_IRQHandler+0x4ea>
 8005d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f959 	bl	800604e <UART_Transmit_IT>
    return;
 8005d9c:	e014      	b.n	8005dc8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00e      	beq.n	8005dc8 <HAL_UART_IRQHandler+0x514>
 8005daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d008      	beq.n	8005dc8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f999 	bl	80060ee <UART_EndTransmit_IT>
    return;
 8005dbc:	e004      	b.n	8005dc8 <HAL_UART_IRQHandler+0x514>
    return;
 8005dbe:	bf00      	nop
 8005dc0:	e002      	b.n	8005dc8 <HAL_UART_IRQHandler+0x514>
      return;
 8005dc2:	bf00      	nop
 8005dc4:	e000      	b.n	8005dc8 <HAL_UART_IRQHandler+0x514>
      return;
 8005dc6:	bf00      	nop
  }
}
 8005dc8:	37e8      	adds	r7, #232	; 0xe8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop

08005dd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b090      	sub	sp, #64	; 0x40
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e20:	e050      	b.n	8005ec4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e28:	d04c      	beq.n	8005ec4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e30:	f7fc f8bc 	bl	8001fac <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d241      	bcs.n	8005ec4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	330c      	adds	r3, #12
 8005e46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	330c      	adds	r3, #12
 8005e5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e60:	637a      	str	r2, [r7, #52]	; 0x34
 8005e62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e5      	bne.n	8005e40 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3314      	adds	r3, #20
 8005e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	e853 3f00 	ldrex	r3, [r3]
 8005e82:	613b      	str	r3, [r7, #16]
   return(result);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f023 0301 	bic.w	r3, r3, #1
 8005e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3314      	adds	r3, #20
 8005e92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e94:	623a      	str	r2, [r7, #32]
 8005e96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e98:	69f9      	ldr	r1, [r7, #28]
 8005e9a:	6a3a      	ldr	r2, [r7, #32]
 8005e9c:	e841 2300 	strex	r3, r2, [r1]
 8005ea0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e5      	bne.n	8005e74 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e00f      	b.n	8005ee4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4013      	ands	r3, r2
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	bf0c      	ite	eq
 8005ed4:	2301      	moveq	r3, #1
 8005ed6:	2300      	movne	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	461a      	mov	r2, r3
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d09f      	beq.n	8005e22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3740      	adds	r7, #64	; 0x40
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	88fa      	ldrh	r2, [r7, #6]
 8005f04:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	88fa      	ldrh	r2, [r7, #6]
 8005f0a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2222      	movs	r2, #34	; 0x22
 8005f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f30:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695a      	ldr	r2, [r3, #20]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0201 	orr.w	r2, r2, #1
 8005f40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0220 	orr.w	r2, r2, #32
 8005f50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b095      	sub	sp, #84	; 0x54
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f88:	643a      	str	r2, [r7, #64]	; 0x40
 8005f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e5      	bne.n	8005f68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3314      	adds	r3, #20
 8005fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f023 0301 	bic.w	r3, r3, #1
 8005fb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3314      	adds	r3, #20
 8005fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e5      	bne.n	8005f9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d119      	bne.n	800600c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	330c      	adds	r3, #12
 8005fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f023 0310 	bic.w	r3, r3, #16
 8005fee:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ff8:	61ba      	str	r2, [r7, #24]
 8005ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	6979      	ldr	r1, [r7, #20]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	613b      	str	r3, [r7, #16]
   return(result);
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e5      	bne.n	8005fd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	631a      	str	r2, [r3, #48]	; 0x30
}
 800601a:	bf00      	nop
 800601c:	3754      	adds	r7, #84	; 0x54
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006032:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f7ff fecf 	bl	8005de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006046:	bf00      	nop
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800604e:	b480      	push	{r7}
 8006050:	b085      	sub	sp, #20
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b21      	cmp	r3, #33	; 0x21
 8006060:	d13e      	bne.n	80060e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606a:	d114      	bne.n	8006096 <UART_Transmit_IT+0x48>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d110      	bne.n	8006096 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006088:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	1c9a      	adds	r2, r3, #2
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	621a      	str	r2, [r3, #32]
 8006094:	e008      	b.n	80060a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	1c59      	adds	r1, r3, #1
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6211      	str	r1, [r2, #32]
 80060a0:	781a      	ldrb	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	4619      	mov	r1, r3
 80060b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10f      	bne.n	80060dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68da      	ldr	r2, [r3, #12]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	e000      	b.n	80060e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060e0:	2302      	movs	r3, #2
  }
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006104:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff fe5e 	bl	8005dd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b08c      	sub	sp, #48	; 0x30
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b22      	cmp	r3, #34	; 0x22
 8006130:	f040 80ab 	bne.w	800628a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800613c:	d117      	bne.n	800616e <UART_Receive_IT+0x50>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d113      	bne.n	800616e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006146:	2300      	movs	r3, #0
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	b29b      	uxth	r3, r3
 8006158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800615c:	b29a      	uxth	r2, r3
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	1c9a      	adds	r2, r3, #2
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	629a      	str	r2, [r3, #40]	; 0x28
 800616c:	e026      	b.n	80061bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006174:	2300      	movs	r3, #0
 8006176:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006180:	d007      	beq.n	8006192 <UART_Receive_IT+0x74>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10a      	bne.n	80061a0 <UART_Receive_IT+0x82>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	e008      	b.n	80061b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	4619      	mov	r1, r3
 80061ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d15a      	bne.n	8006286 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0220 	bic.w	r2, r2, #32
 80061de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695a      	ldr	r2, [r3, #20]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0201 	bic.w	r2, r2, #1
 80061fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620c:	2b01      	cmp	r3, #1
 800620e:	d135      	bne.n	800627c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	330c      	adds	r3, #12
 800621c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	613b      	str	r3, [r7, #16]
   return(result);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f023 0310 	bic.w	r3, r3, #16
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	330c      	adds	r3, #12
 8006234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006236:	623a      	str	r2, [r7, #32]
 8006238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	69f9      	ldr	r1, [r7, #28]
 800623c:	6a3a      	ldr	r2, [r7, #32]
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	61bb      	str	r3, [r7, #24]
   return(result);
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e5      	bne.n	8006216 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b10      	cmp	r3, #16
 8006256:	d10a      	bne.n	800626e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff fdbf 	bl	8005df8 <HAL_UARTEx_RxEventCallback>
 800627a:	e002      	b.n	8006282 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7fb fd7f 	bl	8001d80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	e002      	b.n	800628c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	e000      	b.n	800628c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800628a:	2302      	movs	r3, #2
  }
}
 800628c:	4618      	mov	r0, r3
 800628e:	3730      	adds	r7, #48	; 0x30
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	b09f      	sub	sp, #124	; 0x7c
 800629a:	af00      	add	r7, sp, #0
 800629c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800629e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062aa:	68d9      	ldr	r1, [r3, #12]
 80062ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	ea40 0301 	orr.w	r3, r0, r1
 80062b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	431a      	orrs	r2, r3
 80062c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	431a      	orrs	r2, r3
 80062c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80062ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062d8:	f021 010c 	bic.w	r1, r1, #12
 80062dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062e2:	430b      	orrs	r3, r1
 80062e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f2:	6999      	ldr	r1, [r3, #24]
 80062f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	ea40 0301 	orr.w	r3, r0, r1
 80062fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	4bc5      	ldr	r3, [pc, #788]	; (8006618 <UART_SetConfig+0x384>)
 8006304:	429a      	cmp	r2, r3
 8006306:	d004      	beq.n	8006312 <UART_SetConfig+0x7e>
 8006308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	4bc3      	ldr	r3, [pc, #780]	; (800661c <UART_SetConfig+0x388>)
 800630e:	429a      	cmp	r2, r3
 8006310:	d103      	bne.n	800631a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006312:	f7fd ff3d 	bl	8004190 <HAL_RCC_GetPCLK2Freq>
 8006316:	6778      	str	r0, [r7, #116]	; 0x74
 8006318:	e002      	b.n	8006320 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800631a:	f7fd ff25 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 800631e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006328:	f040 80b6 	bne.w	8006498 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800632c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800632e:	461c      	mov	r4, r3
 8006330:	f04f 0500 	mov.w	r5, #0
 8006334:	4622      	mov	r2, r4
 8006336:	462b      	mov	r3, r5
 8006338:	1891      	adds	r1, r2, r2
 800633a:	6439      	str	r1, [r7, #64]	; 0x40
 800633c:	415b      	adcs	r3, r3
 800633e:	647b      	str	r3, [r7, #68]	; 0x44
 8006340:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006344:	1912      	adds	r2, r2, r4
 8006346:	eb45 0303 	adc.w	r3, r5, r3
 800634a:	f04f 0000 	mov.w	r0, #0
 800634e:	f04f 0100 	mov.w	r1, #0
 8006352:	00d9      	lsls	r1, r3, #3
 8006354:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006358:	00d0      	lsls	r0, r2, #3
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	1911      	adds	r1, r2, r4
 8006360:	6639      	str	r1, [r7, #96]	; 0x60
 8006362:	416b      	adcs	r3, r5
 8006364:	667b      	str	r3, [r7, #100]	; 0x64
 8006366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	461a      	mov	r2, r3
 800636c:	f04f 0300 	mov.w	r3, #0
 8006370:	1891      	adds	r1, r2, r2
 8006372:	63b9      	str	r1, [r7, #56]	; 0x38
 8006374:	415b      	adcs	r3, r3
 8006376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006378:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800637c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006380:	f7f9 ff2a 	bl	80001d8 <__aeabi_uldivmod>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4ba5      	ldr	r3, [pc, #660]	; (8006620 <UART_SetConfig+0x38c>)
 800638a:	fba3 2302 	umull	r2, r3, r3, r2
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	011e      	lsls	r6, r3, #4
 8006392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006394:	461c      	mov	r4, r3
 8006396:	f04f 0500 	mov.w	r5, #0
 800639a:	4622      	mov	r2, r4
 800639c:	462b      	mov	r3, r5
 800639e:	1891      	adds	r1, r2, r2
 80063a0:	6339      	str	r1, [r7, #48]	; 0x30
 80063a2:	415b      	adcs	r3, r3
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
 80063a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80063aa:	1912      	adds	r2, r2, r4
 80063ac:	eb45 0303 	adc.w	r3, r5, r3
 80063b0:	f04f 0000 	mov.w	r0, #0
 80063b4:	f04f 0100 	mov.w	r1, #0
 80063b8:	00d9      	lsls	r1, r3, #3
 80063ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063be:	00d0      	lsls	r0, r2, #3
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	1911      	adds	r1, r2, r4
 80063c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80063c8:	416b      	adcs	r3, r5
 80063ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	461a      	mov	r2, r3
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	1891      	adds	r1, r2, r2
 80063d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80063da:	415b      	adcs	r3, r3
 80063dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80063e6:	f7f9 fef7 	bl	80001d8 <__aeabi_uldivmod>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4b8c      	ldr	r3, [pc, #560]	; (8006620 <UART_SetConfig+0x38c>)
 80063f0:	fba3 1302 	umull	r1, r3, r3, r2
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	2164      	movs	r1, #100	; 0x64
 80063f8:	fb01 f303 	mul.w	r3, r1, r3
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	3332      	adds	r3, #50	; 0x32
 8006402:	4a87      	ldr	r2, [pc, #540]	; (8006620 <UART_SetConfig+0x38c>)
 8006404:	fba2 2303 	umull	r2, r3, r2, r3
 8006408:	095b      	lsrs	r3, r3, #5
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006410:	441e      	add	r6, r3
 8006412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006414:	4618      	mov	r0, r3
 8006416:	f04f 0100 	mov.w	r1, #0
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	1894      	adds	r4, r2, r2
 8006420:	623c      	str	r4, [r7, #32]
 8006422:	415b      	adcs	r3, r3
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
 8006426:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800642a:	1812      	adds	r2, r2, r0
 800642c:	eb41 0303 	adc.w	r3, r1, r3
 8006430:	f04f 0400 	mov.w	r4, #0
 8006434:	f04f 0500 	mov.w	r5, #0
 8006438:	00dd      	lsls	r5, r3, #3
 800643a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800643e:	00d4      	lsls	r4, r2, #3
 8006440:	4622      	mov	r2, r4
 8006442:	462b      	mov	r3, r5
 8006444:	1814      	adds	r4, r2, r0
 8006446:	653c      	str	r4, [r7, #80]	; 0x50
 8006448:	414b      	adcs	r3, r1
 800644a:	657b      	str	r3, [r7, #84]	; 0x54
 800644c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	461a      	mov	r2, r3
 8006452:	f04f 0300 	mov.w	r3, #0
 8006456:	1891      	adds	r1, r2, r2
 8006458:	61b9      	str	r1, [r7, #24]
 800645a:	415b      	adcs	r3, r3
 800645c:	61fb      	str	r3, [r7, #28]
 800645e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006462:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006466:	f7f9 feb7 	bl	80001d8 <__aeabi_uldivmod>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	4b6c      	ldr	r3, [pc, #432]	; (8006620 <UART_SetConfig+0x38c>)
 8006470:	fba3 1302 	umull	r1, r3, r3, r2
 8006474:	095b      	lsrs	r3, r3, #5
 8006476:	2164      	movs	r1, #100	; 0x64
 8006478:	fb01 f303 	mul.w	r3, r1, r3
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	3332      	adds	r3, #50	; 0x32
 8006482:	4a67      	ldr	r2, [pc, #412]	; (8006620 <UART_SetConfig+0x38c>)
 8006484:	fba2 2303 	umull	r2, r3, r2, r3
 8006488:	095b      	lsrs	r3, r3, #5
 800648a:	f003 0207 	and.w	r2, r3, #7
 800648e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4432      	add	r2, r6
 8006494:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006496:	e0b9      	b.n	800660c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800649a:	461c      	mov	r4, r3
 800649c:	f04f 0500 	mov.w	r5, #0
 80064a0:	4622      	mov	r2, r4
 80064a2:	462b      	mov	r3, r5
 80064a4:	1891      	adds	r1, r2, r2
 80064a6:	6139      	str	r1, [r7, #16]
 80064a8:	415b      	adcs	r3, r3
 80064aa:	617b      	str	r3, [r7, #20]
 80064ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80064b0:	1912      	adds	r2, r2, r4
 80064b2:	eb45 0303 	adc.w	r3, r5, r3
 80064b6:	f04f 0000 	mov.w	r0, #0
 80064ba:	f04f 0100 	mov.w	r1, #0
 80064be:	00d9      	lsls	r1, r3, #3
 80064c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064c4:	00d0      	lsls	r0, r2, #3
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	eb12 0804 	adds.w	r8, r2, r4
 80064ce:	eb43 0905 	adc.w	r9, r3, r5
 80064d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f04f 0100 	mov.w	r1, #0
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	008b      	lsls	r3, r1, #2
 80064e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064ea:	0082      	lsls	r2, r0, #2
 80064ec:	4640      	mov	r0, r8
 80064ee:	4649      	mov	r1, r9
 80064f0:	f7f9 fe72 	bl	80001d8 <__aeabi_uldivmod>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	4b49      	ldr	r3, [pc, #292]	; (8006620 <UART_SetConfig+0x38c>)
 80064fa:	fba3 2302 	umull	r2, r3, r3, r2
 80064fe:	095b      	lsrs	r3, r3, #5
 8006500:	011e      	lsls	r6, r3, #4
 8006502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006504:	4618      	mov	r0, r3
 8006506:	f04f 0100 	mov.w	r1, #0
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	1894      	adds	r4, r2, r2
 8006510:	60bc      	str	r4, [r7, #8]
 8006512:	415b      	adcs	r3, r3
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800651a:	1812      	adds	r2, r2, r0
 800651c:	eb41 0303 	adc.w	r3, r1, r3
 8006520:	f04f 0400 	mov.w	r4, #0
 8006524:	f04f 0500 	mov.w	r5, #0
 8006528:	00dd      	lsls	r5, r3, #3
 800652a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800652e:	00d4      	lsls	r4, r2, #3
 8006530:	4622      	mov	r2, r4
 8006532:	462b      	mov	r3, r5
 8006534:	1814      	adds	r4, r2, r0
 8006536:	64bc      	str	r4, [r7, #72]	; 0x48
 8006538:	414b      	adcs	r3, r1
 800653a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800653c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	4618      	mov	r0, r3
 8006542:	f04f 0100 	mov.w	r1, #0
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	008b      	lsls	r3, r1, #2
 8006550:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006554:	0082      	lsls	r2, r0, #2
 8006556:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800655a:	f7f9 fe3d 	bl	80001d8 <__aeabi_uldivmod>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	4b2f      	ldr	r3, [pc, #188]	; (8006620 <UART_SetConfig+0x38c>)
 8006564:	fba3 1302 	umull	r1, r3, r3, r2
 8006568:	095b      	lsrs	r3, r3, #5
 800656a:	2164      	movs	r1, #100	; 0x64
 800656c:	fb01 f303 	mul.w	r3, r1, r3
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	3332      	adds	r3, #50	; 0x32
 8006576:	4a2a      	ldr	r2, [pc, #168]	; (8006620 <UART_SetConfig+0x38c>)
 8006578:	fba2 2303 	umull	r2, r3, r2, r3
 800657c:	095b      	lsrs	r3, r3, #5
 800657e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006582:	441e      	add	r6, r3
 8006584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006586:	4618      	mov	r0, r3
 8006588:	f04f 0100 	mov.w	r1, #0
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	1894      	adds	r4, r2, r2
 8006592:	603c      	str	r4, [r7, #0]
 8006594:	415b      	adcs	r3, r3
 8006596:	607b      	str	r3, [r7, #4]
 8006598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800659c:	1812      	adds	r2, r2, r0
 800659e:	eb41 0303 	adc.w	r3, r1, r3
 80065a2:	f04f 0400 	mov.w	r4, #0
 80065a6:	f04f 0500 	mov.w	r5, #0
 80065aa:	00dd      	lsls	r5, r3, #3
 80065ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80065b0:	00d4      	lsls	r4, r2, #3
 80065b2:	4622      	mov	r2, r4
 80065b4:	462b      	mov	r3, r5
 80065b6:	eb12 0a00 	adds.w	sl, r2, r0
 80065ba:	eb43 0b01 	adc.w	fp, r3, r1
 80065be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f04f 0100 	mov.w	r1, #0
 80065c8:	f04f 0200 	mov.w	r2, #0
 80065cc:	f04f 0300 	mov.w	r3, #0
 80065d0:	008b      	lsls	r3, r1, #2
 80065d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80065d6:	0082      	lsls	r2, r0, #2
 80065d8:	4650      	mov	r0, sl
 80065da:	4659      	mov	r1, fp
 80065dc:	f7f9 fdfc 	bl	80001d8 <__aeabi_uldivmod>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4b0e      	ldr	r3, [pc, #56]	; (8006620 <UART_SetConfig+0x38c>)
 80065e6:	fba3 1302 	umull	r1, r3, r3, r2
 80065ea:	095b      	lsrs	r3, r3, #5
 80065ec:	2164      	movs	r1, #100	; 0x64
 80065ee:	fb01 f303 	mul.w	r3, r1, r3
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	011b      	lsls	r3, r3, #4
 80065f6:	3332      	adds	r3, #50	; 0x32
 80065f8:	4a09      	ldr	r2, [pc, #36]	; (8006620 <UART_SetConfig+0x38c>)
 80065fa:	fba2 2303 	umull	r2, r3, r2, r3
 80065fe:	095b      	lsrs	r3, r3, #5
 8006600:	f003 020f 	and.w	r2, r3, #15
 8006604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4432      	add	r2, r6
 800660a:	609a      	str	r2, [r3, #8]
}
 800660c:	bf00      	nop
 800660e:	377c      	adds	r7, #124	; 0x7c
 8006610:	46bd      	mov	sp, r7
 8006612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006616:	bf00      	nop
 8006618:	40011000 	.word	0x40011000
 800661c:	40011400 	.word	0x40011400
 8006620:	51eb851f 	.word	0x51eb851f

08006624 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	4b20      	ldr	r3, [pc, #128]	; (80066c4 <FSMC_NORSRAM_Init+0xa0>)
 8006642:	4013      	ands	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800664e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006654:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800665a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006660:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006666:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800666c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006672:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006678:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800667e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006684:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800668a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006690:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	2b08      	cmp	r3, #8
 800669e:	d103      	bne.n	80066a8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066a6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68f9      	ldr	r1, [r7, #12]
 80066b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	fff00080 	.word	0xfff00080

080066c8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80066ea:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80066f6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80066fe:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006706:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	3b01      	subs	r3, #1
 800670e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006710:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	3b02      	subs	r3, #2
 8006718:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800671a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006720:	4313      	orrs	r3, r2
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6979      	ldr	r1, [r7, #20]
 8006730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
	...

08006744 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
 8006750:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800675c:	d122      	bne.n	80067a4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006766:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	4b15      	ldr	r3, [pc, #84]	; (80067c0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800676c:	4013      	ands	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800677a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006782:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800678a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006790:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6979      	ldr	r1, [r7, #20]
 800679e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80067a2:	e005      	b.n	80067b0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80067ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	cff00000 	.word	0xcff00000

080067c4 <__libc_init_array>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	4d0d      	ldr	r5, [pc, #52]	; (80067fc <__libc_init_array+0x38>)
 80067c8:	4c0d      	ldr	r4, [pc, #52]	; (8006800 <__libc_init_array+0x3c>)
 80067ca:	1b64      	subs	r4, r4, r5
 80067cc:	10a4      	asrs	r4, r4, #2
 80067ce:	2600      	movs	r6, #0
 80067d0:	42a6      	cmp	r6, r4
 80067d2:	d109      	bne.n	80067e8 <__libc_init_array+0x24>
 80067d4:	4d0b      	ldr	r5, [pc, #44]	; (8006804 <__libc_init_array+0x40>)
 80067d6:	4c0c      	ldr	r4, [pc, #48]	; (8006808 <__libc_init_array+0x44>)
 80067d8:	f000 f820 	bl	800681c <_init>
 80067dc:	1b64      	subs	r4, r4, r5
 80067de:	10a4      	asrs	r4, r4, #2
 80067e0:	2600      	movs	r6, #0
 80067e2:	42a6      	cmp	r6, r4
 80067e4:	d105      	bne.n	80067f2 <__libc_init_array+0x2e>
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ec:	4798      	blx	r3
 80067ee:	3601      	adds	r6, #1
 80067f0:	e7ee      	b.n	80067d0 <__libc_init_array+0xc>
 80067f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f6:	4798      	blx	r3
 80067f8:	3601      	adds	r6, #1
 80067fa:	e7f2      	b.n	80067e2 <__libc_init_array+0x1e>
 80067fc:	0800d73c 	.word	0x0800d73c
 8006800:	0800d73c 	.word	0x0800d73c
 8006804:	0800d73c 	.word	0x0800d73c
 8006808:	0800d740 	.word	0x0800d740

0800680c <memset>:
 800680c:	4402      	add	r2, r0
 800680e:	4603      	mov	r3, r0
 8006810:	4293      	cmp	r3, r2
 8006812:	d100      	bne.n	8006816 <memset+0xa>
 8006814:	4770      	bx	lr
 8006816:	f803 1b01 	strb.w	r1, [r3], #1
 800681a:	e7f9      	b.n	8006810 <memset+0x4>

0800681c <_init>:
 800681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681e:	bf00      	nop
 8006820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006822:	bc08      	pop	{r3}
 8006824:	469e      	mov	lr, r3
 8006826:	4770      	bx	lr

08006828 <_fini>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	bf00      	nop
 800682c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682e:	bc08      	pop	{r3}
 8006830:	469e      	mov	lr, r3
 8006832:	4770      	bx	lr
