
DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006638  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006f00  080067c0  080067c0  000167c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6c0  0800d6c0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800d6c0  0800d6c0  0001d6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d6c8  0800d6c8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6c8  0800d6c8  0001d6c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d6cc  0800d6cc  0001d6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800d6d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000228  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000023c  2000023c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bc06  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a30  00000000  00000000  0003bc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  0003f680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001368  00000000  00000000  00040b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242ee  00000000  00000000  00041ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b8e6  00000000  00000000  000661d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2fcf  00000000  00000000  00081abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00154a8b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005638  00000000  00000000  00154ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080067a8 	.word	0x080067a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080067a8 	.word	0x080067a8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2108      	movs	r1, #8
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <button_init+0x14>)
 80004da:	f002 f89d 	bl	8002618 <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020c00 	.word	0x40020c00

080004e8 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2108      	movs	r1, #8
 80004f2:	482f      	ldr	r0, [pc, #188]	; (80005b0 <button_Scan+0xc8>)
 80004f4:	f002 f890 	bl	8002618 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2108      	movs	r1, #8
 80004fc:	482c      	ldr	r0, [pc, #176]	; (80005b0 <button_Scan+0xc8>)
 80004fe:	f002 f88b 	bl	8002618 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000502:	230a      	movs	r3, #10
 8000504:	2202      	movs	r2, #2
 8000506:	492b      	ldr	r1, [pc, #172]	; (80005b4 <button_Scan+0xcc>)
 8000508:	482b      	ldr	r0, [pc, #172]	; (80005b8 <button_Scan+0xd0>)
 800050a:	f003 ffe0 	bl	80044ce <HAL_SPI_Receive>
	  int button_index = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000516:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	e03f      	b.n	800059e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	db06      	blt.n	8000532 <button_Scan+0x4a>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b03      	cmp	r3, #3
 8000528:	dc03      	bgt.n	8000532 <button_Scan+0x4a>
			  button_index = i + 4;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3304      	adds	r3, #4
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e018      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b03      	cmp	r3, #3
 8000536:	dd07      	ble.n	8000548 <button_Scan+0x60>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dc04      	bgt.n	8000548 <button_Scan+0x60>
			  button_index = 7 - i;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f1c3 0307 	rsb	r3, r3, #7
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	e00d      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b07      	cmp	r3, #7
 800054c:	dd06      	ble.n	800055c <button_Scan+0x74>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b0b      	cmp	r3, #11
 8000552:	dc03      	bgt.n	800055c <button_Scan+0x74>
			  button_index = i + 4;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3304      	adds	r3, #4
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e003      	b.n	8000564 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f1c3 0317 	rsb	r3, r3, #23
 8000562:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <button_Scan+0xcc>)
 8000566:	881a      	ldrh	r2, [r3, #0]
 8000568:	897b      	ldrh	r3, [r7, #10]
 800056a:	4013      	ands	r3, r2
 800056c:	b29b      	uxth	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <button_Scan+0x96>
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <button_Scan+0xd4>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2100      	movs	r1, #0
 8000578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800057c:	e009      	b.n	8000592 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <button_Scan+0xd4>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000586:	3301      	adds	r3, #1
 8000588:	b299      	uxth	r1, r3
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <button_Scan+0xd4>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000592:	897b      	ldrh	r3, [r7, #10]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3301      	adds	r3, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	ddbc      	ble.n	800051e <button_Scan+0x36>
	  }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	20000030 	.word	0x20000030
 80005b8:	20000154 	.word	0x20000154
 80005bc:	20000044 	.word	0x20000044

080005c0 <ds3231_Write>:
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 100) != HAL_OK){
		while(1);
	};
}

void ds3231_Write(uint8_t address, uint8_t value){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af04      	add	r7, sp, #16
 80005c6:	4603      	mov	r3, r0
 80005c8:	460a      	mov	r2, r1
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	4613      	mov	r3, r2
 80005ce:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fbfc 	bl	8001dd0 <DEC2BCD>
 80005d8:	4603      	mov	r3, r0
 80005da:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	b29a      	uxth	r2, r3
 80005e0:	230a      	movs	r3, #10
 80005e2:	9302      	str	r3, [sp, #8]
 80005e4:	2301      	movs	r3, #1
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	f107 030f 	add.w	r3, r7, #15
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2301      	movs	r3, #1
 80005f0:	21d0      	movs	r1, #208	; 0xd0
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <ds3231_Write+0x40>)
 80005f4:	f002 f988 	bl	8002908 <HAL_I2C_Mem_Write>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200000c4 	.word	0x200000c4

08000604 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800060a:	230a      	movs	r3, #10
 800060c:	9302      	str	r3, [sp, #8]
 800060e:	2307      	movs	r3, #7
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	2200      	movs	r2, #0
 800061a:	21d0      	movs	r1, #208	; 0xd0
 800061c:	4823      	ldr	r0, [pc, #140]	; (80006ac <ds3231_ReadTime+0xa8>)
 800061e:	f002 fa6d 	bl	8002afc <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f001 fbb8 	bl	8001d9c <BCD2DEC>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <ds3231_ReadTime+0xac>)
 8000632:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000636:	785b      	ldrb	r3, [r3, #1]
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fbaf 	bl	8001d9c <BCD2DEC>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <ds3231_ReadTime+0xb0>)
 8000644:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fba6 	bl	8001d9c <BCD2DEC>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <ds3231_ReadTime+0xb4>)
 8000656:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <ds3231_ReadTime+0xa4>)
 800065a:	78db      	ldrb	r3, [r3, #3]
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fb9d 	bl	8001d9c <BCD2DEC>
 8000662:	4603      	mov	r3, r0
 8000664:	461a      	mov	r2, r3
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <ds3231_ReadTime+0xb8>)
 8000668:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <ds3231_ReadTime+0xa4>)
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fb94 	bl	8001d9c <BCD2DEC>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <ds3231_ReadTime+0xbc>)
 800067a:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <ds3231_ReadTime+0xa4>)
 800067e:	795b      	ldrb	r3, [r3, #5]
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fb8b 	bl	8001d9c <BCD2DEC>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <ds3231_ReadTime+0xc0>)
 800068c:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000690:	799b      	ldrb	r3, [r3, #6]
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fb82 	bl	8001d9c <BCD2DEC>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <ds3231_ReadTime+0xc4>)
 800069e:	701a      	strb	r2, [r3, #0]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000006c 	.word	0x2000006c
 80006ac:	200000c4 	.word	0x200000c4
 80006b0:	20000064 	.word	0x20000064
 80006b4:	20000066 	.word	0x20000066
 80006b8:	20000069 	.word	0x20000069
 80006bc:	20000068 	.word	0x20000068
 80006c0:	20000067 	.word	0x20000067
 80006c4:	2000006a 	.word	0x2000006a
 80006c8:	20000065 	.word	0x20000065

080006cc <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08e      	sub	sp, #56	; 0x38
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
 80006e2:	615a      	str	r2, [r3, #20]
 80006e4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
 80006f4:	615a      	str	r2, [r3, #20]
 80006f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80006f8:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <MX_FSMC_Init+0xec>)
 80006fa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80006fe:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000700:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <MX_FSMC_Init+0xec>)
 8000702:	4a2e      	ldr	r2, [pc, #184]	; (80007bc <MX_FSMC_Init+0xf0>)
 8000704:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000706:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <MX_FSMC_Init+0xec>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800070c:	4b2a      	ldr	r3, [pc, #168]	; (80007b8 <MX_FSMC_Init+0xec>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000712:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <MX_FSMC_Init+0xec>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000718:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <MX_FSMC_Init+0xec>)
 800071a:	2210      	movs	r2, #16
 800071c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800071e:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <MX_FSMC_Init+0xec>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000724:	4b24      	ldr	r3, [pc, #144]	; (80007b8 <MX_FSMC_Init+0xec>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800072a:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <MX_FSMC_Init+0xec>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000730:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_FSMC_Init+0xec>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000736:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_FSMC_Init+0xec>)
 8000738:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800073c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_FSMC_Init+0xec>)
 8000740:	2200      	movs	r2, #0
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_FSMC_Init+0xec>)
 8000746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_FSMC_Init+0xec>)
 800074e:	2200      	movs	r2, #0
 8000750:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_FSMC_Init+0xec>)
 8000754:	2200      	movs	r2, #0
 8000756:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_FSMC_Init+0xec>)
 800075a:	2200      	movs	r2, #0
 800075c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800075e:	230f      	movs	r3, #15
 8000760:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000762:	230f      	movs	r3, #15
 8000764:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000766:	233c      	movs	r3, #60	; 0x3c
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800076e:	2310      	movs	r3, #16
 8000770:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000772:	2311      	movs	r3, #17
 8000774:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000776:	2300      	movs	r3, #0
 8000778:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800077a:	2308      	movs	r3, #8
 800077c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800077e:	230f      	movs	r3, #15
 8000780:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000782:	2309      	movs	r3, #9
 8000784:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800078a:	2310      	movs	r3, #16
 800078c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800078e:	2311      	movs	r3, #17
 8000790:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000796:	463a      	mov	r2, r7
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4619      	mov	r1, r3
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <MX_FSMC_Init+0xec>)
 80007a0:	f004 fa78 	bl	8004c94 <HAL_SRAM_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80007aa:	f001 f803 	bl	80017b4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80007ae:	bf00      	nop
 80007b0:	3738      	adds	r7, #56	; 0x38
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000074 	.word	0x20000074
 80007bc:	a0000104 	.word	0xa0000104

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	4b69      	ldr	r3, [pc, #420]	; (8000980 <MX_GPIO_Init+0x1c0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a68      	ldr	r2, [pc, #416]	; (8000980 <MX_GPIO_Init+0x1c0>)
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b66      	ldr	r3, [pc, #408]	; (8000980 <MX_GPIO_Init+0x1c0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	4b62      	ldr	r3, [pc, #392]	; (8000980 <MX_GPIO_Init+0x1c0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a61      	ldr	r2, [pc, #388]	; (8000980 <MX_GPIO_Init+0x1c0>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b5f      	ldr	r3, [pc, #380]	; (8000980 <MX_GPIO_Init+0x1c0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b5b      	ldr	r3, [pc, #364]	; (8000980 <MX_GPIO_Init+0x1c0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a5a      	ldr	r2, [pc, #360]	; (8000980 <MX_GPIO_Init+0x1c0>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b58      	ldr	r3, [pc, #352]	; (8000980 <MX_GPIO_Init+0x1c0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b54      	ldr	r3, [pc, #336]	; (8000980 <MX_GPIO_Init+0x1c0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a53      	ldr	r2, [pc, #332]	; (8000980 <MX_GPIO_Init+0x1c0>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b51      	ldr	r3, [pc, #324]	; (8000980 <MX_GPIO_Init+0x1c0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b4d      	ldr	r3, [pc, #308]	; (8000980 <MX_GPIO_Init+0x1c0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a4c      	ldr	r2, [pc, #304]	; (8000980 <MX_GPIO_Init+0x1c0>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b4a      	ldr	r3, [pc, #296]	; (8000980 <MX_GPIO_Init+0x1c0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b46      	ldr	r3, [pc, #280]	; (8000980 <MX_GPIO_Init+0x1c0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a45      	ldr	r2, [pc, #276]	; (8000980 <MX_GPIO_Init+0x1c0>)
 800086c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b43      	ldr	r3, [pc, #268]	; (8000980 <MX_GPIO_Init+0x1c0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b3f      	ldr	r3, [pc, #252]	; (8000980 <MX_GPIO_Init+0x1c0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a3e      	ldr	r2, [pc, #248]	; (8000980 <MX_GPIO_Init+0x1c0>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b3c      	ldr	r3, [pc, #240]	; (8000980 <MX_GPIO_Init+0x1c0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_DEBUG_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2170      	movs	r1, #112	; 0x70
 800089e:	4839      	ldr	r0, [pc, #228]	; (8000984 <MX_GPIO_Init+0x1c4>)
 80008a0:	f001 feba 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|INPUT_X2_Pin|INPUT_X3_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f242 0130 	movw	r1, #8240	; 0x2030
 80008aa:	4837      	ldr	r0, [pc, #220]	; (8000988 <MX_GPIO_Init+0x1c8>)
 80008ac:	f001 feb4 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INPUT_X1_Pin|FSMC_BLK_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80008b6:	4835      	ldr	r0, [pc, #212]	; (800098c <MX_GPIO_Init+0x1cc>)
 80008b8:	f001 feae 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2140      	movs	r1, #64	; 0x40
 80008c0:	4833      	ldr	r0, [pc, #204]	; (8000990 <MX_GPIO_Init+0x1d0>)
 80008c2:	f001 fea9 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2108      	movs	r1, #8
 80008ca:	4832      	ldr	r0, [pc, #200]	; (8000994 <MX_GPIO_Init+0x1d4>)
 80008cc:	f001 fea4 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_DEBUG_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80008d0:	2370      	movs	r3, #112	; 0x70
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4827      	ldr	r0, [pc, #156]	; (8000984 <MX_GPIO_Init+0x1c4>)
 80008e8:	f001 fcfa 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin INPUT_X2_Pin INPUT_X3_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|INPUT_X2_Pin|INPUT_X3_Pin;
 80008ec:	f242 0330 	movw	r3, #8240	; 0x2030
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4820      	ldr	r0, [pc, #128]	; (8000988 <MX_GPIO_Init+0x1c8>)
 8000906:	f001 fceb 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_X0_Pin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin;
 800090a:	2340      	movs	r3, #64	; 0x40
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INPUT_X0_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	481b      	ldr	r0, [pc, #108]	; (800098c <MX_GPIO_Init+0x1cc>)
 800091e:	f001 fcdf 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X1_Pin FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = INPUT_X1_Pin|FSMC_BLK_Pin;
 8000922:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4814      	ldr	r0, [pc, #80]	; (800098c <MX_GPIO_Init+0x1cc>)
 800093c:	f001 fcd0 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_LATCH_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000940:	2340      	movs	r3, #64	; 0x40
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	480e      	ldr	r0, [pc, #56]	; (8000990 <MX_GPIO_Init+0x1d0>)
 8000958:	f001 fcc2 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800095c:	2308      	movs	r3, #8
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4808      	ldr	r0, [pc, #32]	; (8000994 <MX_GPIO_Init+0x1d4>)
 8000974:	f001 fcb4 	bl	80022e0 <HAL_GPIO_Init>

}
 8000978:	bf00      	nop
 800097a:	3730      	adds	r7, #48	; 0x30
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800
 8000984:	40021000 	.word	0x40021000
 8000988:	40020800 	.word	0x40020800
 800098c:	40020000 	.word	0x40020000
 8000990:	40021800 	.word	0x40021800
 8000994:	40020c00 	.word	0x40020c00

08000998 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_I2C1_Init+0x50>)
 800099e:	4a13      	ldr	r2, [pc, #76]	; (80009ec <MX_I2C1_Init+0x54>)
 80009a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009a4:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <MX_I2C1_Init+0x58>)
 80009a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_I2C1_Init+0x50>)
 80009d6:	f001 fe53 	bl	8002680 <HAL_I2C_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009e0:	f000 fee8 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200000c4 	.word	0x200000c4
 80009ec:	40005400 	.word	0x40005400
 80009f0:	000186a0 	.word	0x000186a0

080009f4 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80009fe:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <LCD_WR_REG+0x1c>)
 8000a00:	88fb      	ldrh	r3, [r7, #6]
 8000a02:	8013      	strh	r3, [r2, #0]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	600ffffe 	.word	0x600ffffe

08000a14 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000a1e:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <LCD_WR_DATA+0x1c>)
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	8053      	strh	r3, [r2, #2]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	600ffffe 	.word	0x600ffffe

08000a34 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <LCD_RD_DATA+0x20>)
 8000a3c:	885b      	ldrh	r3, [r3, #2]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	b29b      	uxth	r3, r3
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	600ffffe 	.word	0x600ffffe

08000a58 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4604      	mov	r4, r0
 8000a60:	4608      	mov	r0, r1
 8000a62:	4611      	mov	r1, r2
 8000a64:	461a      	mov	r2, r3
 8000a66:	4623      	mov	r3, r4
 8000a68:	80fb      	strh	r3, [r7, #6]
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80bb      	strh	r3, [r7, #4]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	807b      	strh	r3, [r7, #2]
 8000a72:	4613      	mov	r3, r2
 8000a74:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000a76:	202a      	movs	r0, #42	; 0x2a
 8000a78:	f7ff ffbc 	bl	80009f4 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	0a1b      	lsrs	r3, r3, #8
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ffc6 	bl	8000a14 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ffc0 	bl	8000a14 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	0a1b      	lsrs	r3, r3, #8
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ffba 	bl	8000a14 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000aa0:	887b      	ldrh	r3, [r7, #2]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ffb4 	bl	8000a14 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000aac:	202b      	movs	r0, #43	; 0x2b
 8000aae:	f7ff ffa1 	bl	80009f4 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000ab2:	88bb      	ldrh	r3, [r7, #4]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ffab 	bl	8000a14 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000abe:	88bb      	ldrh	r3, [r7, #4]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ffa5 	bl	8000a14 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000aca:	883b      	ldrh	r3, [r7, #0]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff9f 	bl	8000a14 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000ad6:	883b      	ldrh	r3, [r7, #0]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff99 	bl	8000a14 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000ae2:	202c      	movs	r0, #44	; 0x2c
 8000ae4:	f7ff ff86 	bl	80009f4 <LCD_WR_REG>
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd90      	pop	{r4, r7, pc}

08000af0 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4604      	mov	r4, r0
 8000af8:	4608      	mov	r0, r1
 8000afa:	4611      	mov	r1, r2
 8000afc:	461a      	mov	r2, r3
 8000afe:	4623      	mov	r3, r4
 8000b00:	80fb      	strh	r3, [r7, #6]
 8000b02:	4603      	mov	r3, r0
 8000b04:	80bb      	strh	r3, [r7, #4]
 8000b06:	460b      	mov	r3, r1
 8000b08:	807b      	strh	r3, [r7, #2]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000b0e:	887b      	ldrh	r3, [r7, #2]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	883b      	ldrh	r3, [r7, #0]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	88b9      	ldrh	r1, [r7, #4]
 8000b1c:	88f8      	ldrh	r0, [r7, #6]
 8000b1e:	f7ff ff9b 	bl	8000a58 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000b22:	88bb      	ldrh	r3, [r7, #4]
 8000b24:	81fb      	strh	r3, [r7, #14]
 8000b26:	e010      	b.n	8000b4a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	81bb      	strh	r3, [r7, #12]
 8000b2c:	e006      	b.n	8000b3c <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000b2e:	8c3b      	ldrh	r3, [r7, #32]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff6f 	bl	8000a14 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000b36:	89bb      	ldrh	r3, [r7, #12]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	81bb      	strh	r3, [r7, #12]
 8000b3c:	89ba      	ldrh	r2, [r7, #12]
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d3f4      	bcc.n	8000b2e <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000b44:	89fb      	ldrh	r3, [r7, #14]
 8000b46:	3301      	adds	r3, #1
 8000b48:	81fb      	strh	r3, [r7, #14]
 8000b4a:	89fa      	ldrh	r2, [r7, #14]
 8000b4c:	883b      	ldrh	r3, [r7, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d3ea      	bcc.n	8000b28 <lcd_Fill+0x38>
		}
	}
}
 8000b52:	bf00      	nop
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd90      	pop	{r4, r7, pc}

08000b5c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	80fb      	strh	r3, [r7, #6]
 8000b66:	460b      	mov	r3, r1
 8000b68:	80bb      	strh	r3, [r7, #4]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000b6e:	88bb      	ldrh	r3, [r7, #4]
 8000b70:	88fa      	ldrh	r2, [r7, #6]
 8000b72:	88b9      	ldrh	r1, [r7, #4]
 8000b74:	88f8      	ldrh	r0, [r7, #6]
 8000b76:	f7ff ff6f 	bl	8000a58 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000b7a:	887b      	ldrh	r3, [r7, #2]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff49 	bl	8000a14 <LCD_WR_DATA>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b087      	sub	sp, #28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4604      	mov	r4, r0
 8000b94:	4608      	mov	r0, r1
 8000b96:	4611      	mov	r1, r2
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	80fb      	strh	r3, [r7, #6]
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80bb      	strh	r3, [r7, #4]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	70fb      	strb	r3, [r7, #3]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000bb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bb6:	085b      	lsrs	r3, r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	08db      	lsrs	r3, r3, #3
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	f003 0307 	and.w	r3, r3, #7
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	bf14      	ite	ne
 8000bce:	2301      	movne	r3, #1
 8000bd0:	2300      	moveq	r3, #0
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4413      	add	r3, r2
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	fb12 f303 	smulbb	r3, r2, r3
 8000be2:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000be4:	78fb      	ldrb	r3, [r7, #3]
 8000be6:	3b20      	subs	r3, #32
 8000be8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	88fb      	ldrh	r3, [r7, #6]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	b29c      	uxth	r4, r3
 8000bf8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	88bb      	ldrh	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	3b01      	subs	r3, #1
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	88b9      	ldrh	r1, [r7, #4]
 8000c0a:	88f8      	ldrh	r0, [r7, #6]
 8000c0c:	4622      	mov	r2, r4
 8000c0e:	f7ff ff23 	bl	8000a58 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	827b      	strh	r3, [r7, #18]
 8000c16:	e07a      	b.n	8000d0e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000c18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c1c:	2b0c      	cmp	r3, #12
 8000c1e:	d028      	beq.n	8000c72 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000c20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c24:	2b10      	cmp	r3, #16
 8000c26:	d108      	bne.n	8000c3a <lcd_ShowChar+0xae>
 8000c28:	78fa      	ldrb	r2, [r7, #3]
 8000c2a:	8a7b      	ldrh	r3, [r7, #18]
 8000c2c:	493c      	ldr	r1, [pc, #240]	; (8000d20 <lcd_ShowChar+0x194>)
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	440a      	add	r2, r1
 8000c32:	4413      	add	r3, r2
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	75fb      	strb	r3, [r7, #23]
 8000c38:	e01b      	b.n	8000c72 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000c3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c3e:	2b18      	cmp	r3, #24
 8000c40:	d10b      	bne.n	8000c5a <lcd_ShowChar+0xce>
 8000c42:	78fa      	ldrb	r2, [r7, #3]
 8000c44:	8a79      	ldrh	r1, [r7, #18]
 8000c46:	4837      	ldr	r0, [pc, #220]	; (8000d24 <lcd_ShowChar+0x198>)
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	011b      	lsls	r3, r3, #4
 8000c50:	4403      	add	r3, r0
 8000c52:	440b      	add	r3, r1
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	75fb      	strb	r3, [r7, #23]
 8000c58:	e00b      	b.n	8000c72 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000c5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c5e:	2b20      	cmp	r3, #32
 8000c60:	d15a      	bne.n	8000d18 <lcd_ShowChar+0x18c>
 8000c62:	78fa      	ldrb	r2, [r7, #3]
 8000c64:	8a7b      	ldrh	r3, [r7, #18]
 8000c66:	4930      	ldr	r1, [pc, #192]	; (8000d28 <lcd_ShowChar+0x19c>)
 8000c68:	0192      	lsls	r2, r2, #6
 8000c6a:	440a      	add	r2, r1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	75bb      	strb	r3, [r7, #22]
 8000c76:	e044      	b.n	8000d02 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000c78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d120      	bne.n	8000cc2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000c80:	7dfa      	ldrb	r2, [r7, #23]
 8000c82:	7dbb      	ldrb	r3, [r7, #22]
 8000c84:	fa42 f303 	asr.w	r3, r2, r3
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d004      	beq.n	8000c9a <lcd_ShowChar+0x10e>
 8000c90:	883b      	ldrh	r3, [r7, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff febe 	bl	8000a14 <LCD_WR_DATA>
 8000c98:	e003      	b.n	8000ca2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000c9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff feb9 	bl	8000a14 <LCD_WR_DATA>
				m++;
 8000ca2:	7d7b      	ldrb	r3, [r7, #21]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000ca8:	7d7b      	ldrb	r3, [r7, #21]
 8000caa:	7bfa      	ldrb	r2, [r7, #15]
 8000cac:	fbb3 f1f2 	udiv	r1, r3, r2
 8000cb0:	fb02 f201 	mul.w	r2, r2, r1
 8000cb4:	1a9b      	subs	r3, r3, r2
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d11f      	bne.n	8000cfc <lcd_ShowChar+0x170>
				{
					m=0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	757b      	strb	r3, [r7, #21]
					break;
 8000cc0:	e022      	b.n	8000d08 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000cc2:	7dfa      	ldrb	r2, [r7, #23]
 8000cc4:	7dbb      	ldrb	r3, [r7, #22]
 8000cc6:	fa42 f303 	asr.w	r3, r2, r3
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <lcd_ShowChar+0x152>
 8000cd2:	883a      	ldrh	r2, [r7, #0]
 8000cd4:	88b9      	ldrh	r1, [r7, #4]
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff3f 	bl	8000b5c <lcd_DrawPoint>
				x++;
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000ce4:	88fa      	ldrh	r2, [r7, #6]
 8000ce6:	8a3b      	ldrh	r3, [r7, #16]
 8000ce8:	1ad2      	subs	r2, r2, r3
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d105      	bne.n	8000cfc <lcd_ShowChar+0x170>
				{
					x=x0;
 8000cf0:	8a3b      	ldrh	r3, [r7, #16]
 8000cf2:	80fb      	strh	r3, [r7, #6]
					y++;
 8000cf4:	88bb      	ldrh	r3, [r7, #4]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	80bb      	strh	r3, [r7, #4]
					break;
 8000cfa:	e005      	b.n	8000d08 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000cfc:	7dbb      	ldrb	r3, [r7, #22]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	75bb      	strb	r3, [r7, #22]
 8000d02:	7dbb      	ldrb	r3, [r7, #22]
 8000d04:	2b07      	cmp	r3, #7
 8000d06:	d9b7      	bls.n	8000c78 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000d08:	8a7b      	ldrh	r3, [r7, #18]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	827b      	strh	r3, [r7, #18]
 8000d0e:	8a7a      	ldrh	r2, [r7, #18]
 8000d10:	89bb      	ldrh	r3, [r7, #12]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d380      	bcc.n	8000c18 <lcd_ShowChar+0x8c>
 8000d16:	e000      	b.n	8000d1a <lcd_ShowChar+0x18e>
		else return;
 8000d18:	bf00      	nop
				}
			}
		}
	}
}
 8000d1a:	371c      	adds	r7, #28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd90      	pop	{r4, r7, pc}
 8000d20:	080067e0 	.word	0x080067e0
 8000d24:	08006dd0 	.word	0x08006dd0
 8000d28:	08007fa0 	.word	0x08007fa0

08000d2c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	460a      	mov	r2, r1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000d40:	e004      	b.n	8000d4c <mypow+0x20>
 8000d42:	79fa      	ldrb	r2, [r7, #7]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	fb02 f303 	mul.w	r3, r2, r3
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	1e5a      	subs	r2, r3, #1
 8000d50:	71ba      	strb	r2, [r7, #6]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f5      	bne.n	8000d42 <mypow+0x16>
	return result;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af04      	add	r7, sp, #16
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	4611      	mov	r1, r2
 8000d70:	461a      	mov	r2, r3
 8000d72:	4623      	mov	r3, r4
 8000d74:	80fb      	strh	r3, [r7, #6]
 8000d76:	4603      	mov	r3, r0
 8000d78:	80bb      	strh	r3, [r7, #4]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	807b      	strh	r3, [r7, #2]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000d86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d8a:	085b      	lsrs	r3, r3, #1
 8000d8c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e059      	b.n	8000e48 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000d94:	887c      	ldrh	r4, [r7, #2]
 8000d96:	787a      	ldrb	r2, [r7, #1]
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	4619      	mov	r1, r3
 8000da4:	200a      	movs	r0, #10
 8000da6:	f7ff ffc1 	bl	8000d2c <mypow>
 8000daa:	4603      	mov	r3, r0
 8000dac:	fbb4 f1f3 	udiv	r1, r4, r3
 8000db0:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <lcd_ShowIntNum+0xf8>)
 8000db2:	fba3 2301 	umull	r2, r3, r3, r1
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	4613      	mov	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	1aca      	subs	r2, r1, r3
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000dc6:	7bbb      	ldrb	r3, [r7, #14]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d121      	bne.n	8000e10 <lcd_ShowIntNum+0xac>
 8000dcc:	7bfa      	ldrb	r2, [r7, #15]
 8000dce:	787b      	ldrb	r3, [r7, #1]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	da1c      	bge.n	8000e10 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000dd6:	7b3b      	ldrb	r3, [r7, #12]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d117      	bne.n	8000e0c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	7b7b      	ldrb	r3, [r7, #13]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	fb12 f303 	smulbb	r3, r2, r3
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	4413      	add	r3, r2
 8000dee:	b298      	uxth	r0, r3
 8000df0:	8c3a      	ldrh	r2, [r7, #32]
 8000df2:	88b9      	ldrh	r1, [r7, #4]
 8000df4:	2300      	movs	r3, #0
 8000df6:	9302      	str	r3, [sp, #8]
 8000df8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	4613      	mov	r3, r2
 8000e04:	2220      	movs	r2, #32
 8000e06:	f7ff fec1 	bl	8000b8c <lcd_ShowChar>
				continue;
 8000e0a:	e01a      	b.n	8000e42 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	7b7b      	ldrb	r3, [r7, #13]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	fb12 f303 	smulbb	r3, r2, r3
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	4413      	add	r3, r2
 8000e22:	b298      	uxth	r0, r3
 8000e24:	7b3b      	ldrb	r3, [r7, #12]
 8000e26:	3330      	adds	r3, #48	; 0x30
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	8c3c      	ldrh	r4, [r7, #32]
 8000e2c:	88b9      	ldrh	r1, [r7, #4]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9302      	str	r3, [sp, #8]
 8000e32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	4623      	mov	r3, r4
 8000e3e:	f7ff fea5 	bl	8000b8c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	3301      	adds	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	7bfa      	ldrb	r2, [r7, #15]
 8000e4a:	787b      	ldrb	r3, [r7, #1]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d3a1      	bcc.n	8000d94 <lcd_ShowIntNum+0x30>
	}
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd90      	pop	{r4, r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	cccccccd 	.word	0xcccccccd

08000e60 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4604      	mov	r4, r0
 8000e68:	4608      	mov	r0, r1
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4623      	mov	r3, r4
 8000e70:	80fb      	strh	r3, [r7, #6]
 8000e72:	4603      	mov	r3, r0
 8000e74:	80bb      	strh	r3, [r7, #4]
 8000e76:	460b      	mov	r3, r1
 8000e78:	807b      	strh	r3, [r7, #2]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8000e82:	88fa      	ldrh	r2, [r7, #6]
 8000e84:	887b      	ldrh	r3, [r7, #2]
 8000e86:	4413      	add	r3, r2
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	b29c      	uxth	r4, r3
 8000e8e:	88ba      	ldrh	r2, [r7, #4]
 8000e90:	883b      	ldrh	r3, [r7, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	3b01      	subs	r3, #1
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	88b9      	ldrh	r1, [r7, #4]
 8000e9c:	88f8      	ldrh	r0, [r7, #6]
 8000e9e:	4622      	mov	r2, r4
 8000ea0:	f7ff fdda 	bl	8000a58 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	82fb      	strh	r3, [r7, #22]
 8000ea8:	e027      	b.n	8000efa <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	82bb      	strh	r3, [r7, #20]
 8000eae:	e01d      	b.n	8000eec <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ec4:	4413      	add	r3, r2
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	b21b      	sxth	r3, r3
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fd9a 	bl	8000a14 <LCD_WR_DATA>
			k++;
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8000ee6:	8abb      	ldrh	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	82bb      	strh	r3, [r7, #20]
 8000eec:	8aba      	ldrh	r2, [r7, #20]
 8000eee:	883b      	ldrh	r3, [r7, #0]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d3dd      	bcc.n	8000eb0 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8000ef4:	8afb      	ldrh	r3, [r7, #22]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	82fb      	strh	r3, [r7, #22]
 8000efa:	8afa      	ldrh	r2, [r7, #22]
 8000efc:	887b      	ldrh	r3, [r7, #2]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d3d3      	bcc.n	8000eaa <lcd_ShowPicture+0x4a>
		}
	}
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	371c      	adds	r7, #28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd90      	pop	{r4, r7, pc}

08000f0c <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	091b      	lsrs	r3, r3, #4
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d007      	beq.n	8000f36 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <lcd_SetDir+0x44>)
 8000f28:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f2c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <lcd_SetDir+0x44>)
 8000f30:	22f0      	movs	r2, #240	; 0xf0
 8000f32:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000f34:	e006      	b.n	8000f44 <lcd_SetDir+0x38>
		lcddev.width=240;
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <lcd_SetDir+0x44>)
 8000f38:	22f0      	movs	r2, #240	; 0xf0
 8000f3a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <lcd_SetDir+0x44>)
 8000f3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f42:	805a      	strh	r2, [r3, #2]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	20000118 	.word	0x20000118

08000f54 <lcd_init>:


void lcd_init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5e:	48aa      	ldr	r0, [pc, #680]	; (8001208 <lcd_init+0x2b4>)
 8000f60:	f001 fb5a 	bl	8002618 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000f64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f68:	f000 fff2 	bl	8001f50 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f72:	48a5      	ldr	r0, [pc, #660]	; (8001208 <lcd_init+0x2b4>)
 8000f74:	f001 fb50 	bl	8002618 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000f78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f7c:	f000 ffe8 	bl	8001f50 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff ffc3 	bl	8000f0c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000f86:	20d3      	movs	r0, #211	; 0xd3
 8000f88:	f7ff fd34 	bl	80009f4 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000f8c:	f7ff fd52 	bl	8000a34 <LCD_RD_DATA>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b9d      	ldr	r3, [pc, #628]	; (800120c <lcd_init+0x2b8>)
 8000f96:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000f98:	f7ff fd4c 	bl	8000a34 <LCD_RD_DATA>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b9a      	ldr	r3, [pc, #616]	; (800120c <lcd_init+0x2b8>)
 8000fa2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000fa4:	f7ff fd46 	bl	8000a34 <LCD_RD_DATA>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b97      	ldr	r3, [pc, #604]	; (800120c <lcd_init+0x2b8>)
 8000fae:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000fb0:	4b96      	ldr	r3, [pc, #600]	; (800120c <lcd_init+0x2b8>)
 8000fb2:	889b      	ldrh	r3, [r3, #4]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	4b94      	ldr	r3, [pc, #592]	; (800120c <lcd_init+0x2b8>)
 8000fba:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000fbc:	f7ff fd3a 	bl	8000a34 <LCD_RD_DATA>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b91      	ldr	r3, [pc, #580]	; (800120c <lcd_init+0x2b8>)
 8000fc6:	889b      	ldrh	r3, [r3, #4]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	4b8f      	ldr	r3, [pc, #572]	; (800120c <lcd_init+0x2b8>)
 8000fce:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000fd0:	20cf      	movs	r0, #207	; 0xcf
 8000fd2:	f7ff fd0f 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fd1c 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000fdc:	20c1      	movs	r0, #193	; 0xc1
 8000fde:	f7ff fd19 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000fe2:	2030      	movs	r0, #48	; 0x30
 8000fe4:	f7ff fd16 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000fe8:	20ed      	movs	r0, #237	; 0xed
 8000fea:	f7ff fd03 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000fee:	2064      	movs	r0, #100	; 0x64
 8000ff0:	f7ff fd10 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f7ff fd0d 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000ffa:	2012      	movs	r0, #18
 8000ffc:	f7ff fd0a 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001000:	2081      	movs	r0, #129	; 0x81
 8001002:	f7ff fd07 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001006:	20e8      	movs	r0, #232	; 0xe8
 8001008:	f7ff fcf4 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800100c:	2085      	movs	r0, #133	; 0x85
 800100e:	f7ff fd01 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001012:	2010      	movs	r0, #16
 8001014:	f7ff fcfe 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001018:	207a      	movs	r0, #122	; 0x7a
 800101a:	f7ff fcfb 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800101e:	20cb      	movs	r0, #203	; 0xcb
 8001020:	f7ff fce8 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001024:	2039      	movs	r0, #57	; 0x39
 8001026:	f7ff fcf5 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800102a:	202c      	movs	r0, #44	; 0x2c
 800102c:	f7ff fcf2 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff fcef 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001036:	2034      	movs	r0, #52	; 0x34
 8001038:	f7ff fcec 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800103c:	2002      	movs	r0, #2
 800103e:	f7ff fce9 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001042:	20f7      	movs	r0, #247	; 0xf7
 8001044:	f7ff fcd6 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001048:	2020      	movs	r0, #32
 800104a:	f7ff fce3 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800104e:	20ea      	movs	r0, #234	; 0xea
 8001050:	f7ff fcd0 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff fcdd 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff fcda 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001060:	20c0      	movs	r0, #192	; 0xc0
 8001062:	f7ff fcc7 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001066:	201b      	movs	r0, #27
 8001068:	f7ff fcd4 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 800106c:	20c1      	movs	r0, #193	; 0xc1
 800106e:	f7ff fcc1 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001072:	2001      	movs	r0, #1
 8001074:	f7ff fcce 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001078:	20c5      	movs	r0, #197	; 0xc5
 800107a:	f7ff fcbb 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800107e:	2030      	movs	r0, #48	; 0x30
 8001080:	f7ff fcc8 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001084:	2030      	movs	r0, #48	; 0x30
 8001086:	f7ff fcc5 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800108a:	20c7      	movs	r0, #199	; 0xc7
 800108c:	f7ff fcb2 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001090:	20b7      	movs	r0, #183	; 0xb7
 8001092:	f7ff fcbf 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001096:	2036      	movs	r0, #54	; 0x36
 8001098:	f7ff fcac 	bl	80009f4 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 800109c:	2008      	movs	r0, #8
 800109e:	f7ff fcb9 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80010a2:	203a      	movs	r0, #58	; 0x3a
 80010a4:	f7ff fca6 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80010a8:	2055      	movs	r0, #85	; 0x55
 80010aa:	f7ff fcb3 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80010ae:	20b1      	movs	r0, #177	; 0xb1
 80010b0:	f7ff fca0 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff fcad 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80010ba:	201a      	movs	r0, #26
 80010bc:	f7ff fcaa 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80010c0:	20b6      	movs	r0, #182	; 0xb6
 80010c2:	f7ff fc97 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80010c6:	200a      	movs	r0, #10
 80010c8:	f7ff fca4 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80010cc:	20a2      	movs	r0, #162	; 0xa2
 80010ce:	f7ff fca1 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80010d2:	20f2      	movs	r0, #242	; 0xf2
 80010d4:	f7ff fc8e 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff fc9b 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80010de:	2026      	movs	r0, #38	; 0x26
 80010e0:	f7ff fc88 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff fc95 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80010ea:	20e0      	movs	r0, #224	; 0xe0
 80010ec:	f7ff fc82 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80010f0:	200f      	movs	r0, #15
 80010f2:	f7ff fc8f 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80010f6:	202a      	movs	r0, #42	; 0x2a
 80010f8:	f7ff fc8c 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80010fc:	2028      	movs	r0, #40	; 0x28
 80010fe:	f7ff fc89 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001102:	2008      	movs	r0, #8
 8001104:	f7ff fc86 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001108:	200e      	movs	r0, #14
 800110a:	f7ff fc83 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800110e:	2008      	movs	r0, #8
 8001110:	f7ff fc80 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001114:	2054      	movs	r0, #84	; 0x54
 8001116:	f7ff fc7d 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800111a:	20a9      	movs	r0, #169	; 0xa9
 800111c:	f7ff fc7a 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001120:	2043      	movs	r0, #67	; 0x43
 8001122:	f7ff fc77 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001126:	200a      	movs	r0, #10
 8001128:	f7ff fc74 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800112c:	200f      	movs	r0, #15
 800112e:	f7ff fc71 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff fc6e 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff fc6b 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff fc68 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff fc65 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800114a:	20e1      	movs	r0, #225	; 0xe1
 800114c:	f7ff fc52 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001150:	2000      	movs	r0, #0
 8001152:	f7ff fc5f 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001156:	2015      	movs	r0, #21
 8001158:	f7ff fc5c 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800115c:	2017      	movs	r0, #23
 800115e:	f7ff fc59 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001162:	2007      	movs	r0, #7
 8001164:	f7ff fc56 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001168:	2011      	movs	r0, #17
 800116a:	f7ff fc53 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800116e:	2006      	movs	r0, #6
 8001170:	f7ff fc50 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001174:	202b      	movs	r0, #43	; 0x2b
 8001176:	f7ff fc4d 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800117a:	2056      	movs	r0, #86	; 0x56
 800117c:	f7ff fc4a 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001180:	203c      	movs	r0, #60	; 0x3c
 8001182:	f7ff fc47 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001186:	2005      	movs	r0, #5
 8001188:	f7ff fc44 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800118c:	2010      	movs	r0, #16
 800118e:	f7ff fc41 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001192:	200f      	movs	r0, #15
 8001194:	f7ff fc3e 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001198:	203f      	movs	r0, #63	; 0x3f
 800119a:	f7ff fc3b 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800119e:	203f      	movs	r0, #63	; 0x3f
 80011a0:	f7ff fc38 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80011a4:	200f      	movs	r0, #15
 80011a6:	f7ff fc35 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80011aa:	202b      	movs	r0, #43	; 0x2b
 80011ac:	f7ff fc22 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fc2f 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff fc2c 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80011bc:	2001      	movs	r0, #1
 80011be:	f7ff fc29 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80011c2:	203f      	movs	r0, #63	; 0x3f
 80011c4:	f7ff fc26 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80011c8:	202a      	movs	r0, #42	; 0x2a
 80011ca:	f7ff fc13 	bl	80009f4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff fc20 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff fc1d 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fc1a 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80011e0:	20ef      	movs	r0, #239	; 0xef
 80011e2:	f7ff fc17 	bl	8000a14 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80011e6:	2011      	movs	r0, #17
 80011e8:	f7ff fc04 	bl	80009f4 <LCD_WR_REG>
	HAL_Delay(120);
 80011ec:	2078      	movs	r0, #120	; 0x78
 80011ee:	f000 feaf 	bl	8001f50 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80011f2:	2029      	movs	r0, #41	; 0x29
 80011f4:	f7ff fbfe 	bl	80009f4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <lcd_init+0x2bc>)
 8001200:	f001 fa0a 	bl	8002618 <HAL_GPIO_WritePin>
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40020800 	.word	0x40020800
 800120c:	20000118 	.word	0x20000118
 8001210:	40020000 	.word	0x40020000

08001214 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b08b      	sub	sp, #44	; 0x2c
 8001218:	af04      	add	r7, sp, #16
 800121a:	60ba      	str	r2, [r7, #8]
 800121c:	461a      	mov	r2, r3
 800121e:	4603      	mov	r3, r0
 8001220:	81fb      	strh	r3, [r7, #14]
 8001222:	460b      	mov	r3, r1
 8001224:	81bb      	strh	r3, [r7, #12]
 8001226:	4613      	mov	r3, r2
 8001228:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800122a:	89fb      	ldrh	r3, [r7, #14]
 800122c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001232:	e048      	b.n	80012c6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d145      	bne.n	80012c6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800123a:	89fa      	ldrh	r2, [r7, #14]
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <lcd_ShowStr+0xc4>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001246:	085b      	lsrs	r3, r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	1acb      	subs	r3, r1, r3
 800124c:	429a      	cmp	r2, r3
 800124e:	dc3f      	bgt.n	80012d0 <lcd_ShowStr+0xbc>
 8001250:	89ba      	ldrh	r2, [r7, #12]
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <lcd_ShowStr+0xc4>)
 8001254:	885b      	ldrh	r3, [r3, #2]
 8001256:	4619      	mov	r1, r3
 8001258:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800125c:	1acb      	subs	r3, r1, r3
 800125e:	429a      	cmp	r2, r3
 8001260:	dc36      	bgt.n	80012d0 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b80      	cmp	r3, #128	; 0x80
 8001268:	d902      	bls.n	8001270 <lcd_ShowStr+0x5c>
 800126a:	2301      	movs	r3, #1
 800126c:	75fb      	strb	r3, [r7, #23]
 800126e:	e02a      	b.n	80012c6 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b0d      	cmp	r3, #13
 8001276:	d10b      	bne.n	8001290 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001278:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800127c:	b29a      	uxth	r2, r3
 800127e:	89bb      	ldrh	r3, [r7, #12]
 8001280:	4413      	add	r3, r2
 8001282:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001284:	8abb      	ldrh	r3, [r7, #20]
 8001286:	81fb      	strh	r3, [r7, #14]
					str++;
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	3301      	adds	r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	e017      	b.n	80012c0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	781a      	ldrb	r2, [r3, #0]
 8001294:	88fc      	ldrh	r4, [r7, #6]
 8001296:	89b9      	ldrh	r1, [r7, #12]
 8001298:	89f8      	ldrh	r0, [r7, #14]
 800129a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	4623      	mov	r3, r4
 80012ac:	f7ff fc6e 	bl	8000b8c <lcd_ShowChar>
					x+=sizey/2;
 80012b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012b4:	085b      	lsrs	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	89fb      	ldrh	r3, [r7, #14]
 80012bc:	4413      	add	r3, r2
 80012be:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	3301      	adds	r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1b2      	bne.n	8001234 <lcd_ShowStr+0x20>
 80012ce:	e000      	b.n	80012d2 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80012d0:	bf00      	nop
			}
		}
	}
}
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd90      	pop	{r4, r7, pc}
 80012d8:	20000118 	.word	0x20000118

080012dc <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af04      	add	r7, sp, #16
 80012e2:	60ba      	str	r2, [r7, #8]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4603      	mov	r3, r0
 80012e8:	81fb      	strh	r3, [r7, #14]
 80012ea:	460b      	mov	r3, r1
 80012ec:	81bb      	strh	r3, [r7, #12]
 80012ee:	4613      	mov	r3, r2
 80012f0:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 80012f2:	68b8      	ldr	r0, [r7, #8]
 80012f4:	f7fe ff68 	bl	80001c8 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <lcd_StrCenter+0x60>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	8afb      	ldrh	r3, [r7, #22]
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	0fda      	lsrs	r2, r3, #31
 800130a:	4413      	add	r3, r2
 800130c:	105b      	asrs	r3, r3, #1
 800130e:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001310:	89fa      	ldrh	r2, [r7, #14]
 8001312:	8abb      	ldrh	r3, [r7, #20]
 8001314:	4413      	add	r3, r2
 8001316:	b298      	uxth	r0, r3
 8001318:	88fa      	ldrh	r2, [r7, #6]
 800131a:	89b9      	ldrh	r1, [r7, #12]
 800131c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	8c3b      	ldrh	r3, [r7, #32]
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	4613      	mov	r3, r2
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	f7ff ff70 	bl	8001214 <lcd_ShowStr>
}
 8001334:	bf00      	nop
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000118 	.word	0x20000118

08001340 <led7_init>:
uint8_t led7seg[4] = {0, 1, 2, 3}; //4 index
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;
uint16_t led7_index = 0;

void led7_init(){
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001344:	2201      	movs	r2, #1
 8001346:	2140      	movs	r1, #64	; 0x40
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <led7_init+0x14>)
 800134a:	f001 f965 	bl	8002618 <HAL_GPIO_WritePin>
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40021800 	.word	0x40021800

08001358 <led7_Scan>:

void led7_Scan(){
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800135c:	4b3f      	ldr	r3, [pc, #252]	; (800145c <led7_Scan+0x104>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	b29a      	uxth	r2, r3
 8001364:	4b3d      	ldr	r3, [pc, #244]	; (800145c <led7_Scan+0x104>)
 8001366:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001368:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <led7_Scan+0x108>)
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <led7_Scan+0x10c>)
 8001370:	5c9b      	ldrb	r3, [r3, r2]
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b21a      	sxth	r2, r3
 8001376:	4b39      	ldr	r3, [pc, #228]	; (800145c <led7_Scan+0x104>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	b21b      	sxth	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b21b      	sxth	r3, r3
 8001380:	b29a      	uxth	r2, r3
 8001382:	4b36      	ldr	r3, [pc, #216]	; (800145c <led7_Scan+0x104>)
 8001384:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001386:	4b36      	ldr	r3, [pc, #216]	; (8001460 <led7_Scan+0x108>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	2b03      	cmp	r3, #3
 800138c:	d846      	bhi.n	800141c <led7_Scan+0xc4>
 800138e:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <led7_Scan+0x3c>)
 8001390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001394:	080013a5 	.word	0x080013a5
 8001398:	080013c3 	.word	0x080013c3
 800139c:	080013e1 	.word	0x080013e1
 80013a0:	080013ff 	.word	0x080013ff
	case 0:
		spi_buffer |= 0x00b0;
 80013a4:	4b2d      	ldr	r3, [pc, #180]	; (800145c <led7_Scan+0x104>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b2b      	ldr	r3, [pc, #172]	; (800145c <led7_Scan+0x104>)
 80013b0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <led7_Scan+0x104>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <led7_Scan+0x104>)
 80013be:	801a      	strh	r2, [r3, #0]
		break;
 80013c0:	e02d      	b.n	800141e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <led7_Scan+0x104>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b23      	ldr	r3, [pc, #140]	; (800145c <led7_Scan+0x104>)
 80013ce:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <led7_Scan+0x104>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	f023 0320 	bic.w	r3, r3, #32
 80013d8:	b29a      	uxth	r2, r3
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <led7_Scan+0x104>)
 80013dc:	801a      	strh	r2, [r3, #0]
		break;
 80013de:	e01e      	b.n	800141e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80013e0:	4b1e      	ldr	r3, [pc, #120]	; (800145c <led7_Scan+0x104>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <led7_Scan+0x104>)
 80013ec:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <led7_Scan+0x104>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	f023 0310 	bic.w	r3, r3, #16
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <led7_Scan+0x104>)
 80013fa:	801a      	strh	r2, [r3, #0]
		break;
 80013fc:	e00f      	b.n	800141e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <led7_Scan+0x104>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001406:	b29a      	uxth	r2, r3
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <led7_Scan+0x104>)
 800140a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <led7_Scan+0x104>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001414:	b29a      	uxth	r2, r3
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <led7_Scan+0x104>)
 8001418:	801a      	strh	r2, [r3, #0]
		break;
 800141a:	e000      	b.n	800141e <led7_Scan+0xc6>
	default:
		break;
 800141c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <led7_Scan+0x108>)
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	425a      	negs	r2, r3
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	f002 0203 	and.w	r2, r2, #3
 800142e:	bf58      	it	pl
 8001430:	4253      	negpl	r3, r2
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <led7_Scan+0x108>)
 8001436:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2140      	movs	r1, #64	; 0x40
 800143c:	480a      	ldr	r0, [pc, #40]	; (8001468 <led7_Scan+0x110>)
 800143e:	f001 f8eb 	bl	8002618 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001442:	2301      	movs	r3, #1
 8001444:	2202      	movs	r2, #2
 8001446:	4905      	ldr	r1, [pc, #20]	; (800145c <led7_Scan+0x104>)
 8001448:	4808      	ldr	r0, [pc, #32]	; (800146c <led7_Scan+0x114>)
 800144a:	f002 ff04 	bl	8004256 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800144e:	2201      	movs	r2, #1
 8001450:	2140      	movs	r1, #64	; 0x40
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <led7_Scan+0x110>)
 8001454:	f001 f8e0 	bl	8002618 <HAL_GPIO_WritePin>
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000004 	.word	0x20000004
 8001460:	20000032 	.word	0x20000032
 8001464:	20000000 	.word	0x20000000
 8001468:	40021800 	.word	0x40021800
 800146c:	20000154 	.word	0x20000154

08001470 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001474:	f000 fcfa 	bl	8001e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001478:	f000 f826 	bl	80014c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800147c:	f7ff f9a0 	bl	80007c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001480:	f000 fbf8 	bl	8001c74 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001484:	f000 f9ec 	bl	8001860 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001488:	f7ff f920 	bl	80006cc <MX_FSMC_Init>
  MX_I2C1_Init();
 800148c:	f7ff fa84 	bl	8000998 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001490:	f000 fc5a 	bl	8001d48 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  system_init();
 8001494:	f000 f882 	bl	800159c <system_init>
  updateTime();
 8001498:	f000 f8ee 	bl	8001678 <updateTime>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  while(!flag_timer2);
 800149c:	bf00      	nop
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <main+0x54>)
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0fb      	beq.n	800149e <main+0x2e>
	  flag_timer2 = 0;
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <main+0x54>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	801a      	strh	r2, [r3, #0]
	  test_led();
 80014ac:	f000 f8a2 	bl	80015f4 <test_led>
	  button_Scan();
 80014b0:	f7ff f81a 	bl	80004e8 <button_Scan>
	  test_lcd();
 80014b4:	f000 f8a8 	bl	8001608 <test_lcd>
	  ds3231_ReadTime();
 80014b8:	f7ff f8a4 	bl	8000604 <ds3231_ReadTime>
	  displayTime();
 80014bc:	f000 f8fc 	bl	80016b8 <displayTime>
	  while(!flag_timer2);
 80014c0:	e7ec      	b.n	800149c <main+0x2c>
 80014c2:	bf00      	nop
 80014c4:	20000034 	.word	0x20000034

080014c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b094      	sub	sp, #80	; 0x50
 80014cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	f107 0320 	add.w	r3, r7, #32
 80014d2:	2230      	movs	r2, #48	; 0x30
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f005 f95e 	bl	8006798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <SystemClock_Config+0xcc>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	4a27      	ldr	r2, [pc, #156]	; (8001594 <SystemClock_Config+0xcc>)
 80014f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fa:	6413      	str	r3, [r2, #64]	; 0x40
 80014fc:	4b25      	ldr	r3, [pc, #148]	; (8001594 <SystemClock_Config+0xcc>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <SystemClock_Config+0xd0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a21      	ldr	r2, [pc, #132]	; (8001598 <SystemClock_Config+0xd0>)
 8001512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <SystemClock_Config+0xd0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001524:	2302      	movs	r3, #2
 8001526:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001528:	2301      	movs	r3, #1
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800152c:	2310      	movs	r3, #16
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001530:	2302      	movs	r3, #2
 8001532:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001534:	2300      	movs	r3, #0
 8001536:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001538:	2308      	movs	r3, #8
 800153a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800153c:	23a8      	movs	r3, #168	; 0xa8
 800153e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001540:	2302      	movs	r3, #2
 8001542:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001544:	2304      	movs	r3, #4
 8001546:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001548:	f107 0320 	add.w	r3, r7, #32
 800154c:	4618      	mov	r0, r3
 800154e:	f002 f985 	bl	800385c <HAL_RCC_OscConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001558:	f000 f92c 	bl	80017b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155c:	230f      	movs	r3, #15
 800155e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001560:	2302      	movs	r3, #2
 8001562:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001568:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800156c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800156e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001572:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	2105      	movs	r1, #5
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fbe6 	bl	8003d4c <HAL_RCC_ClockConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001586:	f000 f915 	bl	80017b4 <Error_Handler>
  }
}
 800158a:	bf00      	nop
 800158c:	3750      	adds	r7, #80	; 0x50
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40007000 	.word	0x40007000

0800159c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2120      	movs	r1, #32
 80015a4:	4811      	ldr	r0, [pc, #68]	; (80015ec <system_init+0x50>)
 80015a6:	f001 f837 	bl	8002618 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2140      	movs	r1, #64	; 0x40
 80015ae:	480f      	ldr	r0, [pc, #60]	; (80015ec <system_init+0x50>)
 80015b0:	f001 f832 	bl	8002618 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2110      	movs	r1, #16
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <system_init+0x50>)
 80015ba:	f001 f82d 	bl	8002618 <HAL_GPIO_WritePin>
	  timer_init();
 80015be:	f000 f8ff 	bl	80017c0 <timer_init>
	  led7_init();
 80015c2:	f7ff febd 	bl	8001340 <led7_init>
	  button_init();
 80015c6:	f7fe ff83 	bl	80004d0 <button_init>
	  lcd_init();
 80015ca:	f7ff fcc3 	bl	8000f54 <lcd_init>
	  //ds3231_init();
	  while(HAL_I2C_IsDeviceReady(&hi2c1, 0x68<<1, 3, 100) != HAL_OK);
 80015ce:	bf00      	nop
 80015d0:	2364      	movs	r3, #100	; 0x64
 80015d2:	2203      	movs	r2, #3
 80015d4:	21d0      	movs	r1, #208	; 0xd0
 80015d6:	4806      	ldr	r0, [pc, #24]	; (80015f0 <system_init+0x54>)
 80015d8:	f001 fcb6 	bl	8002f48 <HAL_I2C_IsDeviceReady>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f6      	bne.n	80015d0 <system_init+0x34>
	  setTimer2(50);
 80015e2:	2032      	movs	r0, #50	; 0x32
 80015e4:	f000 f8f6 	bl	80017d4 <setTimer2>
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40021000 	.word	0x40021000
 80015f0:	200000c4 	.word	0x200000c4

080015f4 <test_led>:
void test_led(){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 80015f8:	2110      	movs	r1, #16
 80015fa:	4802      	ldr	r0, [pc, #8]	; (8001604 <test_led+0x10>)
 80015fc:	f001 f825 	bl	800264a <HAL_GPIO_TogglePin>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40021000 	.word	0x40021000

08001608 <test_lcd>:
	led7_SetDigit(1, 0, 0);
	led7_SetDigit(2, 1, 0);
	led7_SetDigit(3, 2, 0);
	led7_SetDigit(4, 3, 0);
}
void test_lcd(){
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af04      	add	r7, sp, #16
	lcd_Fill(0, 0, 240, 20, BLUE);
 800160e:	231f      	movs	r3, #31
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2314      	movs	r3, #20
 8001614:	22f0      	movs	r2, #240	; 0xf0
 8001616:	2100      	movs	r1, #0
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fa69 	bl	8000af0 <lcd_Fill>
	lcd_StrCenter(0, 2, "Hello World !!!", RED, BLUE, 16, 1);
 800161e:	2301      	movs	r3, #1
 8001620:	9302      	str	r3, [sp, #8]
 8001622:	2310      	movs	r3, #16
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	231f      	movs	r3, #31
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800162e:	4a0f      	ldr	r2, [pc, #60]	; (800166c <test_lcd+0x64>)
 8001630:	2102      	movs	r1, #2
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff fe52 	bl	80012dc <lcd_StrCenter>
	lcd_ShowStr(20, 30, "Test lcd screen", WHITE, RED, 24, 0);
 8001638:	2300      	movs	r3, #0
 800163a:	9302      	str	r3, [sp, #8]
 800163c:	2318      	movs	r3, #24
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800164a:	4a09      	ldr	r2, [pc, #36]	; (8001670 <test_lcd+0x68>)
 800164c:	211e      	movs	r1, #30
 800164e:	2014      	movs	r0, #20
 8001650:	f7ff fde0 	bl	8001214 <lcd_ShowStr>
	lcd_ShowPicture(80, 200, 90, 90, gImage_logo);
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <test_lcd+0x6c>)
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	235a      	movs	r3, #90	; 0x5a
 800165a:	225a      	movs	r2, #90	; 0x5a
 800165c:	21c8      	movs	r1, #200	; 0xc8
 800165e:	2050      	movs	r0, #80	; 0x50
 8001660:	f7ff fbfe 	bl	8000e60 <lcd_ShowPicture>
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	080067c0 	.word	0x080067c0
 8001670:	080067d0 	.word	0x080067d0
 8001674:	08009760 	.word	0x08009760

08001678 <updateTime>:
		if(button_count[i] == 1){
			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
		}
	}
}
void updateTime(){
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 23);
 800167c:	2117      	movs	r1, #23
 800167e:	2006      	movs	r0, #6
 8001680:	f7fe ff9e 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 9);
 8001684:	2109      	movs	r1, #9
 8001686:	2005      	movs	r0, #5
 8001688:	f7fe ff9a 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 15);
 800168c:	210f      	movs	r1, #15
 800168e:	2004      	movs	r0, #4
 8001690:	f7fe ff96 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8001694:	2106      	movs	r1, #6
 8001696:	2003      	movs	r0, #3
 8001698:	f7fe ff92 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 21);
 800169c:	2115      	movs	r1, #21
 800169e:	2002      	movs	r0, #2
 80016a0:	f7fe ff8e 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 22);
 80016a4:	2116      	movs	r1, #22
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7fe ff8a 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 30);
 80016ac:	211e      	movs	r1, #30
 80016ae:	2000      	movs	r0, #0
 80016b0:	f7fe ff86 	bl	80005c0 <ds3231_Write>
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <displayTime>:
void displayTime(){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 80016be:	4b36      	ldr	r3, [pc, #216]	; (8001798 <displayTime+0xe0>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	2318      	movs	r3, #24
 80016c6:	9302      	str	r3, [sp, #8]
 80016c8:	2300      	movs	r3, #0
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2302      	movs	r3, #2
 80016d4:	2164      	movs	r1, #100	; 0x64
 80016d6:	2046      	movs	r0, #70	; 0x46
 80016d8:	f7ff fb44 	bl	8000d64 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80016dc:	4b2f      	ldr	r3, [pc, #188]	; (800179c <displayTime+0xe4>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	2318      	movs	r3, #24
 80016e4:	9302      	str	r3, [sp, #8]
 80016e6:	2300      	movs	r3, #0
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2302      	movs	r3, #2
 80016f2:	2164      	movs	r1, #100	; 0x64
 80016f4:	206e      	movs	r0, #110	; 0x6e
 80016f6:	f7ff fb35 	bl	8000d64 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 80016fa:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <displayTime+0xe8>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	2318      	movs	r3, #24
 8001702:	9302      	str	r3, [sp, #8]
 8001704:	2300      	movs	r3, #0
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2302      	movs	r3, #2
 8001710:	2164      	movs	r1, #100	; 0x64
 8001712:	2096      	movs	r0, #150	; 0x96
 8001714:	f7ff fb26 	bl	8000d64 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <displayTime+0xec>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	b29a      	uxth	r2, r3
 800171e:	2318      	movs	r3, #24
 8001720:	9302      	str	r3, [sp, #8]
 8001722:	2300      	movs	r3, #0
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2302      	movs	r3, #2
 800172e:	2182      	movs	r1, #130	; 0x82
 8001730:	2014      	movs	r0, #20
 8001732:	f7ff fb17 	bl	8000d64 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <displayTime+0xf0>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	b29a      	uxth	r2, r3
 800173c:	2318      	movs	r3, #24
 800173e:	9302      	str	r3, [sp, #8]
 8001740:	2300      	movs	r3, #0
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2302      	movs	r3, #2
 800174c:	2182      	movs	r1, #130	; 0x82
 800174e:	2046      	movs	r0, #70	; 0x46
 8001750:	f7ff fb08 	bl	8000d64 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <displayTime+0xf4>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b29a      	uxth	r2, r3
 800175a:	2318      	movs	r3, #24
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	2300      	movs	r3, #0
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2302      	movs	r3, #2
 800176a:	2182      	movs	r1, #130	; 0x82
 800176c:	206e      	movs	r0, #110	; 0x6e
 800176e:	f7ff faf9 	bl	8000d64 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <displayTime+0xf8>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b29a      	uxth	r2, r3
 8001778:	2318      	movs	r3, #24
 800177a:	9302      	str	r3, [sp, #8]
 800177c:	2300      	movs	r3, #0
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	2302      	movs	r3, #2
 8001788:	2182      	movs	r1, #130	; 0x82
 800178a:	2096      	movs	r0, #150	; 0x96
 800178c:	f7ff faea 	bl	8000d64 <lcd_ShowIntNum>
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000069 	.word	0x20000069
 800179c:	20000066 	.word	0x20000066
 80017a0:	20000064 	.word	0x20000064
 80017a4:	20000068 	.word	0x20000068
 80017a8:	20000067 	.word	0x20000067
 80017ac:	2000006a 	.word	0x2000006a
 80017b0:	20000065 	.word	0x20000065

080017b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017bc:	e7fe      	b.n	80017bc <Error_Handler+0x8>
	...

080017c0 <timer_init>:
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;



void timer_init(){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <timer_init+0x10>)
 80017c6:	f003 faf9 	bl	8004dbc <HAL_TIM_Base_Start_IT>
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200001ac 	.word	0x200001ac

080017d4 <setTimer2>:
	timer1_MUL = duration / TIMER_CYCLE_2;
	timer1_counter = timer1_MUL;
	flag_timer1 = 0;
}*/

void setTimer2(uint16_t duration){
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration / TIMER_CYCLE_2;
 80017de:	4a08      	ldr	r2, [pc, #32]	; (8001800 <setTimer2+0x2c>)
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <setTimer2+0x2c>)
 80017e6:	881a      	ldrh	r2, [r3, #0]
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <setTimer2+0x30>)
 80017ea:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <setTimer2+0x34>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	801a      	strh	r2, [r3, #0]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000038 	.word	0x20000038
 8001804:	20000036 	.word	0x20000036
 8001808:	20000034 	.word	0x20000034

0800180c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800181c:	d116      	bne.n	800184c <HAL_TIM_PeriodElapsedCallback+0x40>
			if(timer1_counter == 0) {
				flag_timer1 = 1;
				timer1_counter = timer1_MUL;
			}
		}*/
		if(timer2_counter > 0){
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d010      	beq.n	8001848 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	3b01      	subs	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001830:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d106      	bne.n	8001848 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800183c:	2201      	movs	r2, #1
 800183e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001842:	881a      	ldrh	r2, [r3, #0]
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001846:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8001848:	f7ff fd86 	bl	8001358 <led7_Scan>
	}
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000036 	.word	0x20000036
 8001858:	20000034 	.word	0x20000034
 800185c:	20000038 	.word	0x20000038

08001860 <MX_SPI1_Init>:
  * @param None
  * @retval None
  */

void MX_SPI1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001866:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <MX_SPI1_Init+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <MX_SPI1_Init+0x64>)
 800186c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001872:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_SPI1_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_SPI1_Init+0x64>)
 800188c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001890:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001894:	2200      	movs	r2, #0
 8001896:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <MX_SPI1_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_SPI1_Init+0x64>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <MX_SPI1_Init+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_SPI1_Init+0x64>)
 80018ac:	220a      	movs	r2, #10
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_SPI1_Init+0x64>)
 80018b2:	f002 fc47 	bl	8004144 <HAL_SPI_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018bc:	f7ff ff7a 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000154 	.word	0x20000154
 80018c8:	40013000 	.word	0x40013000

080018cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	4a0f      	ldr	r2, [pc, #60]	; (8001918 <HAL_MspInit+0x4c>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e0:	6453      	str	r3, [r2, #68]	; 0x44
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_MspInit+0x4c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a08      	ldr	r2, [pc, #32]	; (8001918 <HAL_MspInit+0x4c>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_MspInit+0x4c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <HAL_I2C_MspInit+0x84>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12b      	bne.n	8001996 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_I2C_MspInit+0x88>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <HAL_I2C_MspInit+0x88>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_I2C_MspInit+0x88>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800195a:	23c0      	movs	r3, #192	; 0xc0
 800195c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800195e:	2312      	movs	r3, #18
 8001960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800196a:	2304      	movs	r3, #4
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <HAL_I2C_MspInit+0x8c>)
 8001976:	f000 fcb3 	bl	80022e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_I2C_MspInit+0x88>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_I2C_MspInit+0x88>)
 8001984:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_I2C_MspInit+0x88>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40005400 	.word	0x40005400
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020400 	.word	0x40020400

080019ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a19      	ldr	r2, [pc, #100]	; (8001a30 <HAL_SPI_MspInit+0x84>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12b      	bne.n	8001a26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_SPI_MspInit+0x88>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_SPI_MspInit+0x88>)
 80019d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019dc:	6453      	str	r3, [r2, #68]	; 0x44
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_SPI_MspInit+0x88>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_SPI_MspInit+0x88>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <HAL_SPI_MspInit+0x88>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_SPI_MspInit+0x88>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001a06:	2338      	movs	r3, #56	; 0x38
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a16:	2305      	movs	r3, #5
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <HAL_SPI_MspInit+0x8c>)
 8001a22:	f000 fc5d 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40013000 	.word	0x40013000
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020400 	.word	0x40020400

08001a3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a4c:	d115      	bne.n	8001a7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_TIM_Base_MspInit+0x48>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <HAL_TIM_Base_MspInit+0x48>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_TIM_Base_MspInit+0x48>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	201c      	movs	r0, #28
 8001a70:	f000 fb6d 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a74:	201c      	movs	r0, #28
 8001a76:	f000 fb86 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800

08001a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <HAL_UART_MspInit+0x94>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d134      	bne.n	8001b14 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <HAL_UART_MspInit+0x98>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <HAL_UART_MspInit+0x98>)
 8001ab4:	f043 0310 	orr.w	r3, r3, #16
 8001ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_UART_MspInit+0x98>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_UART_MspInit+0x98>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <HAL_UART_MspInit+0x98>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_UART_MspInit+0x98>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ae2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001af4:	2307      	movs	r3, #7
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	4809      	ldr	r0, [pc, #36]	; (8001b24 <HAL_UART_MspInit+0x9c>)
 8001b00:	f000 fbee 	bl	80022e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	2025      	movs	r0, #37	; 0x25
 8001b0a:	f000 fb20 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b0e:	2025      	movs	r0, #37	; 0x25
 8001b10:	f000 fb39 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b14:	bf00      	nop
 8001b16:	3728      	adds	r7, #40	; 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40011000 	.word	0x40011000
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020000 	.word	0x40020000

08001b28 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <HAL_FSMC_MspInit+0x88>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d131      	bne.n	8001ba8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001b44:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <HAL_FSMC_MspInit+0x88>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_FSMC_MspInit+0x8c>)
 8001b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b52:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <HAL_FSMC_MspInit+0x8c>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6393      	str	r3, [r2, #56]	; 0x38
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_FSMC_MspInit+0x8c>)
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001b66:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001b6a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001b78:	230c      	movs	r3, #12
 8001b7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <HAL_FSMC_MspInit+0x90>)
 8001b82:	f000 fbad 	bl	80022e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001b86:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001b8a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001b98:	230c      	movs	r3, #12
 8001b9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4806      	ldr	r0, [pc, #24]	; (8001bbc <HAL_FSMC_MspInit+0x94>)
 8001ba2:	f000 fb9d 	bl	80022e0 <HAL_GPIO_Init>
 8001ba6:	e000      	b.n	8001baa <HAL_FSMC_MspInit+0x82>
    return;
 8001ba8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	2000003c 	.word	0x2000003c
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40020c00 	.word	0x40020c00

08001bc0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001bc8:	f7ff ffae 	bl	8001b28 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <NMI_Handler+0x4>

08001bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <HardFault_Handler+0x4>

08001be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <MemManage_Handler+0x4>

08001be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <BusFault_Handler+0x4>

08001bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <UsageFault_Handler+0x4>

08001bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c20:	f000 f976 	bl	8001f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <TIM2_IRQHandler+0x10>)
 8001c2e:	f003 f935 	bl	8004e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200001ac 	.word	0x200001ac

08001c3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <USART1_IRQHandler+0x10>)
 8001c42:	f003 fdfd 	bl	8005840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200001f4 	.word	0x200001f4

08001c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <SystemInit+0x20>)
 8001c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <SystemInit+0x20>)
 8001c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c88:	463b      	mov	r3, r7
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001c92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001c9a:	f240 3247 	movw	r2, #839	; 0x347
 8001c9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001ca6:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001ca8:	2263      	movs	r2, #99	; 0x63
 8001caa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cb8:	4813      	ldr	r0, [pc, #76]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001cba:	f003 f82f 	bl	8004d1c <HAL_TIM_Base_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001cc4:	f7ff fd76 	bl	80017b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cce:	f107 0308 	add.w	r3, r7, #8
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480c      	ldr	r0, [pc, #48]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001cd6:	f003 f9e9 	bl	80050ac <HAL_TIM_ConfigClockSource>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ce0:	f7ff fd68 	bl	80017b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cec:	463b      	mov	r3, r7
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_TIM2_Init+0x94>)
 8001cf2:	f003 fc05 	bl	8005500 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001cfc:	f7ff fd5a 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200001ac 	.word	0x200001ac

08001d0c <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a08      	ldr	r2, [pc, #32]	; (8001d3c <HAL_UART_RxCpltCallback+0x30>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d10a      	bne.n	8001d34 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8001d1e:	230a      	movs	r3, #10
 8001d20:	2201      	movs	r2, #1
 8001d22:	4907      	ldr	r1, [pc, #28]	; (8001d40 <HAL_UART_RxCpltCallback+0x34>)
 8001d24:	4807      	ldr	r0, [pc, #28]	; (8001d44 <HAL_UART_RxCpltCallback+0x38>)
 8001d26:	f003 fcc8 	bl	80056ba <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4904      	ldr	r1, [pc, #16]	; (8001d40 <HAL_UART_RxCpltCallback+0x34>)
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <HAL_UART_RxCpltCallback+0x38>)
 8001d30:	f003 fd55 	bl	80057de <HAL_UART_Receive_IT>
	}
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40011000 	.word	0x40011000
 8001d40:	20000040 	.word	0x20000040
 8001d44:	200001f4 	.word	0x200001f4

08001d48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d4e:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <MX_USART1_UART_Init+0x50>)
 8001d50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d6e:	220c      	movs	r2, #12
 8001d70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <MX_USART1_UART_Init+0x4c>)
 8001d80:	f003 fc4e 	bl	8005620 <HAL_UART_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d8a:	f7ff fd13 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200001f4 	.word	0x200001f4
 8001d98:	40011000 	.word	0x40011000

08001d9c <BCD2DEC>:
 *      Author: ADMIN
 */

#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	0092      	lsls	r2, r2, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b2db      	uxtb	r3, r3
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <DEC2BCD+0x44>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	b258      	sxtb	r0, r3
 8001dea:	79fa      	ldrb	r2, [r7, #7]
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <DEC2BCD+0x44>)
 8001dee:	fba3 1302 	umull	r1, r3, r3, r2
 8001df2:	08d9      	lsrs	r1, r3, #3
 8001df4:	460b      	mov	r3, r1
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	4303      	orrs	r3, r0
 8001e04:	b25b      	sxtb	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	cccccccd 	.word	0xcccccccd

08001e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e1c:	480d      	ldr	r0, [pc, #52]	; (8001e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e1e:	490e      	ldr	r1, [pc, #56]	; (8001e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e20:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e32:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e34:	4c0b      	ldr	r4, [pc, #44]	; (8001e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e42:	f7ff ff05 	bl	8001c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e46:	f004 fc83 	bl	8006750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4a:	f7ff fb11 	bl	8001470 <main>
  bx  lr    
 8001e4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e58:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001e5c:	0800d6d0 	.word	0x0800d6d0
  ldr r2, =_sbss
 8001e60:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001e64:	2000023c 	.word	0x2000023c

08001e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e68:	e7fe      	b.n	8001e68 <ADC_IRQHandler>
	...

08001e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_Init+0x40>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <HAL_Init+0x40>)
 8001e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_Init+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <HAL_Init+0x40>)
 8001e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a07      	ldr	r2, [pc, #28]	; (8001eac <HAL_Init+0x40>)
 8001e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e94:	2003      	movs	r0, #3
 8001e96:	f000 f94f 	bl	8002138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9a:	200f      	movs	r0, #15
 8001e9c:	f000 f808 	bl	8001eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea0:	f7ff fd14 	bl	80018cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023c00 	.word	0x40023c00

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_InitTick+0x54>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_InitTick+0x58>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 f967 	bl	80021a2 <HAL_SYSTICK_Config>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00e      	b.n	8001efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b0f      	cmp	r3, #15
 8001ee2:	d80a      	bhi.n	8001efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f000 f92f 	bl	800214e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef0:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <HAL_InitTick+0x5c>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e000      	b.n	8001efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000008 	.word	0x20000008
 8001f08:	20000010 	.word	0x20000010
 8001f0c:	2000000c 	.word	0x2000000c

08001f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_IncTick+0x20>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x24>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_IncTick+0x24>)
 8001f22:	6013      	str	r3, [r2, #0]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000010 	.word	0x20000010
 8001f34:	20000238 	.word	0x20000238

08001f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <HAL_GetTick+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000238 	.word	0x20000238

08001f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff ffee 	bl	8001f38 <HAL_GetTick>
 8001f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d005      	beq.n	8001f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_Delay+0x44>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f76:	bf00      	nop
 8001f78:	f7ff ffde 	bl	8001f38 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d8f7      	bhi.n	8001f78 <HAL_Delay+0x28>
  {
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000010 	.word	0x20000010

08001f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0307 	and.w	r3, r3, #7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	2b00      	cmp	r3, #0
 800200c:	db0b      	blt.n	8002026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	f003 021f 	and.w	r2, r3, #31
 8002014:	4907      	ldr	r1, [pc, #28]	; (8002034 <__NVIC_EnableIRQ+0x38>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2001      	movs	r0, #1
 800201e:	fa00 f202 	lsl.w	r2, r0, r2
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000e100 	.word	0xe000e100

08002038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	2b00      	cmp	r3, #0
 800204a:	db0a      	blt.n	8002062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	490c      	ldr	r1, [pc, #48]	; (8002084 <__NVIC_SetPriority+0x4c>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	440b      	add	r3, r1
 800205c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002060:	e00a      	b.n	8002078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4908      	ldr	r1, [pc, #32]	; (8002088 <__NVIC_SetPriority+0x50>)
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	3b04      	subs	r3, #4
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	440b      	add	r3, r1
 8002076:	761a      	strb	r2, [r3, #24]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000e100 	.word	0xe000e100
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f1c3 0307 	rsb	r3, r3, #7
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	bf28      	it	cs
 80020aa:	2304      	movcs	r3, #4
 80020ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3304      	adds	r3, #4
 80020b2:	2b06      	cmp	r3, #6
 80020b4:	d902      	bls.n	80020bc <NVIC_EncodePriority+0x30>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3b03      	subs	r3, #3
 80020ba:	e000      	b.n	80020be <NVIC_EncodePriority+0x32>
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	f04f 32ff 	mov.w	r2, #4294967295
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	43d9      	mvns	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	4313      	orrs	r3, r2
         );
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002104:	d301      	bcc.n	800210a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002106:	2301      	movs	r3, #1
 8002108:	e00f      	b.n	800212a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <SysTick_Config+0x40>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002112:	210f      	movs	r1, #15
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	f7ff ff8e 	bl	8002038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <SysTick_Config+0x40>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002122:	4b04      	ldr	r3, [pc, #16]	; (8002134 <SysTick_Config+0x40>)
 8002124:	2207      	movs	r2, #7
 8002126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	e000e010 	.word	0xe000e010

08002138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff29 	bl	8001f98 <__NVIC_SetPriorityGrouping>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002160:	f7ff ff3e 	bl	8001fe0 <__NVIC_GetPriorityGrouping>
 8002164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f7ff ff8e 	bl	800208c <NVIC_EncodePriority>
 8002170:	4602      	mov	r2, r0
 8002172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff5d 	bl	8002038 <__NVIC_SetPriority>
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff31 	bl	8001ffc <__NVIC_EnableIRQ>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffa2 	bl	80020f4 <SysTick_Config>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021c8:	f7ff feb6 	bl	8001f38 <HAL_GetTick>
 80021cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d008      	beq.n	80021ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2280      	movs	r2, #128	; 0x80
 80021de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e052      	b.n	8002292 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0216 	bic.w	r2, r2, #22
 80021fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800220a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	2b00      	cmp	r3, #0
 8002212:	d103      	bne.n	800221c <HAL_DMA_Abort+0x62>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002218:	2b00      	cmp	r3, #0
 800221a:	d007      	beq.n	800222c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0208 	bic.w	r2, r2, #8
 800222a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0201 	bic.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800223c:	e013      	b.n	8002266 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800223e:	f7ff fe7b 	bl	8001f38 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b05      	cmp	r3, #5
 800224a:	d90c      	bls.n	8002266 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2220      	movs	r2, #32
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2203      	movs	r2, #3
 8002256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e015      	b.n	8002292 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e4      	bne.n	800223e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002278:	223f      	movs	r2, #63	; 0x3f
 800227a:	409a      	lsls	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d004      	beq.n	80022b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2280      	movs	r2, #128	; 0x80
 80022b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e00c      	b.n	80022d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2205      	movs	r2, #5
 80022bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	; 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	e16b      	b.n	80025d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	429a      	cmp	r2, r3
 8002316:	f040 815a 	bne.w	80025ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d005      	beq.n	8002332 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800232e:	2b02      	cmp	r3, #2
 8002330:	d130      	bne.n	8002394 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2203      	movs	r2, #3
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002368:	2201      	movs	r2, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 0201 	and.w	r2, r3, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b03      	cmp	r3, #3
 800239e:	d017      	beq.n	80023d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d123      	bne.n	8002424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	08da      	lsrs	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3208      	adds	r2, #8
 80023e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	220f      	movs	r2, #15
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	08da      	lsrs	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3208      	adds	r2, #8
 800241e:	69b9      	ldr	r1, [r7, #24]
 8002420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0203 	and.w	r2, r3, #3
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80b4 	beq.w	80025ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b60      	ldr	r3, [pc, #384]	; (80025ec <HAL_GPIO_Init+0x30c>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	4a5f      	ldr	r2, [pc, #380]	; (80025ec <HAL_GPIO_Init+0x30c>)
 8002470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002474:	6453      	str	r3, [r2, #68]	; 0x44
 8002476:	4b5d      	ldr	r3, [pc, #372]	; (80025ec <HAL_GPIO_Init+0x30c>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002482:	4a5b      	ldr	r2, [pc, #364]	; (80025f0 <HAL_GPIO_Init+0x310>)
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	3302      	adds	r3, #2
 800248a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	220f      	movs	r2, #15
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a52      	ldr	r2, [pc, #328]	; (80025f4 <HAL_GPIO_Init+0x314>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d02b      	beq.n	8002506 <HAL_GPIO_Init+0x226>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a51      	ldr	r2, [pc, #324]	; (80025f8 <HAL_GPIO_Init+0x318>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d025      	beq.n	8002502 <HAL_GPIO_Init+0x222>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a50      	ldr	r2, [pc, #320]	; (80025fc <HAL_GPIO_Init+0x31c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d01f      	beq.n	80024fe <HAL_GPIO_Init+0x21e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4f      	ldr	r2, [pc, #316]	; (8002600 <HAL_GPIO_Init+0x320>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d019      	beq.n	80024fa <HAL_GPIO_Init+0x21a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4e      	ldr	r2, [pc, #312]	; (8002604 <HAL_GPIO_Init+0x324>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_GPIO_Init+0x216>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4d      	ldr	r2, [pc, #308]	; (8002608 <HAL_GPIO_Init+0x328>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00d      	beq.n	80024f2 <HAL_GPIO_Init+0x212>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4c      	ldr	r2, [pc, #304]	; (800260c <HAL_GPIO_Init+0x32c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d007      	beq.n	80024ee <HAL_GPIO_Init+0x20e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4b      	ldr	r2, [pc, #300]	; (8002610 <HAL_GPIO_Init+0x330>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <HAL_GPIO_Init+0x20a>
 80024e6:	2307      	movs	r3, #7
 80024e8:	e00e      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024ea:	2308      	movs	r3, #8
 80024ec:	e00c      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024ee:	2306      	movs	r3, #6
 80024f0:	e00a      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024f2:	2305      	movs	r3, #5
 80024f4:	e008      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024f6:	2304      	movs	r3, #4
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024fa:	2303      	movs	r3, #3
 80024fc:	e004      	b.n	8002508 <HAL_GPIO_Init+0x228>
 80024fe:	2302      	movs	r3, #2
 8002500:	e002      	b.n	8002508 <HAL_GPIO_Init+0x228>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_GPIO_Init+0x228>
 8002506:	2300      	movs	r3, #0
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	f002 0203 	and.w	r2, r2, #3
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	4093      	lsls	r3, r2
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002518:	4935      	ldr	r1, [pc, #212]	; (80025f0 <HAL_GPIO_Init+0x310>)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002526:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <HAL_GPIO_Init+0x334>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800254a:	4a32      	ldr	r2, [pc, #200]	; (8002614 <HAL_GPIO_Init+0x334>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002550:	4b30      	ldr	r3, [pc, #192]	; (8002614 <HAL_GPIO_Init+0x334>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002574:	4a27      	ldr	r2, [pc, #156]	; (8002614 <HAL_GPIO_Init+0x334>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800257a:	4b26      	ldr	r3, [pc, #152]	; (8002614 <HAL_GPIO_Init+0x334>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800259e:	4a1d      	ldr	r2, [pc, #116]	; (8002614 <HAL_GPIO_Init+0x334>)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <HAL_GPIO_Init+0x334>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025c8:	4a12      	ldr	r2, [pc, #72]	; (8002614 <HAL_GPIO_Init+0x334>)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3301      	adds	r3, #1
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	2b0f      	cmp	r3, #15
 80025d8:	f67f ae90 	bls.w	80022fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40013800 	.word	0x40013800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40020400 	.word	0x40020400
 80025fc:	40020800 	.word	0x40020800
 8002600:	40020c00 	.word	0x40020c00
 8002604:	40021000 	.word	0x40021000
 8002608:	40021400 	.word	0x40021400
 800260c:	40021800 	.word	0x40021800
 8002610:	40021c00 	.word	0x40021c00
 8002614:	40013c00 	.word	0x40013c00

08002618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
 8002624:	4613      	mov	r3, r2
 8002626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002628:	787b      	ldrb	r3, [r7, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002634:	e003      	b.n	800263e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	041a      	lsls	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	619a      	str	r2, [r3, #24]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800264a:	b480      	push	{r7}
 800264c:	b085      	sub	sp, #20
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800265c:	887a      	ldrh	r2, [r7, #2]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4013      	ands	r3, r2
 8002662:	041a      	lsls	r2, r3, #16
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	43d9      	mvns	r1, r3
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	400b      	ands	r3, r1
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e12b      	b.n	80028ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff f938 	bl	800191c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2224      	movs	r2, #36	; 0x24
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026e4:	f001 fd06 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 80026e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4a81      	ldr	r2, [pc, #516]	; (80028f4 <HAL_I2C_Init+0x274>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d807      	bhi.n	8002704 <HAL_I2C_Init+0x84>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4a80      	ldr	r2, [pc, #512]	; (80028f8 <HAL_I2C_Init+0x278>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	bf94      	ite	ls
 80026fc:	2301      	movls	r3, #1
 80026fe:	2300      	movhi	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	e006      	b.n	8002712 <HAL_I2C_Init+0x92>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4a7d      	ldr	r2, [pc, #500]	; (80028fc <HAL_I2C_Init+0x27c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	bf94      	ite	ls
 800270c:	2301      	movls	r3, #1
 800270e:	2300      	movhi	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0e7      	b.n	80028ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4a78      	ldr	r2, [pc, #480]	; (8002900 <HAL_I2C_Init+0x280>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	0c9b      	lsrs	r3, r3, #18
 8002724:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	430a      	orrs	r2, r1
 8002738:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4a6a      	ldr	r2, [pc, #424]	; (80028f4 <HAL_I2C_Init+0x274>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d802      	bhi.n	8002754 <HAL_I2C_Init+0xd4>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	3301      	adds	r3, #1
 8002752:	e009      	b.n	8002768 <HAL_I2C_Init+0xe8>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	4a69      	ldr	r2, [pc, #420]	; (8002904 <HAL_I2C_Init+0x284>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	099b      	lsrs	r3, r3, #6
 8002766:	3301      	adds	r3, #1
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	430b      	orrs	r3, r1
 800276e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800277a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	495c      	ldr	r1, [pc, #368]	; (80028f4 <HAL_I2C_Init+0x274>)
 8002784:	428b      	cmp	r3, r1
 8002786:	d819      	bhi.n	80027bc <HAL_I2C_Init+0x13c>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1e59      	subs	r1, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fbb1 f3f3 	udiv	r3, r1, r3
 8002796:	1c59      	adds	r1, r3, #1
 8002798:	f640 73fc 	movw	r3, #4092	; 0xffc
 800279c:	400b      	ands	r3, r1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_I2C_Init+0x138>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1e59      	subs	r1, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80027b0:	3301      	adds	r3, #1
 80027b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b6:	e051      	b.n	800285c <HAL_I2C_Init+0x1dc>
 80027b8:	2304      	movs	r3, #4
 80027ba:	e04f      	b.n	800285c <HAL_I2C_Init+0x1dc>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d111      	bne.n	80027e8 <HAL_I2C_Init+0x168>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1e58      	subs	r0, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	440b      	add	r3, r1
 80027d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d6:	3301      	adds	r3, #1
 80027d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf0c      	ite	eq
 80027e0:	2301      	moveq	r3, #1
 80027e2:	2300      	movne	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e012      	b.n	800280e <HAL_I2C_Init+0x18e>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1e58      	subs	r0, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	0099      	lsls	r1, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fe:	3301      	adds	r3, #1
 8002800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf0c      	ite	eq
 8002808:	2301      	moveq	r3, #1
 800280a:	2300      	movne	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_I2C_Init+0x196>
 8002812:	2301      	movs	r3, #1
 8002814:	e022      	b.n	800285c <HAL_I2C_Init+0x1dc>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10e      	bne.n	800283c <HAL_I2C_Init+0x1bc>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1e58      	subs	r0, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6859      	ldr	r1, [r3, #4]
 8002826:	460b      	mov	r3, r1
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	440b      	add	r3, r1
 800282c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002830:	3301      	adds	r3, #1
 8002832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800283a:	e00f      	b.n	800285c <HAL_I2C_Init+0x1dc>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1e58      	subs	r0, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	0099      	lsls	r1, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002852:	3301      	adds	r3, #1
 8002854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002858:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	6809      	ldr	r1, [r1, #0]
 8002860:	4313      	orrs	r3, r2
 8002862:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800288a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6911      	ldr	r1, [r2, #16]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68d2      	ldr	r2, [r2, #12]
 8002896:	4311      	orrs	r1, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	430b      	orrs	r3, r1
 800289e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	000186a0 	.word	0x000186a0
 80028f8:	001e847f 	.word	0x001e847f
 80028fc:	003d08ff 	.word	0x003d08ff
 8002900:	431bde83 	.word	0x431bde83
 8002904:	10624dd3 	.word	0x10624dd3

08002908 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af02      	add	r7, sp, #8
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	4608      	mov	r0, r1
 8002912:	4611      	mov	r1, r2
 8002914:	461a      	mov	r2, r3
 8002916:	4603      	mov	r3, r0
 8002918:	817b      	strh	r3, [r7, #10]
 800291a:	460b      	mov	r3, r1
 800291c:	813b      	strh	r3, [r7, #8]
 800291e:	4613      	mov	r3, r2
 8002920:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002922:	f7ff fb09 	bl	8001f38 <HAL_GetTick>
 8002926:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b20      	cmp	r3, #32
 8002932:	f040 80d9 	bne.w	8002ae8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2319      	movs	r3, #25
 800293c:	2201      	movs	r2, #1
 800293e:	496d      	ldr	r1, [pc, #436]	; (8002af4 <HAL_I2C_Mem_Write+0x1ec>)
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fdad 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800294c:	2302      	movs	r3, #2
 800294e:	e0cc      	b.n	8002aea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_I2C_Mem_Write+0x56>
 800295a:	2302      	movs	r3, #2
 800295c:	e0c5      	b.n	8002aea <HAL_I2C_Mem_Write+0x1e2>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d007      	beq.n	8002984 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002992:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2221      	movs	r2, #33	; 0x21
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2240      	movs	r2, #64	; 0x40
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a3a      	ldr	r2, [r7, #32]
 80029ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a4d      	ldr	r2, [pc, #308]	; (8002af8 <HAL_I2C_Mem_Write+0x1f0>)
 80029c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029c6:	88f8      	ldrh	r0, [r7, #6]
 80029c8:	893a      	ldrh	r2, [r7, #8]
 80029ca:	8979      	ldrh	r1, [r7, #10]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	4603      	mov	r3, r0
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fbe4 	bl	80031a4 <I2C_RequestMemoryWrite>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d052      	beq.n	8002a88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e081      	b.n	8002aea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fe2e 	bl	800364c <I2C_WaitOnTXEFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00d      	beq.n	8002a12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d107      	bne.n	8002a0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e06b      	b.n	8002aea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	781a      	ldrb	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d11b      	bne.n	8002a88 <HAL_I2C_Mem_Write+0x180>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d017      	beq.n	8002a88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	781a      	ldrb	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1aa      	bne.n	80029e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 fe1a 	bl	80036ce <I2C_WaitOnBTFFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00d      	beq.n	8002abc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d107      	bne.n	8002ab8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e016      	b.n	8002aea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e000      	b.n	8002aea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ae8:	2302      	movs	r3, #2
  }
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	00100002 	.word	0x00100002
 8002af8:	ffff0000 	.word	0xffff0000

08002afc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	; 0x30
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	817b      	strh	r3, [r7, #10]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	813b      	strh	r3, [r7, #8]
 8002b12:	4613      	mov	r3, r2
 8002b14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b16:	f7ff fa0f 	bl	8001f38 <HAL_GetTick>
 8002b1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	f040 8208 	bne.w	8002f3a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	2319      	movs	r3, #25
 8002b30:	2201      	movs	r2, #1
 8002b32:	497b      	ldr	r1, [pc, #492]	; (8002d20 <HAL_I2C_Mem_Read+0x224>)
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fcb3 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002b40:	2302      	movs	r3, #2
 8002b42:	e1fb      	b.n	8002f3c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_I2C_Mem_Read+0x56>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e1f4      	b.n	8002f3c <HAL_I2C_Mem_Read+0x440>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d007      	beq.n	8002b78 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2222      	movs	r2, #34	; 0x22
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2240      	movs	r2, #64	; 0x40
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4a5b      	ldr	r2, [pc, #364]	; (8002d24 <HAL_I2C_Mem_Read+0x228>)
 8002bb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bba:	88f8      	ldrh	r0, [r7, #6]
 8002bbc:	893a      	ldrh	r2, [r7, #8]
 8002bbe:	8979      	ldrh	r1, [r7, #10]
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	9301      	str	r3, [sp, #4]
 8002bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	4603      	mov	r3, r0
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 fb80 	bl	80032d0 <I2C_RequestMemoryRead>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e1b0      	b.n	8002f3c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d113      	bne.n	8002c0a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be2:	2300      	movs	r3, #0
 8002be4:	623b      	str	r3, [r7, #32]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	623b      	str	r3, [r7, #32]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	623b      	str	r3, [r7, #32]
 8002bf6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	e184      	b.n	8002f14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d11b      	bne.n	8002c4a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	e164      	b.n	8002f14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d11b      	bne.n	8002c8a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c72:	2300      	movs	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	e144      	b.n	8002f14 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ca0:	e138      	b.n	8002f14 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	f200 80f1 	bhi.w	8002e8e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d123      	bne.n	8002cfc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fd49 	bl	8003750 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e139      	b.n	8002f3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cfa:	e10b      	b.n	8002f14 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d14e      	bne.n	8002da2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	4906      	ldr	r1, [pc, #24]	; (8002d28 <HAL_I2C_Mem_Read+0x22c>)
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fbc6 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e10e      	b.n	8002f3c <HAL_I2C_Mem_Read+0x440>
 8002d1e:	bf00      	nop
 8002d20:	00100002 	.word	0x00100002
 8002d24:	ffff0000 	.word	0xffff0000
 8002d28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002da0:	e0b8      	b.n	8002f14 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da8:	2200      	movs	r2, #0
 8002daa:	4966      	ldr	r1, [pc, #408]	; (8002f44 <HAL_I2C_Mem_Read+0x448>)
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 fb77 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0bf      	b.n	8002f3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e04:	2200      	movs	r2, #0
 8002e06:	494f      	ldr	r1, [pc, #316]	; (8002f44 <HAL_I2C_Mem_Read+0x448>)
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 fb49 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e091      	b.n	8002f3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e8c:	e042      	b.n	8002f14 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fc5c 	bl	8003750 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e04c      	b.n	8002f3c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d118      	bne.n	8002f14 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f47f aec2 	bne.w	8002ca2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	e000      	b.n	8002f3c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002f3a:	2302      	movs	r3, #2
  }
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3728      	adds	r7, #40	; 0x28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	00010004 	.word	0x00010004

08002f48 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	; 0x28
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	460b      	mov	r3, r1
 8002f56:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f58:	f7fe ffee 	bl	8001f38 <HAL_GetTick>
 8002f5c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	f040 8111 	bne.w	8003192 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	2319      	movs	r3, #25
 8002f76:	2201      	movs	r2, #1
 8002f78:	4988      	ldr	r1, [pc, #544]	; (800319c <HAL_I2C_IsDeviceReady+0x254>)
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fa90 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
 8002f88:	e104      	b.n	8003194 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_I2C_IsDeviceReady+0x50>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e0fd      	b.n	8003194 <HAL_I2C_IsDeviceReady+0x24c>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d007      	beq.n	8002fbe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2224      	movs	r2, #36	; 0x24
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a70      	ldr	r2, [pc, #448]	; (80031a0 <HAL_I2C_IsDeviceReady+0x258>)
 8002fe0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ff0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fa4e 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00d      	beq.n	8003026 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003018:	d103      	bne.n	8003022 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e0b6      	b.n	8003194 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003026:	897b      	ldrh	r3, [r7, #10]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003034:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003036:	f7fe ff7f 	bl	8001f38 <HAL_GetTick>
 800303a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b02      	cmp	r3, #2
 8003048:	bf0c      	ite	eq
 800304a:	2301      	moveq	r3, #1
 800304c:	2300      	movne	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003060:	bf0c      	ite	eq
 8003062:	2301      	moveq	r3, #1
 8003064:	2300      	movne	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800306a:	e025      	b.n	80030b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800306c:	f7fe ff64 	bl	8001f38 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d302      	bcc.n	8003082 <HAL_I2C_IsDeviceReady+0x13a>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	22a0      	movs	r2, #160	; 0xa0
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b02      	cmp	r3, #2
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ae:	bf0c      	ite	eq
 80030b0:	2301      	moveq	r3, #1
 80030b2:	2300      	movne	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2ba0      	cmp	r3, #160	; 0xa0
 80030c2:	d005      	beq.n	80030d0 <HAL_I2C_IsDeviceReady+0x188>
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <HAL_I2C_IsDeviceReady+0x188>
 80030ca:	7dbb      	ldrb	r3, [r7, #22]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0cd      	beq.n	800306c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d129      	bne.n	800313a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	2319      	movs	r3, #25
 8003112:	2201      	movs	r2, #1
 8003114:	4921      	ldr	r1, [pc, #132]	; (800319c <HAL_I2C_IsDeviceReady+0x254>)
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f9c2 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e036      	b.n	8003194 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	e02c      	b.n	8003194 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003148:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003152:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2319      	movs	r3, #25
 800315a:	2201      	movs	r2, #1
 800315c:	490f      	ldr	r1, [pc, #60]	; (800319c <HAL_I2C_IsDeviceReady+0x254>)
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f99e 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e012      	b.n	8003194 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	3301      	adds	r3, #1
 8003172:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	429a      	cmp	r2, r3
 800317a:	f4ff af32 	bcc.w	8002fe2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
  }
}
 8003194:	4618      	mov	r0, r3
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	00100002 	.word	0x00100002
 80031a0:	ffff0000 	.word	0xffff0000

080031a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	4608      	mov	r0, r1
 80031ae:	4611      	mov	r1, r2
 80031b0:	461a      	mov	r2, r3
 80031b2:	4603      	mov	r3, r0
 80031b4:	817b      	strh	r3, [r7, #10]
 80031b6:	460b      	mov	r3, r1
 80031b8:	813b      	strh	r3, [r7, #8]
 80031ba:	4613      	mov	r3, r2
 80031bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f960 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00d      	beq.n	8003202 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f4:	d103      	bne.n	80031fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e05f      	b.n	80032c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003202:	897b      	ldrh	r3, [r7, #10]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003210:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	6a3a      	ldr	r2, [r7, #32]
 8003216:	492d      	ldr	r1, [pc, #180]	; (80032cc <I2C_RequestMemoryWrite+0x128>)
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f998 	bl	800354e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e04c      	b.n	80032c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800323e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003240:	6a39      	ldr	r1, [r7, #32]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fa02 	bl	800364c <I2C_WaitOnTXEFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2b04      	cmp	r3, #4
 8003254:	d107      	bne.n	8003266 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003264:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e02b      	b.n	80032c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d105      	bne.n	800327c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003270:	893b      	ldrh	r3, [r7, #8]
 8003272:	b2da      	uxtb	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	611a      	str	r2, [r3, #16]
 800327a:	e021      	b.n	80032c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800327c:	893b      	ldrh	r3, [r7, #8]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	b29b      	uxth	r3, r3
 8003282:	b2da      	uxtb	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800328a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328c:	6a39      	ldr	r1, [r7, #32]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f9dc 	bl	800364c <I2C_WaitOnTXEFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00d      	beq.n	80032b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d107      	bne.n	80032b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e005      	b.n	80032c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032b6:	893b      	ldrh	r3, [r7, #8]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	00010002 	.word	0x00010002

080032d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	4608      	mov	r0, r1
 80032da:	4611      	mov	r1, r2
 80032dc:	461a      	mov	r2, r3
 80032de:	4603      	mov	r3, r0
 80032e0:	817b      	strh	r3, [r7, #10]
 80032e2:	460b      	mov	r3, r1
 80032e4:	813b      	strh	r3, [r7, #8]
 80032e6:	4613      	mov	r3, r2
 80032e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003308:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	2200      	movs	r2, #0
 8003312:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f8c2 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00d      	beq.n	800333e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003330:	d103      	bne.n	800333a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e0aa      	b.n	8003494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800333e:	897b      	ldrh	r3, [r7, #10]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	461a      	mov	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800334c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	6a3a      	ldr	r2, [r7, #32]
 8003352:	4952      	ldr	r1, [pc, #328]	; (800349c <I2C_RequestMemoryRead+0x1cc>)
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f8fa 	bl	800354e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e097      	b.n	8003494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800337a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337c:	6a39      	ldr	r1, [r7, #32]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f964 	bl	800364c <I2C_WaitOnTXEFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00d      	beq.n	80033a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	2b04      	cmp	r3, #4
 8003390:	d107      	bne.n	80033a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e076      	b.n	8003494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d105      	bne.n	80033b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033ac:	893b      	ldrh	r3, [r7, #8]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	611a      	str	r2, [r3, #16]
 80033b6:	e021      	b.n	80033fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033b8:	893b      	ldrh	r3, [r7, #8]
 80033ba:	0a1b      	lsrs	r3, r3, #8
 80033bc:	b29b      	uxth	r3, r3
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c8:	6a39      	ldr	r1, [r7, #32]
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f93e 	bl	800364c <I2C_WaitOnTXEFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00d      	beq.n	80033f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d107      	bne.n	80033ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e050      	b.n	8003494 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033f2:	893b      	ldrh	r3, [r7, #8]
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fe:	6a39      	ldr	r1, [r7, #32]
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f923 	bl	800364c <I2C_WaitOnTXEFlagUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00d      	beq.n	8003428 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	2b04      	cmp	r3, #4
 8003412:	d107      	bne.n	8003424 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003422:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e035      	b.n	8003494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003436:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	2200      	movs	r2, #0
 8003440:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f82b 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00d      	beq.n	800346c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800345e:	d103      	bne.n	8003468 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003466:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e013      	b.n	8003494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800346c:	897b      	ldrh	r3, [r7, #10]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	b2da      	uxtb	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	6a3a      	ldr	r2, [r7, #32]
 8003480:	4906      	ldr	r1, [pc, #24]	; (800349c <I2C_RequestMemoryRead+0x1cc>)
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f863 	bl	800354e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	00010002 	.word	0x00010002

080034a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b0:	e025      	b.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d021      	beq.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ba:	f7fe fd3d 	bl	8001f38 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d116      	bne.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f043 0220 	orr.w	r2, r3, #32
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e023      	b.n	8003546 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10d      	bne.n	8003524 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4013      	ands	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf0c      	ite	eq
 800351a:	2301      	moveq	r3, #1
 800351c:	2300      	movne	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	e00c      	b.n	800353e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	43da      	mvns	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4013      	ands	r3, r2
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	bf0c      	ite	eq
 8003536:	2301      	moveq	r3, #1
 8003538:	2300      	movne	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	461a      	mov	r2, r3
 800353e:	79fb      	ldrb	r3, [r7, #7]
 8003540:	429a      	cmp	r2, r3
 8003542:	d0b6      	beq.n	80034b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800355c:	e051      	b.n	8003602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800356c:	d123      	bne.n	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800357c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003586:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f043 0204 	orr.w	r2, r3, #4
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e046      	b.n	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d021      	beq.n	8003602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035be:	f7fe fcbb 	bl	8001f38 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d302      	bcc.n	80035d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d116      	bne.n	8003602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f043 0220 	orr.w	r2, r3, #32
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e020      	b.n	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d10c      	bne.n	8003626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	43da      	mvns	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4013      	ands	r3, r2
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	bf14      	ite	ne
 800361e:	2301      	movne	r3, #1
 8003620:	2300      	moveq	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	e00b      	b.n	800363e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	43da      	mvns	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4013      	ands	r3, r2
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf14      	ite	ne
 8003638:	2301      	movne	r3, #1
 800363a:	2300      	moveq	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d18d      	bne.n	800355e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003658:	e02d      	b.n	80036b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f8ce 	bl	80037fc <I2C_IsAcknowledgeFailed>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e02d      	b.n	80036c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003670:	d021      	beq.n	80036b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003672:	f7fe fc61 	bl	8001f38 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	429a      	cmp	r2, r3
 8003680:	d302      	bcc.n	8003688 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d116      	bne.n	80036b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f043 0220 	orr.w	r2, r3, #32
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e007      	b.n	80036c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c0:	2b80      	cmp	r3, #128	; 0x80
 80036c2:	d1ca      	bne.n	800365a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036da:	e02d      	b.n	8003738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f88d 	bl	80037fc <I2C_IsAcknowledgeFailed>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e02d      	b.n	8003748 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f2:	d021      	beq.n	8003738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f4:	f7fe fc20 	bl	8001f38 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	429a      	cmp	r2, r3
 8003702:	d302      	bcc.n	800370a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d116      	bne.n	8003738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	f043 0220 	orr.w	r2, r3, #32
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e007      	b.n	8003748 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b04      	cmp	r3, #4
 8003744:	d1ca      	bne.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800375c:	e042      	b.n	80037e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b10      	cmp	r3, #16
 800376a:	d119      	bne.n	80037a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0210 	mvn.w	r2, #16
 8003774:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e029      	b.n	80037f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a0:	f7fe fbca 	bl	8001f38 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d302      	bcc.n	80037b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d116      	bne.n	80037e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	f043 0220 	orr.w	r2, r3, #32
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e007      	b.n	80037f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	d1b5      	bne.n	800375e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003812:	d11b      	bne.n	800384c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800381c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	f043 0204 	orr.w	r2, r3, #4
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e264      	b.n	8003d38 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d075      	beq.n	8003966 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800387a:	4ba3      	ldr	r3, [pc, #652]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b04      	cmp	r3, #4
 8003884:	d00c      	beq.n	80038a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003886:	4ba0      	ldr	r3, [pc, #640]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800388e:	2b08      	cmp	r3, #8
 8003890:	d112      	bne.n	80038b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003892:	4b9d      	ldr	r3, [pc, #628]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800389e:	d10b      	bne.n	80038b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a0:	4b99      	ldr	r3, [pc, #612]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d05b      	beq.n	8003964 <HAL_RCC_OscConfig+0x108>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d157      	bne.n	8003964 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e23f      	b.n	8003d38 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c0:	d106      	bne.n	80038d0 <HAL_RCC_OscConfig+0x74>
 80038c2:	4b91      	ldr	r3, [pc, #580]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a90      	ldr	r2, [pc, #576]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e01d      	b.n	800390c <HAL_RCC_OscConfig+0xb0>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x98>
 80038da:	4b8b      	ldr	r3, [pc, #556]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a8a      	ldr	r2, [pc, #552]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	4b88      	ldr	r3, [pc, #544]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a87      	ldr	r2, [pc, #540]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e00b      	b.n	800390c <HAL_RCC_OscConfig+0xb0>
 80038f4:	4b84      	ldr	r3, [pc, #528]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a83      	ldr	r2, [pc, #524]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4b81      	ldr	r3, [pc, #516]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a80      	ldr	r2, [pc, #512]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800390a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fe fb10 	bl	8001f38 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800391c:	f7fe fb0c 	bl	8001f38 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	; 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e204      	b.n	8003d38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392e:	4b76      	ldr	r3, [pc, #472]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0xc0>
 800393a:	e014      	b.n	8003966 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393c:	f7fe fafc 	bl	8001f38 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003944:	f7fe faf8 	bl	8001f38 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	; 0x64
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e1f0      	b.n	8003d38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003956:	4b6c      	ldr	r3, [pc, #432]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0xe8>
 8003962:	e000      	b.n	8003966 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d063      	beq.n	8003a3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003972:	4b65      	ldr	r3, [pc, #404]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800397e:	4b62      	ldr	r3, [pc, #392]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003986:	2b08      	cmp	r3, #8
 8003988:	d11c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800398a:	4b5f      	ldr	r3, [pc, #380]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d116      	bne.n	80039c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003996:	4b5c      	ldr	r3, [pc, #368]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <HAL_RCC_OscConfig+0x152>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d001      	beq.n	80039ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e1c4      	b.n	8003d38 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ae:	4b56      	ldr	r3, [pc, #344]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4952      	ldr	r1, [pc, #328]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c2:	e03a      	b.n	8003a3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d020      	beq.n	8003a0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039cc:	4b4f      	ldr	r3, [pc, #316]	; (8003b0c <HAL_RCC_OscConfig+0x2b0>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d2:	f7fe fab1 	bl	8001f38 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039da:	f7fe faad 	bl	8001f38 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e1a5      	b.n	8003d38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ec:	4b46      	ldr	r3, [pc, #280]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0f0      	beq.n	80039da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f8:	4b43      	ldr	r3, [pc, #268]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4940      	ldr	r1, [pc, #256]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	600b      	str	r3, [r1, #0]
 8003a0c:	e015      	b.n	8003a3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a0e:	4b3f      	ldr	r3, [pc, #252]	; (8003b0c <HAL_RCC_OscConfig+0x2b0>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7fe fa90 	bl	8001f38 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a1c:	f7fe fa8c 	bl	8001f38 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e184      	b.n	8003d38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2e:	4b36      	ldr	r3, [pc, #216]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d030      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d016      	beq.n	8003a7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a4e:	4b30      	ldr	r3, [pc, #192]	; (8003b10 <HAL_RCC_OscConfig+0x2b4>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a54:	f7fe fa70 	bl	8001f38 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a5c:	f7fe fa6c 	bl	8001f38 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e164      	b.n	8003d38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6e:	4b26      	ldr	r3, [pc, #152]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0x200>
 8003a7a:	e015      	b.n	8003aa8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a7c:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <HAL_RCC_OscConfig+0x2b4>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a82:	f7fe fa59 	bl	8001f38 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a8a:	f7fe fa55 	bl	8001f38 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e14d      	b.n	8003d38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a9c:	4b1a      	ldr	r3, [pc, #104]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f0      	bne.n	8003a8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 80a0 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aba:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10f      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	4a0e      	ldr	r2, [pc, #56]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad6:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <HAL_RCC_OscConfig+0x2ac>)
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ade:	60bb      	str	r3, [r7, #8]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_RCC_OscConfig+0x2b8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d121      	bne.n	8003b36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af2:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <HAL_RCC_OscConfig+0x2b8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a07      	ldr	r2, [pc, #28]	; (8003b14 <HAL_RCC_OscConfig+0x2b8>)
 8003af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003afe:	f7fe fa1b 	bl	8001f38 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b04:	e011      	b.n	8003b2a <HAL_RCC_OscConfig+0x2ce>
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	42470000 	.word	0x42470000
 8003b10:	42470e80 	.word	0x42470e80
 8003b14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b18:	f7fe fa0e 	bl	8001f38 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e106      	b.n	8003d38 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2a:	4b85      	ldr	r3, [pc, #532]	; (8003d40 <HAL_RCC_OscConfig+0x4e4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d106      	bne.n	8003b4c <HAL_RCC_OscConfig+0x2f0>
 8003b3e:	4b81      	ldr	r3, [pc, #516]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	4a80      	ldr	r2, [pc, #512]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4a:	e01c      	b.n	8003b86 <HAL_RCC_OscConfig+0x32a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	d10c      	bne.n	8003b6e <HAL_RCC_OscConfig+0x312>
 8003b54:	4b7b      	ldr	r3, [pc, #492]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b58:	4a7a      	ldr	r2, [pc, #488]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003b5a:	f043 0304 	orr.w	r3, r3, #4
 8003b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b60:	4b78      	ldr	r3, [pc, #480]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	4a77      	ldr	r2, [pc, #476]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b6c:	e00b      	b.n	8003b86 <HAL_RCC_OscConfig+0x32a>
 8003b6e:	4b75      	ldr	r3, [pc, #468]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	4a74      	ldr	r2, [pc, #464]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7a:	4b72      	ldr	r3, [pc, #456]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	4a71      	ldr	r2, [pc, #452]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003b80:	f023 0304 	bic.w	r3, r3, #4
 8003b84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d015      	beq.n	8003bba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8e:	f7fe f9d3 	bl	8001f38 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b94:	e00a      	b.n	8003bac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b96:	f7fe f9cf 	bl	8001f38 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e0c5      	b.n	8003d38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bac:	4b65      	ldr	r3, [pc, #404]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0ee      	beq.n	8003b96 <HAL_RCC_OscConfig+0x33a>
 8003bb8:	e014      	b.n	8003be4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bba:	f7fe f9bd 	bl	8001f38 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc0:	e00a      	b.n	8003bd8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc2:	f7fe f9b9 	bl	8001f38 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e0af      	b.n	8003d38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd8:	4b5a      	ldr	r3, [pc, #360]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1ee      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d105      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bea:	4b56      	ldr	r3, [pc, #344]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	4a55      	ldr	r2, [pc, #340]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 809b 	beq.w	8003d36 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c00:	4b50      	ldr	r3, [pc, #320]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d05c      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d141      	bne.n	8003c98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c14:	4b4c      	ldr	r3, [pc, #304]	; (8003d48 <HAL_RCC_OscConfig+0x4ec>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7fe f98d 	bl	8001f38 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c22:	f7fe f989 	bl	8001f38 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e081      	b.n	8003d38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c34:	4b43      	ldr	r3, [pc, #268]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f0      	bne.n	8003c22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69da      	ldr	r2, [r3, #28]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	019b      	lsls	r3, r3, #6
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c56:	085b      	lsrs	r3, r3, #1
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	041b      	lsls	r3, r3, #16
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	061b      	lsls	r3, r3, #24
 8003c64:	4937      	ldr	r1, [pc, #220]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c6a:	4b37      	ldr	r3, [pc, #220]	; (8003d48 <HAL_RCC_OscConfig+0x4ec>)
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fe f962 	bl	8001f38 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c78:	f7fe f95e 	bl	8001f38 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e056      	b.n	8003d38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8a:	4b2e      	ldr	r3, [pc, #184]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0x41c>
 8003c96:	e04e      	b.n	8003d36 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c98:	4b2b      	ldr	r3, [pc, #172]	; (8003d48 <HAL_RCC_OscConfig+0x4ec>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9e:	f7fe f94b 	bl	8001f38 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca6:	f7fe f947 	bl	8001f38 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e03f      	b.n	8003d38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb8:	4b22      	ldr	r3, [pc, #136]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f0      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x44a>
 8003cc4:	e037      	b.n	8003d36 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e032      	b.n	8003d38 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cd2:	4b1c      	ldr	r3, [pc, #112]	; (8003d44 <HAL_RCC_OscConfig+0x4e8>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d028      	beq.n	8003d32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d121      	bne.n	8003d32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d11a      	bne.n	8003d32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d02:	4013      	ands	r3, r2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d08:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d111      	bne.n	8003d32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d107      	bne.n	8003d32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d001      	beq.n	8003d36 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40007000 	.word	0x40007000
 8003d44:	40023800 	.word	0x40023800
 8003d48:	42470060 	.word	0x42470060

08003d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0cc      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d60:	4b68      	ldr	r3, [pc, #416]	; (8003f04 <HAL_RCC_ClockConfig+0x1b8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d90c      	bls.n	8003d88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6e:	4b65      	ldr	r3, [pc, #404]	; (8003f04 <HAL_RCC_ClockConfig+0x1b8>)
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d76:	4b63      	ldr	r3, [pc, #396]	; (8003f04 <HAL_RCC_ClockConfig+0x1b8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0b8      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d020      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da0:	4b59      	ldr	r3, [pc, #356]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4a58      	ldr	r2, [pc, #352]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003daa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db8:	4b53      	ldr	r3, [pc, #332]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	4a52      	ldr	r2, [pc, #328]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc4:	4b50      	ldr	r3, [pc, #320]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	494d      	ldr	r1, [pc, #308]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d044      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d107      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b47      	ldr	r3, [pc, #284]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d119      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e07f      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d003      	beq.n	8003e0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d107      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0a:	4b3f      	ldr	r3, [pc, #252]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e06f      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1a:	4b3b      	ldr	r3, [pc, #236]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e067      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e2a:	4b37      	ldr	r3, [pc, #220]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f023 0203 	bic.w	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	4934      	ldr	r1, [pc, #208]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e3c:	f7fe f87c 	bl	8001f38 <HAL_GetTick>
 8003e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e44:	f7fe f878 	bl	8001f38 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e04f      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5a:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 020c 	and.w	r2, r3, #12
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d1eb      	bne.n	8003e44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e6c:	4b25      	ldr	r3, [pc, #148]	; (8003f04 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d20c      	bcs.n	8003e94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7a:	4b22      	ldr	r3, [pc, #136]	; (8003f04 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	4b20      	ldr	r3, [pc, #128]	; (8003f04 <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e032      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4916      	ldr	r1, [pc, #88]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	490e      	ldr	r1, [pc, #56]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ed2:	f000 f821 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	490a      	ldr	r1, [pc, #40]	; (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003ee4:	5ccb      	ldrb	r3, [r1, r3]
 8003ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eea:	4a09      	ldr	r2, [pc, #36]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eee:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fd ffdc 	bl	8001eb0 <HAL_InitTick>

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40023c00 	.word	0x40023c00
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	0800d6a8 	.word	0x0800d6a8
 8003f10:	20000008 	.word	0x20000008
 8003f14:	2000000c 	.word	0x2000000c

08003f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	607b      	str	r3, [r7, #4]
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f30:	4b67      	ldr	r3, [pc, #412]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 030c 	and.w	r3, r3, #12
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d00d      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x40>
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	f200 80bd 	bhi.w	80040bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_RCC_GetSysClockFreq+0x34>
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d003      	beq.n	8003f52 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f4a:	e0b7      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f4c:	4b61      	ldr	r3, [pc, #388]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f4e:	60bb      	str	r3, [r7, #8]
       break;
 8003f50:	e0b7      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f52:	4b61      	ldr	r3, [pc, #388]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003f54:	60bb      	str	r3, [r7, #8]
      break;
 8003f56:	e0b4      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f58:	4b5d      	ldr	r3, [pc, #372]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f62:	4b5b      	ldr	r3, [pc, #364]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d04d      	beq.n	800400a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6e:	4b58      	ldr	r3, [pc, #352]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	099b      	lsrs	r3, r3, #6
 8003f74:	461a      	mov	r2, r3
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f7e:	f04f 0100 	mov.w	r1, #0
 8003f82:	ea02 0800 	and.w	r8, r2, r0
 8003f86:	ea03 0901 	and.w	r9, r3, r1
 8003f8a:	4640      	mov	r0, r8
 8003f8c:	4649      	mov	r1, r9
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	014b      	lsls	r3, r1, #5
 8003f98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f9c:	0142      	lsls	r2, r0, #5
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	ebb0 0008 	subs.w	r0, r0, r8
 8003fa6:	eb61 0109 	sbc.w	r1, r1, r9
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	018b      	lsls	r3, r1, #6
 8003fb4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003fb8:	0182      	lsls	r2, r0, #6
 8003fba:	1a12      	subs	r2, r2, r0
 8003fbc:	eb63 0301 	sbc.w	r3, r3, r1
 8003fc0:	f04f 0000 	mov.w	r0, #0
 8003fc4:	f04f 0100 	mov.w	r1, #0
 8003fc8:	00d9      	lsls	r1, r3, #3
 8003fca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fce:	00d0      	lsls	r0, r2, #3
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	eb12 0208 	adds.w	r2, r2, r8
 8003fd8:	eb43 0309 	adc.w	r3, r3, r9
 8003fdc:	f04f 0000 	mov.w	r0, #0
 8003fe0:	f04f 0100 	mov.w	r1, #0
 8003fe4:	0259      	lsls	r1, r3, #9
 8003fe6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003fea:	0250      	lsls	r0, r2, #9
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	f7fc f8ec 	bl	80001d8 <__aeabi_uldivmod>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4613      	mov	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	e04a      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800400a:	4b31      	ldr	r3, [pc, #196]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	099b      	lsrs	r3, r3, #6
 8004010:	461a      	mov	r2, r3
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	f240 10ff 	movw	r0, #511	; 0x1ff
 800401a:	f04f 0100 	mov.w	r1, #0
 800401e:	ea02 0400 	and.w	r4, r2, r0
 8004022:	ea03 0501 	and.w	r5, r3, r1
 8004026:	4620      	mov	r0, r4
 8004028:	4629      	mov	r1, r5
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	014b      	lsls	r3, r1, #5
 8004034:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004038:	0142      	lsls	r2, r0, #5
 800403a:	4610      	mov	r0, r2
 800403c:	4619      	mov	r1, r3
 800403e:	1b00      	subs	r0, r0, r4
 8004040:	eb61 0105 	sbc.w	r1, r1, r5
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	018b      	lsls	r3, r1, #6
 800404e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004052:	0182      	lsls	r2, r0, #6
 8004054:	1a12      	subs	r2, r2, r0
 8004056:	eb63 0301 	sbc.w	r3, r3, r1
 800405a:	f04f 0000 	mov.w	r0, #0
 800405e:	f04f 0100 	mov.w	r1, #0
 8004062:	00d9      	lsls	r1, r3, #3
 8004064:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004068:	00d0      	lsls	r0, r2, #3
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	1912      	adds	r2, r2, r4
 8004070:	eb45 0303 	adc.w	r3, r5, r3
 8004074:	f04f 0000 	mov.w	r0, #0
 8004078:	f04f 0100 	mov.w	r1, #0
 800407c:	0299      	lsls	r1, r3, #10
 800407e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004082:	0290      	lsls	r0, r2, #10
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4610      	mov	r0, r2
 800408a:	4619      	mov	r1, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	461a      	mov	r2, r3
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	f7fc f8a0 	bl	80001d8 <__aeabi_uldivmod>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4613      	mov	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	3301      	adds	r3, #1
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	60bb      	str	r3, [r7, #8]
      break;
 80040ba:	e002      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80040be:	60bb      	str	r3, [r7, #8]
      break;
 80040c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040c2:	68bb      	ldr	r3, [r7, #8]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040ce:	bf00      	nop
 80040d0:	40023800 	.word	0x40023800
 80040d4:	00f42400 	.word	0x00f42400
 80040d8:	007a1200 	.word	0x007a1200

080040dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e0:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040e2:	681b      	ldr	r3, [r3, #0]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000008 	.word	0x20000008

080040f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040f8:	f7ff fff0 	bl	80040dc <HAL_RCC_GetHCLKFreq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b05      	ldr	r3, [pc, #20]	; (8004114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	0a9b      	lsrs	r3, r3, #10
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	4903      	ldr	r1, [pc, #12]	; (8004118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800410a:	5ccb      	ldrb	r3, [r1, r3]
 800410c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004110:	4618      	mov	r0, r3
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40023800 	.word	0x40023800
 8004118:	0800d6b8 	.word	0x0800d6b8

0800411c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004120:	f7ff ffdc 	bl	80040dc <HAL_RCC_GetHCLKFreq>
 8004124:	4602      	mov	r2, r0
 8004126:	4b05      	ldr	r3, [pc, #20]	; (800413c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	0b5b      	lsrs	r3, r3, #13
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	4903      	ldr	r1, [pc, #12]	; (8004140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004132:	5ccb      	ldrb	r3, [r1, r3]
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004138:	4618      	mov	r0, r3
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40023800 	.word	0x40023800
 8004140:	0800d6b8 	.word	0x0800d6b8

08004144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e07b      	b.n	800424e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	2b00      	cmp	r3, #0
 800415c:	d108      	bne.n	8004170 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004166:	d009      	beq.n	800417c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	61da      	str	r2, [r3, #28]
 800416e:	e005      	b.n	800417c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fd fc08 	bl	80019ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004200:	ea42 0103 	orr.w	r1, r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004208:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	0c1b      	lsrs	r3, r3, #16
 800421a:	f003 0104 	and.w	r1, r3, #4
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	f003 0210 	and.w	r2, r3, #16
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800423c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b088      	sub	sp, #32
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	603b      	str	r3, [r7, #0]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_SPI_Transmit+0x22>
 8004274:	2302      	movs	r3, #2
 8004276:	e126      	b.n	80044c6 <HAL_SPI_Transmit+0x270>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004280:	f7fd fe5a 	bl	8001f38 <HAL_GetTick>
 8004284:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004286:	88fb      	ldrh	r3, [r7, #6]
 8004288:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b01      	cmp	r3, #1
 8004294:	d002      	beq.n	800429c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004296:	2302      	movs	r3, #2
 8004298:	77fb      	strb	r3, [r7, #31]
    goto error;
 800429a:	e10b      	b.n	80044b4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_SPI_Transmit+0x52>
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d102      	bne.n	80042ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042ac:	e102      	b.n	80044b4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2203      	movs	r2, #3
 80042b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	88fa      	ldrh	r2, [r7, #6]
 80042c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f4:	d10f      	bne.n	8004316 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004304:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004314:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004320:	2b40      	cmp	r3, #64	; 0x40
 8004322:	d007      	beq.n	8004334 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004332:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800433c:	d14b      	bne.n	80043d6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_SPI_Transmit+0xf6>
 8004346:	8afb      	ldrh	r3, [r7, #22]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d13e      	bne.n	80043ca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004350:	881a      	ldrh	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435c:	1c9a      	adds	r2, r3, #2
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004370:	e02b      	b.n	80043ca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b02      	cmp	r3, #2
 800437e:	d112      	bne.n	80043a6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	881a      	ldrh	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	1c9a      	adds	r2, r3, #2
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80043a4:	e011      	b.n	80043ca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043a6:	f7fd fdc7 	bl	8001f38 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d803      	bhi.n	80043be <HAL_SPI_Transmit+0x168>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043bc:	d102      	bne.n	80043c4 <HAL_SPI_Transmit+0x16e>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d102      	bne.n	80043ca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043c8:	e074      	b.n	80044b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1ce      	bne.n	8004372 <HAL_SPI_Transmit+0x11c>
 80043d4:	e04c      	b.n	8004470 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_SPI_Transmit+0x18e>
 80043de:	8afb      	ldrh	r3, [r7, #22]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d140      	bne.n	8004466 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	330c      	adds	r3, #12
 80043ee:	7812      	ldrb	r2, [r2, #0]
 80043f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004400:	b29b      	uxth	r3, r3
 8004402:	3b01      	subs	r3, #1
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800440a:	e02c      	b.n	8004466 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b02      	cmp	r3, #2
 8004418:	d113      	bne.n	8004442 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	330c      	adds	r3, #12
 8004424:	7812      	ldrb	r2, [r2, #0]
 8004426:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004440:	e011      	b.n	8004466 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004442:	f7fd fd79 	bl	8001f38 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d803      	bhi.n	800445a <HAL_SPI_Transmit+0x204>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d102      	bne.n	8004460 <HAL_SPI_Transmit+0x20a>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d102      	bne.n	8004466 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004464:	e026      	b.n	80044b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1cd      	bne.n	800440c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	6839      	ldr	r1, [r7, #0]
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 fbcb 	bl	8004c10 <SPI_EndRxTxTransaction>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10a      	bne.n	80044a4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800448e:	2300      	movs	r3, #0
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	613b      	str	r3, [r7, #16]
 80044a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	77fb      	strb	r3, [r7, #31]
 80044b0:	e000      	b.n	80044b4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80044b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b088      	sub	sp, #32
 80044d2:	af02      	add	r7, sp, #8
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ea:	d112      	bne.n	8004512 <HAL_SPI_Receive+0x44>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10e      	bne.n	8004512 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2204      	movs	r2, #4
 80044f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80044fc:	88fa      	ldrh	r2, [r7, #6]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	4613      	mov	r3, r2
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	68b9      	ldr	r1, [r7, #8]
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 f8f1 	bl	80046f0 <HAL_SPI_TransmitReceive>
 800450e:	4603      	mov	r3, r0
 8004510:	e0ea      	b.n	80046e8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_SPI_Receive+0x52>
 800451c:	2302      	movs	r3, #2
 800451e:	e0e3      	b.n	80046e8 <HAL_SPI_Receive+0x21a>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004528:	f7fd fd06 	bl	8001f38 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b01      	cmp	r3, #1
 8004538:	d002      	beq.n	8004540 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800453a:	2302      	movs	r3, #2
 800453c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800453e:	e0ca      	b.n	80046d6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <HAL_SPI_Receive+0x7e>
 8004546:	88fb      	ldrh	r3, [r7, #6]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d102      	bne.n	8004552 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004550:	e0c1      	b.n	80046d6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2204      	movs	r2, #4
 8004556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	88fa      	ldrh	r2, [r7, #6]
 800456a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	88fa      	ldrh	r2, [r7, #6]
 8004570:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004598:	d10f      	bne.n	80045ba <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c4:	2b40      	cmp	r3, #64	; 0x40
 80045c6:	d007      	beq.n	80045d8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d162      	bne.n	80046a6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80045e0:	e02e      	b.n	8004640 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d115      	bne.n	800461c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f103 020c 	add.w	r2, r3, #12
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	7812      	ldrb	r2, [r2, #0]
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	87da      	strh	r2, [r3, #62]	; 0x3e
 800461a:	e011      	b.n	8004640 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800461c:	f7fd fc8c 	bl	8001f38 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d803      	bhi.n	8004634 <HAL_SPI_Receive+0x166>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004632:	d102      	bne.n	800463a <HAL_SPI_Receive+0x16c>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d102      	bne.n	8004640 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800463e:	e04a      	b.n	80046d6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1cb      	bne.n	80045e2 <HAL_SPI_Receive+0x114>
 800464a:	e031      	b.n	80046b0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b01      	cmp	r3, #1
 8004658:	d113      	bne.n	8004682 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	b292      	uxth	r2, r2
 8004666:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	1c9a      	adds	r2, r3, #2
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004680:	e011      	b.n	80046a6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004682:	f7fd fc59 	bl	8001f38 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d803      	bhi.n	800469a <HAL_SPI_Receive+0x1cc>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d102      	bne.n	80046a0 <HAL_SPI_Receive+0x1d2>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046a4:	e017      	b.n	80046d6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1cd      	bne.n	800464c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	6839      	ldr	r1, [r7, #0]
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 fa45 	bl	8004b44 <SPI_EndRxTransaction>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	75fb      	strb	r3, [r7, #23]
 80046d2:	e000      	b.n	80046d6 <HAL_SPI_Receive+0x208>
  }

error :
 80046d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08c      	sub	sp, #48	; 0x30
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046fe:	2301      	movs	r3, #1
 8004700:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_SPI_TransmitReceive+0x26>
 8004712:	2302      	movs	r3, #2
 8004714:	e18a      	b.n	8004a2c <HAL_SPI_TransmitReceive+0x33c>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800471e:	f7fd fc0b 	bl	8001f38 <HAL_GetTick>
 8004722:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004734:	887b      	ldrh	r3, [r7, #2]
 8004736:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004738:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800473c:	2b01      	cmp	r3, #1
 800473e:	d00f      	beq.n	8004760 <HAL_SPI_TransmitReceive+0x70>
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004746:	d107      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x68>
 8004750:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004754:	2b04      	cmp	r3, #4
 8004756:	d003      	beq.n	8004760 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004758:	2302      	movs	r3, #2
 800475a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800475e:	e15b      	b.n	8004a18 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <HAL_SPI_TransmitReceive+0x82>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_SPI_TransmitReceive+0x82>
 800476c:	887b      	ldrh	r3, [r7, #2]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d103      	bne.n	800477a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004778:	e14e      	b.n	8004a18 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b04      	cmp	r3, #4
 8004784:	d003      	beq.n	800478e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2205      	movs	r2, #5
 800478a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	887a      	ldrh	r2, [r7, #2]
 800479e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	887a      	ldrh	r2, [r7, #2]
 80047a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	887a      	ldrh	r2, [r7, #2]
 80047b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	887a      	ldrh	r2, [r7, #2]
 80047b6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ce:	2b40      	cmp	r3, #64	; 0x40
 80047d0:	d007      	beq.n	80047e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ea:	d178      	bne.n	80048de <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_SPI_TransmitReceive+0x10a>
 80047f4:	8b7b      	ldrh	r3, [r7, #26]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d166      	bne.n	80048c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	881a      	ldrh	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	1c9a      	adds	r2, r3, #2
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800481e:	e053      	b.n	80048c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b02      	cmp	r3, #2
 800482c:	d11b      	bne.n	8004866 <HAL_SPI_TransmitReceive+0x176>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d016      	beq.n	8004866 <HAL_SPI_TransmitReceive+0x176>
 8004838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483a:	2b01      	cmp	r3, #1
 800483c:	d113      	bne.n	8004866 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	881a      	ldrh	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	1c9a      	adds	r2, r3, #2
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b01      	cmp	r3, #1
 8004872:	d119      	bne.n	80048a8 <HAL_SPI_TransmitReceive+0x1b8>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d014      	beq.n	80048a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004888:	b292      	uxth	r2, r2
 800488a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	1c9a      	adds	r2, r3, #2
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048a4:	2301      	movs	r3, #1
 80048a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048a8:	f7fd fb46 	bl	8001f38 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d807      	bhi.n	80048c8 <HAL_SPI_TransmitReceive+0x1d8>
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048be:	d003      	beq.n	80048c8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048c6:	e0a7      	b.n	8004a18 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1a6      	bne.n	8004820 <HAL_SPI_TransmitReceive+0x130>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1a1      	bne.n	8004820 <HAL_SPI_TransmitReceive+0x130>
 80048dc:	e07c      	b.n	80049d8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_SPI_TransmitReceive+0x1fc>
 80048e6:	8b7b      	ldrh	r3, [r7, #26]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d16b      	bne.n	80049c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	330c      	adds	r3, #12
 80048f6:	7812      	ldrb	r2, [r2, #0]
 80048f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004908:	b29b      	uxth	r3, r3
 800490a:	3b01      	subs	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004912:	e057      	b.n	80049c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b02      	cmp	r3, #2
 8004920:	d11c      	bne.n	800495c <HAL_SPI_TransmitReceive+0x26c>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d017      	beq.n	800495c <HAL_SPI_TransmitReceive+0x26c>
 800492c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492e:	2b01      	cmp	r3, #1
 8004930:	d114      	bne.n	800495c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	330c      	adds	r3, #12
 800493c:	7812      	ldrb	r2, [r2, #0]
 800493e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b01      	cmp	r3, #1
 8004968:	d119      	bne.n	800499e <HAL_SPI_TransmitReceive+0x2ae>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d014      	beq.n	800499e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800499a:	2301      	movs	r3, #1
 800499c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800499e:	f7fd facb 	bl	8001f38 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d803      	bhi.n	80049b6 <HAL_SPI_TransmitReceive+0x2c6>
 80049ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b4:	d102      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x2cc>
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d103      	bne.n	80049c4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80049c2:	e029      	b.n	8004a18 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1a2      	bne.n	8004914 <HAL_SPI_TransmitReceive+0x224>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d19d      	bne.n	8004914 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f917 	bl	8004c10 <SPI_EndRxTxTransaction>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d006      	beq.n	80049f6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80049f4:	e010      	b.n	8004a18 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10b      	bne.n	8004a16 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	e000      	b.n	8004a18 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004a16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3730      	adds	r7, #48	; 0x30
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a44:	f7fd fa78 	bl	8001f38 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	4413      	add	r3, r2
 8004a52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a54:	f7fd fa70 	bl	8001f38 <HAL_GetTick>
 8004a58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a5a:	4b39      	ldr	r3, [pc, #228]	; (8004b40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	015b      	lsls	r3, r3, #5
 8004a60:	0d1b      	lsrs	r3, r3, #20
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	fb02 f303 	mul.w	r3, r2, r3
 8004a68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a6a:	e054      	b.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a72:	d050      	beq.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a74:	f7fd fa60 	bl	8001f38 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d902      	bls.n	8004a8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d13d      	bne.n	8004b06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aa2:	d111      	bne.n	8004ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aac:	d004      	beq.n	8004ab8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab6:	d107      	bne.n	8004ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad0:	d10f      	bne.n	8004af2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004af0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e017      	b.n	8004b36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	bf0c      	ite	eq
 8004b26:	2301      	moveq	r3, #1
 8004b28:	2300      	movne	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d19b      	bne.n	8004a6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000008 	.word	0x20000008

08004b44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b58:	d111      	bne.n	8004b7e <SPI_EndRxTransaction+0x3a>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b62:	d004      	beq.n	8004b6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6c:	d107      	bne.n	8004b7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b86:	d12a      	bne.n	8004bde <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b90:	d012      	beq.n	8004bb8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2180      	movs	r1, #128	; 0x80
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f7ff ff49 	bl	8004a34 <SPI_WaitFlagStateUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d02d      	beq.n	8004c04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bac:	f043 0220 	orr.w	r2, r3, #32
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e026      	b.n	8004c06 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f7ff ff36 	bl	8004a34 <SPI_WaitFlagStateUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01a      	beq.n	8004c04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	f043 0220 	orr.w	r2, r3, #32
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e013      	b.n	8004c06 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2200      	movs	r2, #0
 8004be6:	2101      	movs	r1, #1
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f7ff ff23 	bl	8004a34 <SPI_WaitFlagStateUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d007      	beq.n	8004c04 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf8:	f043 0220 	orr.w	r2, r3, #32
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e000      	b.n	8004c06 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	; (8004c8c <SPI_EndRxTxTransaction+0x7c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1b      	ldr	r2, [pc, #108]	; (8004c90 <SPI_EndRxTxTransaction+0x80>)
 8004c22:	fba2 2303 	umull	r2, r3, r2, r3
 8004c26:	0d5b      	lsrs	r3, r3, #21
 8004c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c2c:	fb02 f303 	mul.w	r3, r2, r3
 8004c30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c3a:	d112      	bne.n	8004c62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2200      	movs	r2, #0
 8004c44:	2180      	movs	r1, #128	; 0x80
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff fef4 	bl	8004a34 <SPI_WaitFlagStateUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d016      	beq.n	8004c80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c56:	f043 0220 	orr.w	r2, r3, #32
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e00f      	b.n	8004c82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c78:	2b80      	cmp	r3, #128	; 0x80
 8004c7a:	d0f2      	beq.n	8004c62 <SPI_EndRxTxTransaction+0x52>
 8004c7c:	e000      	b.n	8004c80 <SPI_EndRxTxTransaction+0x70>
        break;
 8004c7e:	bf00      	nop
  }

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000008 	.word	0x20000008
 8004c90:	165e9f81 	.word	0x165e9f81

08004c94 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e034      	b.n	8004d14 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f7fc ff7e 	bl	8001bc0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3308      	adds	r3, #8
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f001 fc6e 	bl	80065b0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	68b9      	ldr	r1, [r7, #8]
 8004ce0:	f001 fcb8 	bl	8006654 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6858      	ldr	r0, [r3, #4]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	f001 fced 	bl	80066d0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	6892      	ldr	r2, [r2, #8]
 8004cfe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	6892      	ldr	r2, [r2, #8]
 8004d0a:	f041 0101 	orr.w	r1, r1, #1
 8004d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e041      	b.n	8004db2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fc fe7a 	bl	8001a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f000 fa96 	bl	800528c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d001      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e04e      	b.n	8004e72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0201 	orr.w	r2, r2, #1
 8004dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a23      	ldr	r2, [pc, #140]	; (8004e80 <HAL_TIM_Base_Start_IT+0xc4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d022      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfe:	d01d      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d018      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1e      	ldr	r2, [pc, #120]	; (8004e88 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d013      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a1c      	ldr	r2, [pc, #112]	; (8004e8c <HAL_TIM_Base_Start_IT+0xd0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00e      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d009      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x80>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d111      	bne.n	8004e60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b06      	cmp	r3, #6
 8004e4c:	d010      	beq.n	8004e70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0201 	orr.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5e:	e007      	b.n	8004e70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	40010400 	.word	0x40010400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40001800 	.word	0x40001800

08004e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d122      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d11b      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0202 	mvn.w	r2, #2
 8004ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f9b5 	bl	800524e <HAL_TIM_IC_CaptureCallback>
 8004ee4:	e005      	b.n	8004ef2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f9a7 	bl	800523a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f9b8 	bl	8005262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d122      	bne.n	8004f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d11b      	bne.n	8004f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0204 	mvn.w	r2, #4
 8004f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2202      	movs	r2, #2
 8004f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f98b 	bl	800524e <HAL_TIM_IC_CaptureCallback>
 8004f38:	e005      	b.n	8004f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f97d 	bl	800523a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f98e 	bl	8005262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d122      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d11b      	bne.n	8004fa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0208 	mvn.w	r2, #8
 8004f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2204      	movs	r2, #4
 8004f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f961 	bl	800524e <HAL_TIM_IC_CaptureCallback>
 8004f8c:	e005      	b.n	8004f9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f953 	bl	800523a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f964 	bl	8005262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 0310 	and.w	r3, r3, #16
 8004faa:	2b10      	cmp	r3, #16
 8004fac:	d122      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d11b      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0210 	mvn.w	r2, #16
 8004fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2208      	movs	r2, #8
 8004fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f937 	bl	800524e <HAL_TIM_IC_CaptureCallback>
 8004fe0:	e005      	b.n	8004fee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f929 	bl	800523a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f93a 	bl	8005262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d10e      	bne.n	8005020 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b01      	cmp	r3, #1
 800500e:	d107      	bne.n	8005020 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0201 	mvn.w	r2, #1
 8005018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7fc fbf6 	bl	800180c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502a:	2b80      	cmp	r3, #128	; 0x80
 800502c:	d10e      	bne.n	800504c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005038:	2b80      	cmp	r3, #128	; 0x80
 800503a:	d107      	bne.n	800504c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fae0 	bl	800560c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005056:	2b40      	cmp	r3, #64	; 0x40
 8005058:	d10e      	bne.n	8005078 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005064:	2b40      	cmp	r3, #64	; 0x40
 8005066:	d107      	bne.n	8005078 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f8ff 	bl	8005276 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b20      	cmp	r3, #32
 8005084:	d10e      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b20      	cmp	r3, #32
 8005092:	d107      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0220 	mvn.w	r2, #32
 800509c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 faaa 	bl	80055f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050a4:	bf00      	nop
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_TIM_ConfigClockSource+0x1c>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e0b4      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x186>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005100:	d03e      	beq.n	8005180 <HAL_TIM_ConfigClockSource+0xd4>
 8005102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005106:	f200 8087 	bhi.w	8005218 <HAL_TIM_ConfigClockSource+0x16c>
 800510a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510e:	f000 8086 	beq.w	800521e <HAL_TIM_ConfigClockSource+0x172>
 8005112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005116:	d87f      	bhi.n	8005218 <HAL_TIM_ConfigClockSource+0x16c>
 8005118:	2b70      	cmp	r3, #112	; 0x70
 800511a:	d01a      	beq.n	8005152 <HAL_TIM_ConfigClockSource+0xa6>
 800511c:	2b70      	cmp	r3, #112	; 0x70
 800511e:	d87b      	bhi.n	8005218 <HAL_TIM_ConfigClockSource+0x16c>
 8005120:	2b60      	cmp	r3, #96	; 0x60
 8005122:	d050      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005124:	2b60      	cmp	r3, #96	; 0x60
 8005126:	d877      	bhi.n	8005218 <HAL_TIM_ConfigClockSource+0x16c>
 8005128:	2b50      	cmp	r3, #80	; 0x50
 800512a:	d03c      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0xfa>
 800512c:	2b50      	cmp	r3, #80	; 0x50
 800512e:	d873      	bhi.n	8005218 <HAL_TIM_ConfigClockSource+0x16c>
 8005130:	2b40      	cmp	r3, #64	; 0x40
 8005132:	d058      	beq.n	80051e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005134:	2b40      	cmp	r3, #64	; 0x40
 8005136:	d86f      	bhi.n	8005218 <HAL_TIM_ConfigClockSource+0x16c>
 8005138:	2b30      	cmp	r3, #48	; 0x30
 800513a:	d064      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0x15a>
 800513c:	2b30      	cmp	r3, #48	; 0x30
 800513e:	d86b      	bhi.n	8005218 <HAL_TIM_ConfigClockSource+0x16c>
 8005140:	2b20      	cmp	r3, #32
 8005142:	d060      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0x15a>
 8005144:	2b20      	cmp	r3, #32
 8005146:	d867      	bhi.n	8005218 <HAL_TIM_ConfigClockSource+0x16c>
 8005148:	2b00      	cmp	r3, #0
 800514a:	d05c      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0x15a>
 800514c:	2b10      	cmp	r3, #16
 800514e:	d05a      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0x15a>
 8005150:	e062      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6818      	ldr	r0, [r3, #0]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	6899      	ldr	r1, [r3, #8]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f000 f9ad 	bl	80054c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005174:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	609a      	str	r2, [r3, #8]
      break;
 800517e:	e04f      	b.n	8005220 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	6899      	ldr	r1, [r3, #8]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f000 f996 	bl	80054c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051a2:	609a      	str	r2, [r3, #8]
      break;
 80051a4:	e03c      	b.n	8005220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	6859      	ldr	r1, [r3, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	461a      	mov	r2, r3
 80051b4:	f000 f90a 	bl	80053cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2150      	movs	r1, #80	; 0x50
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f963 	bl	800548a <TIM_ITRx_SetConfig>
      break;
 80051c4:	e02c      	b.n	8005220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6859      	ldr	r1, [r3, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f000 f929 	bl	800542a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2160      	movs	r1, #96	; 0x60
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 f953 	bl	800548a <TIM_ITRx_SetConfig>
      break;
 80051e4:	e01c      	b.n	8005220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6818      	ldr	r0, [r3, #0]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	6859      	ldr	r1, [r3, #4]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	461a      	mov	r2, r3
 80051f4:	f000 f8ea 	bl	80053cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2140      	movs	r1, #64	; 0x40
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 f943 	bl	800548a <TIM_ITRx_SetConfig>
      break;
 8005204:	e00c      	b.n	8005220 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4619      	mov	r1, r3
 8005210:	4610      	mov	r0, r2
 8005212:	f000 f93a 	bl	800548a <TIM_ITRx_SetConfig>
      break;
 8005216:	e003      	b.n	8005220 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	73fb      	strb	r3, [r7, #15]
      break;
 800521c:	e000      	b.n	8005220 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800521e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005230:	7bfb      	ldrb	r3, [r7, #15]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
	...

0800528c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a40      	ldr	r2, [pc, #256]	; (80053a0 <TIM_Base_SetConfig+0x114>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d013      	beq.n	80052cc <TIM_Base_SetConfig+0x40>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052aa:	d00f      	beq.n	80052cc <TIM_Base_SetConfig+0x40>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a3d      	ldr	r2, [pc, #244]	; (80053a4 <TIM_Base_SetConfig+0x118>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00b      	beq.n	80052cc <TIM_Base_SetConfig+0x40>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a3c      	ldr	r2, [pc, #240]	; (80053a8 <TIM_Base_SetConfig+0x11c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d007      	beq.n	80052cc <TIM_Base_SetConfig+0x40>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a3b      	ldr	r2, [pc, #236]	; (80053ac <TIM_Base_SetConfig+0x120>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d003      	beq.n	80052cc <TIM_Base_SetConfig+0x40>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a3a      	ldr	r2, [pc, #232]	; (80053b0 <TIM_Base_SetConfig+0x124>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d108      	bne.n	80052de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a2f      	ldr	r2, [pc, #188]	; (80053a0 <TIM_Base_SetConfig+0x114>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d02b      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ec:	d027      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a2c      	ldr	r2, [pc, #176]	; (80053a4 <TIM_Base_SetConfig+0x118>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d023      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a2b      	ldr	r2, [pc, #172]	; (80053a8 <TIM_Base_SetConfig+0x11c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d01f      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a2a      	ldr	r2, [pc, #168]	; (80053ac <TIM_Base_SetConfig+0x120>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d01b      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a29      	ldr	r2, [pc, #164]	; (80053b0 <TIM_Base_SetConfig+0x124>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d017      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a28      	ldr	r2, [pc, #160]	; (80053b4 <TIM_Base_SetConfig+0x128>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d013      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a27      	ldr	r2, [pc, #156]	; (80053b8 <TIM_Base_SetConfig+0x12c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00f      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a26      	ldr	r2, [pc, #152]	; (80053bc <TIM_Base_SetConfig+0x130>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00b      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a25      	ldr	r2, [pc, #148]	; (80053c0 <TIM_Base_SetConfig+0x134>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d007      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a24      	ldr	r2, [pc, #144]	; (80053c4 <TIM_Base_SetConfig+0x138>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d003      	beq.n	800533e <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a23      	ldr	r2, [pc, #140]	; (80053c8 <TIM_Base_SetConfig+0x13c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d108      	bne.n	8005350 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a0a      	ldr	r2, [pc, #40]	; (80053a0 <TIM_Base_SetConfig+0x114>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d003      	beq.n	8005384 <TIM_Base_SetConfig+0xf8>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a0c      	ldr	r2, [pc, #48]	; (80053b0 <TIM_Base_SetConfig+0x124>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d103      	bne.n	800538c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	615a      	str	r2, [r3, #20]
}
 8005392:	bf00      	nop
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40010000 	.word	0x40010000
 80053a4:	40000400 	.word	0x40000400
 80053a8:	40000800 	.word	0x40000800
 80053ac:	40000c00 	.word	0x40000c00
 80053b0:	40010400 	.word	0x40010400
 80053b4:	40014000 	.word	0x40014000
 80053b8:	40014400 	.word	0x40014400
 80053bc:	40014800 	.word	0x40014800
 80053c0:	40001800 	.word	0x40001800
 80053c4:	40001c00 	.word	0x40001c00
 80053c8:	40002000 	.word	0x40002000

080053cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f023 0201 	bic.w	r2, r3, #1
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f023 030a 	bic.w	r3, r3, #10
 8005408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800542a:	b480      	push	{r7}
 800542c:	b087      	sub	sp, #28
 800542e:	af00      	add	r7, sp, #0
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	f023 0210 	bic.w	r2, r3, #16
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	031b      	lsls	r3, r3, #12
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005466:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	621a      	str	r2, [r3, #32]
}
 800547e:	bf00      	nop
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800548a:	b480      	push	{r7}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f043 0307 	orr.w	r3, r3, #7
 80054ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	609a      	str	r2, [r3, #8]
}
 80054b4:	bf00      	nop
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	021a      	lsls	r2, r3, #8
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	609a      	str	r2, [r3, #8]
}
 80054f4:	bf00      	nop
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005514:	2302      	movs	r3, #2
 8005516:	e05a      	b.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a21      	ldr	r2, [pc, #132]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d022      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005564:	d01d      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1d      	ldr	r2, [pc, #116]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d018      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a1b      	ldr	r2, [pc, #108]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d013      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1a      	ldr	r2, [pc, #104]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00e      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a18      	ldr	r2, [pc, #96]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d009      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a17      	ldr	r2, [pc, #92]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d004      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a15      	ldr	r2, [pc, #84]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d10c      	bne.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40010000 	.word	0x40010000
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40000800 	.word	0x40000800
 80055e8:	40000c00 	.word	0x40000c00
 80055ec:	40010400 	.word	0x40010400
 80055f0:	40014000 	.word	0x40014000
 80055f4:	40001800 	.word	0x40001800

080055f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e03f      	b.n	80056b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fc fa1e 	bl	8001a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2224      	movs	r2, #36	; 0x24
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fddb 	bl	8006220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695a      	ldr	r2, [r3, #20]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b08a      	sub	sp, #40	; 0x28
 80056be:	af02      	add	r7, sp, #8
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	603b      	str	r3, [r7, #0]
 80056c6:	4613      	mov	r3, r2
 80056c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d17c      	bne.n	80057d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <HAL_UART_Transmit+0x2c>
 80056e0:	88fb      	ldrh	r3, [r7, #6]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e075      	b.n	80057d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_UART_Transmit+0x3e>
 80056f4:	2302      	movs	r3, #2
 80056f6:	e06e      	b.n	80057d6 <HAL_UART_Transmit+0x11c>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2221      	movs	r2, #33	; 0x21
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800570e:	f7fc fc13 	bl	8001f38 <HAL_GetTick>
 8005712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	88fa      	ldrh	r2, [r7, #6]
 8005718:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	88fa      	ldrh	r2, [r7, #6]
 800571e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005728:	d108      	bne.n	800573c <HAL_UART_Transmit+0x82>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d104      	bne.n	800573c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005732:	2300      	movs	r3, #0
 8005734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	e003      	b.n	8005744 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005740:	2300      	movs	r3, #0
 8005742:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800574c:	e02a      	b.n	80057a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2200      	movs	r2, #0
 8005756:	2180      	movs	r1, #128	; 0x80
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 fb1f 	bl	8005d9c <UART_WaitOnFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e036      	b.n	80057d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10b      	bne.n	8005786 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800577c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	3302      	adds	r3, #2
 8005782:	61bb      	str	r3, [r7, #24]
 8005784:	e007      	b.n	8005796 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	781a      	ldrb	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	3301      	adds	r3, #1
 8005794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800579a:	b29b      	uxth	r3, r3
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1cf      	bne.n	800574e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2200      	movs	r2, #0
 80057b6:	2140      	movs	r1, #64	; 0x40
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 faef 	bl	8005d9c <UART_WaitOnFlagUntilTimeout>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e006      	b.n	80057d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	e000      	b.n	80057d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057d4:	2302      	movs	r3, #2
  }
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	4613      	mov	r3, r2
 80057ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	d11d      	bne.n	8005834 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <HAL_UART_Receive_IT+0x26>
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e016      	b.n	8005836 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_UART_Receive_IT+0x38>
 8005812:	2302      	movs	r3, #2
 8005814:	e00f      	b.n	8005836 <HAL_UART_Receive_IT+0x58>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005824:	88fb      	ldrh	r3, [r7, #6]
 8005826:	461a      	mov	r2, r3
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fb24 	bl	8005e78 <UART_Start_Receive_IT>
 8005830:	4603      	mov	r3, r0
 8005832:	e000      	b.n	8005836 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005834:	2302      	movs	r3, #2
  }
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b0ba      	sub	sp, #232	; 0xe8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005866:	2300      	movs	r3, #0
 8005868:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800586c:	2300      	movs	r3, #0
 800586e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800587e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10f      	bne.n	80058a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b00      	cmp	r3, #0
 8005890:	d009      	beq.n	80058a6 <HAL_UART_IRQHandler+0x66>
 8005892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fc03 	bl	80060aa <UART_Receive_IT>
      return;
 80058a4:	e256      	b.n	8005d54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 80de 	beq.w	8005a6c <HAL_UART_IRQHandler+0x22c>
 80058b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d106      	bne.n	80058ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 80d1 	beq.w	8005a6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00b      	beq.n	80058ee <HAL_UART_IRQHandler+0xae>
 80058d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d005      	beq.n	80058ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	f043 0201 	orr.w	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f2:	f003 0304 	and.w	r3, r3, #4
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00b      	beq.n	8005912 <HAL_UART_IRQHandler+0xd2>
 80058fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d005      	beq.n	8005912 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f043 0202 	orr.w	r2, r3, #2
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00b      	beq.n	8005936 <HAL_UART_IRQHandler+0xf6>
 800591e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d005      	beq.n	8005936 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	f043 0204 	orr.w	r2, r3, #4
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	2b00      	cmp	r3, #0
 8005940:	d011      	beq.n	8005966 <HAL_UART_IRQHandler+0x126>
 8005942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	d105      	bne.n	800595a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800594e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f043 0208 	orr.w	r2, r3, #8
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 81ed 	beq.w	8005d4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d008      	beq.n	800598e <HAL_UART_IRQHandler+0x14e>
 800597c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fb8e 	bl	80060aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	bf0c      	ite	eq
 800599c:	2301      	moveq	r3, #1
 800599e:	2300      	movne	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d103      	bne.n	80059ba <HAL_UART_IRQHandler+0x17a>
 80059b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d04f      	beq.n	8005a5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fa96 	bl	8005eec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ca:	2b40      	cmp	r3, #64	; 0x40
 80059cc:	d141      	bne.n	8005a52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3314      	adds	r3, #20
 80059d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3314      	adds	r3, #20
 80059f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1d9      	bne.n	80059ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d013      	beq.n	8005a4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	4a7d      	ldr	r2, [pc, #500]	; (8005c1c <HAL_UART_IRQHandler+0x3dc>)
 8005a28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fc fc33 	bl	800229a <HAL_DMA_Abort_IT>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d016      	beq.n	8005a68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a44:	4610      	mov	r0, r2
 8005a46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a48:	e00e      	b.n	8005a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f990 	bl	8005d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a50:	e00a      	b.n	8005a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f98c 	bl	8005d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a58:	e006      	b.n	8005a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f988 	bl	8005d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a66:	e170      	b.n	8005d4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a68:	bf00      	nop
    return;
 8005a6a:	e16e      	b.n	8005d4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	f040 814a 	bne.w	8005d0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 8143 	beq.w	8005d0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a88:	f003 0310 	and.w	r3, r3, #16
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 813c 	beq.w	8005d0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a92:	2300      	movs	r3, #0
 8005a94:	60bb      	str	r3, [r7, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	60bb      	str	r3, [r7, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	60bb      	str	r3, [r7, #8]
 8005aa6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	f040 80b4 	bne.w	8005c20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ac4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 8140 	beq.w	8005d4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	f080 8139 	bcs.w	8005d4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ae2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aee:	f000 8088 	beq.w	8005c02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	330c      	adds	r3, #12
 8005af8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b00:	e853 3f00 	ldrex	r3, [r3]
 8005b04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	330c      	adds	r3, #12
 8005b1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1d9      	bne.n	8005af2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3314      	adds	r3, #20
 8005b44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b50:	f023 0301 	bic.w	r3, r3, #1
 8005b54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3314      	adds	r3, #20
 8005b5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b6e:	e841 2300 	strex	r3, r2, [r1]
 8005b72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1e1      	bne.n	8005b3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3314      	adds	r3, #20
 8005b80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b84:	e853 3f00 	ldrex	r3, [r3]
 8005b88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3314      	adds	r3, #20
 8005b9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ba0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ba4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e3      	bne.n	8005b7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	330c      	adds	r3, #12
 8005bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd2:	f023 0310 	bic.w	r3, r3, #16
 8005bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005be4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005be6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e3      	bne.n	8005bc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fc fadc 	bl	80021ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	4619      	mov	r1, r3
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f8b6 	bl	8005d84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c18:	e099      	b.n	8005d4e <HAL_UART_IRQHandler+0x50e>
 8005c1a:	bf00      	nop
 8005c1c:	08005fb3 	.word	0x08005fb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 808b 	beq.w	8005d52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 8086 	beq.w	8005d52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	330c      	adds	r3, #12
 8005c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c50:	e853 3f00 	ldrex	r3, [r3]
 8005c54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	330c      	adds	r3, #12
 8005c66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c6a:	647a      	str	r2, [r7, #68]	; 0x44
 8005c6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c72:	e841 2300 	strex	r3, r2, [r1]
 8005c76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1e3      	bne.n	8005c46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3314      	adds	r3, #20
 8005c84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	f023 0301 	bic.w	r3, r3, #1
 8005c94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3314      	adds	r3, #20
 8005c9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ca2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005caa:	e841 2300 	strex	r3, r2, [r1]
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e3      	bne.n	8005c7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	330c      	adds	r3, #12
 8005cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	e853 3f00 	ldrex	r3, [r3]
 8005cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0310 	bic.w	r3, r3, #16
 8005cda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	330c      	adds	r3, #12
 8005ce4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ce8:	61fa      	str	r2, [r7, #28]
 8005cea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	69b9      	ldr	r1, [r7, #24]
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e3      	bne.n	8005cc4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f83e 	bl	8005d84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d08:	e023      	b.n	8005d52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d009      	beq.n	8005d2a <HAL_UART_IRQHandler+0x4ea>
 8005d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f959 	bl	8005fda <UART_Transmit_IT>
    return;
 8005d28:	e014      	b.n	8005d54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00e      	beq.n	8005d54 <HAL_UART_IRQHandler+0x514>
 8005d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d008      	beq.n	8005d54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f999 	bl	800607a <UART_EndTransmit_IT>
    return;
 8005d48:	e004      	b.n	8005d54 <HAL_UART_IRQHandler+0x514>
    return;
 8005d4a:	bf00      	nop
 8005d4c:	e002      	b.n	8005d54 <HAL_UART_IRQHandler+0x514>
      return;
 8005d4e:	bf00      	nop
 8005d50:	e000      	b.n	8005d54 <HAL_UART_IRQHandler+0x514>
      return;
 8005d52:	bf00      	nop
  }
}
 8005d54:	37e8      	adds	r7, #232	; 0xe8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop

08005d5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b090      	sub	sp, #64	; 0x40
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	4613      	mov	r3, r2
 8005daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dac:	e050      	b.n	8005e50 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db4:	d04c      	beq.n	8005e50 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d007      	beq.n	8005dcc <UART_WaitOnFlagUntilTimeout+0x30>
 8005dbc:	f7fc f8bc 	bl	8001f38 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d241      	bcs.n	8005e50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	330c      	adds	r3, #12
 8005dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	330c      	adds	r3, #12
 8005dea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dec:	637a      	str	r2, [r7, #52]	; 0x34
 8005dee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005df2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e5      	bne.n	8005dcc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3314      	adds	r3, #20
 8005e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f023 0301 	bic.w	r3, r3, #1
 8005e16:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3314      	adds	r3, #20
 8005e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e20:	623a      	str	r2, [r7, #32]
 8005e22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	69f9      	ldr	r1, [r7, #28]
 8005e26:	6a3a      	ldr	r2, [r7, #32]
 8005e28:	e841 2300 	strex	r3, r2, [r1]
 8005e2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e5      	bne.n	8005e00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e00f      	b.n	8005e70 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	bf0c      	ite	eq
 8005e60:	2301      	moveq	r3, #1
 8005e62:	2300      	movne	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	461a      	mov	r2, r3
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d09f      	beq.n	8005dae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3740      	adds	r7, #64	; 0x40
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	4613      	mov	r3, r2
 8005e84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	88fa      	ldrh	r2, [r7, #6]
 8005e90:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	88fa      	ldrh	r2, [r7, #6]
 8005e96:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2222      	movs	r2, #34	; 0x22
 8005ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ebc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	695a      	ldr	r2, [r3, #20]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f042 0201 	orr.w	r2, r2, #1
 8005ecc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f042 0220 	orr.w	r2, r2, #32
 8005edc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b095      	sub	sp, #84	; 0x54
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	330c      	adds	r3, #12
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efe:	e853 3f00 	ldrex	r3, [r3]
 8005f02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	330c      	adds	r3, #12
 8005f12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f14:	643a      	str	r2, [r7, #64]	; 0x40
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f1c:	e841 2300 	strex	r3, r2, [r1]
 8005f20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1e5      	bne.n	8005ef4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3314      	adds	r3, #20
 8005f2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	e853 3f00 	ldrex	r3, [r3]
 8005f36:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f023 0301 	bic.w	r3, r3, #1
 8005f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3314      	adds	r3, #20
 8005f46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f50:	e841 2300 	strex	r3, r2, [r1]
 8005f54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1e5      	bne.n	8005f28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d119      	bne.n	8005f98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330c      	adds	r3, #12
 8005f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	e853 3f00 	ldrex	r3, [r3]
 8005f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f023 0310 	bic.w	r3, r3, #16
 8005f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	330c      	adds	r3, #12
 8005f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f84:	61ba      	str	r2, [r7, #24]
 8005f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f88:	6979      	ldr	r1, [r7, #20]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	e841 2300 	strex	r3, r2, [r1]
 8005f90:	613b      	str	r3, [r7, #16]
   return(result);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1e5      	bne.n	8005f64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005fa6:	bf00      	nop
 8005fa8:	3754      	adds	r7, #84	; 0x54
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7ff fecf 	bl	8005d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fd2:	bf00      	nop
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b085      	sub	sp, #20
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b21      	cmp	r3, #33	; 0x21
 8005fec:	d13e      	bne.n	800606c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff6:	d114      	bne.n	8006022 <UART_Transmit_IT+0x48>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d110      	bne.n	8006022 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006014:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	1c9a      	adds	r2, r3, #2
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	621a      	str	r2, [r3, #32]
 8006020:	e008      	b.n	8006034 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	1c59      	adds	r1, r3, #1
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6211      	str	r1, [r2, #32]
 800602c:	781a      	ldrb	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29b      	uxth	r3, r3
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	4619      	mov	r1, r3
 8006042:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10f      	bne.n	8006068 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006056:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006066:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	e000      	b.n	800606e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800606c:	2302      	movs	r3, #2
  }
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006090:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2220      	movs	r2, #32
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff fe5e 	bl	8005d5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b08c      	sub	sp, #48	; 0x30
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b22      	cmp	r3, #34	; 0x22
 80060bc:	f040 80ab 	bne.w	8006216 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c8:	d117      	bne.n	80060fa <UART_Receive_IT+0x50>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d113      	bne.n	80060fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f2:	1c9a      	adds	r2, r3, #2
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	629a      	str	r2, [r3, #40]	; 0x28
 80060f8:	e026      	b.n	8006148 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006100:	2300      	movs	r3, #0
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800610c:	d007      	beq.n	800611e <UART_Receive_IT+0x74>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <UART_Receive_IT+0x82>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	b2da      	uxtb	r2, r3
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	701a      	strb	r2, [r3, #0]
 800612a:	e008      	b.n	800613e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006138:	b2da      	uxtb	r2, r3
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b01      	subs	r3, #1
 8006150:	b29b      	uxth	r3, r3
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	4619      	mov	r1, r3
 8006156:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006158:	2b00      	cmp	r3, #0
 800615a:	d15a      	bne.n	8006212 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0220 	bic.w	r2, r2, #32
 800616a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800617a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695a      	ldr	r2, [r3, #20]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0201 	bic.w	r2, r2, #1
 800618a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006198:	2b01      	cmp	r3, #1
 800619a:	d135      	bne.n	8006208 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	330c      	adds	r3, #12
 80061a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	613b      	str	r3, [r7, #16]
   return(result);
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f023 0310 	bic.w	r3, r3, #16
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	330c      	adds	r3, #12
 80061c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c2:	623a      	str	r2, [r7, #32]
 80061c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	69f9      	ldr	r1, [r7, #28]
 80061c8:	6a3a      	ldr	r2, [r7, #32]
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e5      	bne.n	80061a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0310 	and.w	r3, r3, #16
 80061e0:	2b10      	cmp	r3, #16
 80061e2:	d10a      	bne.n	80061fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061e4:	2300      	movs	r3, #0
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061fe:	4619      	mov	r1, r3
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7ff fdbf 	bl	8005d84 <HAL_UARTEx_RxEventCallback>
 8006206:	e002      	b.n	800620e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7fb fd7f 	bl	8001d0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	e002      	b.n	8006218 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	e000      	b.n	8006218 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006216:	2302      	movs	r3, #2
  }
}
 8006218:	4618      	mov	r0, r3
 800621a:	3730      	adds	r7, #48	; 0x30
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	b09f      	sub	sp, #124	; 0x7c
 8006226:	af00      	add	r7, sp, #0
 8006228:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800622a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006236:	68d9      	ldr	r1, [r3, #12]
 8006238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	ea40 0301 	orr.w	r3, r0, r1
 8006240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	431a      	orrs	r2, r3
 800624c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	431a      	orrs	r2, r3
 8006252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	4313      	orrs	r3, r2
 8006258:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800625a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006264:	f021 010c 	bic.w	r1, r1, #12
 8006268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800626e:	430b      	orrs	r3, r1
 8006270:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800627c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627e:	6999      	ldr	r1, [r3, #24]
 8006280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	ea40 0301 	orr.w	r3, r0, r1
 8006288:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800628a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4bc5      	ldr	r3, [pc, #788]	; (80065a4 <UART_SetConfig+0x384>)
 8006290:	429a      	cmp	r2, r3
 8006292:	d004      	beq.n	800629e <UART_SetConfig+0x7e>
 8006294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	4bc3      	ldr	r3, [pc, #780]	; (80065a8 <UART_SetConfig+0x388>)
 800629a:	429a      	cmp	r2, r3
 800629c:	d103      	bne.n	80062a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800629e:	f7fd ff3d 	bl	800411c <HAL_RCC_GetPCLK2Freq>
 80062a2:	6778      	str	r0, [r7, #116]	; 0x74
 80062a4:	e002      	b.n	80062ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062a6:	f7fd ff25 	bl	80040f4 <HAL_RCC_GetPCLK1Freq>
 80062aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b4:	f040 80b6 	bne.w	8006424 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062ba:	461c      	mov	r4, r3
 80062bc:	f04f 0500 	mov.w	r5, #0
 80062c0:	4622      	mov	r2, r4
 80062c2:	462b      	mov	r3, r5
 80062c4:	1891      	adds	r1, r2, r2
 80062c6:	6439      	str	r1, [r7, #64]	; 0x40
 80062c8:	415b      	adcs	r3, r3
 80062ca:	647b      	str	r3, [r7, #68]	; 0x44
 80062cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062d0:	1912      	adds	r2, r2, r4
 80062d2:	eb45 0303 	adc.w	r3, r5, r3
 80062d6:	f04f 0000 	mov.w	r0, #0
 80062da:	f04f 0100 	mov.w	r1, #0
 80062de:	00d9      	lsls	r1, r3, #3
 80062e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062e4:	00d0      	lsls	r0, r2, #3
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	1911      	adds	r1, r2, r4
 80062ec:	6639      	str	r1, [r7, #96]	; 0x60
 80062ee:	416b      	adcs	r3, r5
 80062f0:	667b      	str	r3, [r7, #100]	; 0x64
 80062f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	461a      	mov	r2, r3
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	1891      	adds	r1, r2, r2
 80062fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006300:	415b      	adcs	r3, r3
 8006302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006308:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800630c:	f7f9 ff64 	bl	80001d8 <__aeabi_uldivmod>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4ba5      	ldr	r3, [pc, #660]	; (80065ac <UART_SetConfig+0x38c>)
 8006316:	fba3 2302 	umull	r2, r3, r3, r2
 800631a:	095b      	lsrs	r3, r3, #5
 800631c:	011e      	lsls	r6, r3, #4
 800631e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006320:	461c      	mov	r4, r3
 8006322:	f04f 0500 	mov.w	r5, #0
 8006326:	4622      	mov	r2, r4
 8006328:	462b      	mov	r3, r5
 800632a:	1891      	adds	r1, r2, r2
 800632c:	6339      	str	r1, [r7, #48]	; 0x30
 800632e:	415b      	adcs	r3, r3
 8006330:	637b      	str	r3, [r7, #52]	; 0x34
 8006332:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006336:	1912      	adds	r2, r2, r4
 8006338:	eb45 0303 	adc.w	r3, r5, r3
 800633c:	f04f 0000 	mov.w	r0, #0
 8006340:	f04f 0100 	mov.w	r1, #0
 8006344:	00d9      	lsls	r1, r3, #3
 8006346:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800634a:	00d0      	lsls	r0, r2, #3
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	1911      	adds	r1, r2, r4
 8006352:	65b9      	str	r1, [r7, #88]	; 0x58
 8006354:	416b      	adcs	r3, r5
 8006356:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	461a      	mov	r2, r3
 800635e:	f04f 0300 	mov.w	r3, #0
 8006362:	1891      	adds	r1, r2, r2
 8006364:	62b9      	str	r1, [r7, #40]	; 0x28
 8006366:	415b      	adcs	r3, r3
 8006368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800636a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800636e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006372:	f7f9 ff31 	bl	80001d8 <__aeabi_uldivmod>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4b8c      	ldr	r3, [pc, #560]	; (80065ac <UART_SetConfig+0x38c>)
 800637c:	fba3 1302 	umull	r1, r3, r3, r2
 8006380:	095b      	lsrs	r3, r3, #5
 8006382:	2164      	movs	r1, #100	; 0x64
 8006384:	fb01 f303 	mul.w	r3, r1, r3
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	3332      	adds	r3, #50	; 0x32
 800638e:	4a87      	ldr	r2, [pc, #540]	; (80065ac <UART_SetConfig+0x38c>)
 8006390:	fba2 2303 	umull	r2, r3, r2, r3
 8006394:	095b      	lsrs	r3, r3, #5
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800639c:	441e      	add	r6, r3
 800639e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063a0:	4618      	mov	r0, r3
 80063a2:	f04f 0100 	mov.w	r1, #0
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	1894      	adds	r4, r2, r2
 80063ac:	623c      	str	r4, [r7, #32]
 80063ae:	415b      	adcs	r3, r3
 80063b0:	627b      	str	r3, [r7, #36]	; 0x24
 80063b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063b6:	1812      	adds	r2, r2, r0
 80063b8:	eb41 0303 	adc.w	r3, r1, r3
 80063bc:	f04f 0400 	mov.w	r4, #0
 80063c0:	f04f 0500 	mov.w	r5, #0
 80063c4:	00dd      	lsls	r5, r3, #3
 80063c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063ca:	00d4      	lsls	r4, r2, #3
 80063cc:	4622      	mov	r2, r4
 80063ce:	462b      	mov	r3, r5
 80063d0:	1814      	adds	r4, r2, r0
 80063d2:	653c      	str	r4, [r7, #80]	; 0x50
 80063d4:	414b      	adcs	r3, r1
 80063d6:	657b      	str	r3, [r7, #84]	; 0x54
 80063d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	461a      	mov	r2, r3
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	1891      	adds	r1, r2, r2
 80063e4:	61b9      	str	r1, [r7, #24]
 80063e6:	415b      	adcs	r3, r3
 80063e8:	61fb      	str	r3, [r7, #28]
 80063ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80063f2:	f7f9 fef1 	bl	80001d8 <__aeabi_uldivmod>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4b6c      	ldr	r3, [pc, #432]	; (80065ac <UART_SetConfig+0x38c>)
 80063fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006400:	095b      	lsrs	r3, r3, #5
 8006402:	2164      	movs	r1, #100	; 0x64
 8006404:	fb01 f303 	mul.w	r3, r1, r3
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	3332      	adds	r3, #50	; 0x32
 800640e:	4a67      	ldr	r2, [pc, #412]	; (80065ac <UART_SetConfig+0x38c>)
 8006410:	fba2 2303 	umull	r2, r3, r2, r3
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	f003 0207 	and.w	r2, r3, #7
 800641a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4432      	add	r2, r6
 8006420:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006422:	e0b9      	b.n	8006598 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006426:	461c      	mov	r4, r3
 8006428:	f04f 0500 	mov.w	r5, #0
 800642c:	4622      	mov	r2, r4
 800642e:	462b      	mov	r3, r5
 8006430:	1891      	adds	r1, r2, r2
 8006432:	6139      	str	r1, [r7, #16]
 8006434:	415b      	adcs	r3, r3
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800643c:	1912      	adds	r2, r2, r4
 800643e:	eb45 0303 	adc.w	r3, r5, r3
 8006442:	f04f 0000 	mov.w	r0, #0
 8006446:	f04f 0100 	mov.w	r1, #0
 800644a:	00d9      	lsls	r1, r3, #3
 800644c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006450:	00d0      	lsls	r0, r2, #3
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	eb12 0804 	adds.w	r8, r2, r4
 800645a:	eb43 0905 	adc.w	r9, r3, r5
 800645e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	4618      	mov	r0, r3
 8006464:	f04f 0100 	mov.w	r1, #0
 8006468:	f04f 0200 	mov.w	r2, #0
 800646c:	f04f 0300 	mov.w	r3, #0
 8006470:	008b      	lsls	r3, r1, #2
 8006472:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006476:	0082      	lsls	r2, r0, #2
 8006478:	4640      	mov	r0, r8
 800647a:	4649      	mov	r1, r9
 800647c:	f7f9 feac 	bl	80001d8 <__aeabi_uldivmod>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4b49      	ldr	r3, [pc, #292]	; (80065ac <UART_SetConfig+0x38c>)
 8006486:	fba3 2302 	umull	r2, r3, r3, r2
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	011e      	lsls	r6, r3, #4
 800648e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006490:	4618      	mov	r0, r3
 8006492:	f04f 0100 	mov.w	r1, #0
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	1894      	adds	r4, r2, r2
 800649c:	60bc      	str	r4, [r7, #8]
 800649e:	415b      	adcs	r3, r3
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064a6:	1812      	adds	r2, r2, r0
 80064a8:	eb41 0303 	adc.w	r3, r1, r3
 80064ac:	f04f 0400 	mov.w	r4, #0
 80064b0:	f04f 0500 	mov.w	r5, #0
 80064b4:	00dd      	lsls	r5, r3, #3
 80064b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80064ba:	00d4      	lsls	r4, r2, #3
 80064bc:	4622      	mov	r2, r4
 80064be:	462b      	mov	r3, r5
 80064c0:	1814      	adds	r4, r2, r0
 80064c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80064c4:	414b      	adcs	r3, r1
 80064c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f04f 0100 	mov.w	r1, #0
 80064d2:	f04f 0200 	mov.w	r2, #0
 80064d6:	f04f 0300 	mov.w	r3, #0
 80064da:	008b      	lsls	r3, r1, #2
 80064dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064e0:	0082      	lsls	r2, r0, #2
 80064e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80064e6:	f7f9 fe77 	bl	80001d8 <__aeabi_uldivmod>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4b2f      	ldr	r3, [pc, #188]	; (80065ac <UART_SetConfig+0x38c>)
 80064f0:	fba3 1302 	umull	r1, r3, r3, r2
 80064f4:	095b      	lsrs	r3, r3, #5
 80064f6:	2164      	movs	r1, #100	; 0x64
 80064f8:	fb01 f303 	mul.w	r3, r1, r3
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	011b      	lsls	r3, r3, #4
 8006500:	3332      	adds	r3, #50	; 0x32
 8006502:	4a2a      	ldr	r2, [pc, #168]	; (80065ac <UART_SetConfig+0x38c>)
 8006504:	fba2 2303 	umull	r2, r3, r2, r3
 8006508:	095b      	lsrs	r3, r3, #5
 800650a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800650e:	441e      	add	r6, r3
 8006510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006512:	4618      	mov	r0, r3
 8006514:	f04f 0100 	mov.w	r1, #0
 8006518:	4602      	mov	r2, r0
 800651a:	460b      	mov	r3, r1
 800651c:	1894      	adds	r4, r2, r2
 800651e:	603c      	str	r4, [r7, #0]
 8006520:	415b      	adcs	r3, r3
 8006522:	607b      	str	r3, [r7, #4]
 8006524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006528:	1812      	adds	r2, r2, r0
 800652a:	eb41 0303 	adc.w	r3, r1, r3
 800652e:	f04f 0400 	mov.w	r4, #0
 8006532:	f04f 0500 	mov.w	r5, #0
 8006536:	00dd      	lsls	r5, r3, #3
 8006538:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800653c:	00d4      	lsls	r4, r2, #3
 800653e:	4622      	mov	r2, r4
 8006540:	462b      	mov	r3, r5
 8006542:	eb12 0a00 	adds.w	sl, r2, r0
 8006546:	eb43 0b01 	adc.w	fp, r3, r1
 800654a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	4618      	mov	r0, r3
 8006550:	f04f 0100 	mov.w	r1, #0
 8006554:	f04f 0200 	mov.w	r2, #0
 8006558:	f04f 0300 	mov.w	r3, #0
 800655c:	008b      	lsls	r3, r1, #2
 800655e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006562:	0082      	lsls	r2, r0, #2
 8006564:	4650      	mov	r0, sl
 8006566:	4659      	mov	r1, fp
 8006568:	f7f9 fe36 	bl	80001d8 <__aeabi_uldivmod>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4b0e      	ldr	r3, [pc, #56]	; (80065ac <UART_SetConfig+0x38c>)
 8006572:	fba3 1302 	umull	r1, r3, r3, r2
 8006576:	095b      	lsrs	r3, r3, #5
 8006578:	2164      	movs	r1, #100	; 0x64
 800657a:	fb01 f303 	mul.w	r3, r1, r3
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	3332      	adds	r3, #50	; 0x32
 8006584:	4a09      	ldr	r2, [pc, #36]	; (80065ac <UART_SetConfig+0x38c>)
 8006586:	fba2 2303 	umull	r2, r3, r2, r3
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	f003 020f 	and.w	r2, r3, #15
 8006590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4432      	add	r2, r6
 8006596:	609a      	str	r2, [r3, #8]
}
 8006598:	bf00      	nop
 800659a:	377c      	adds	r7, #124	; 0x7c
 800659c:	46bd      	mov	sp, r7
 800659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a2:	bf00      	nop
 80065a4:	40011000 	.word	0x40011000
 80065a8:	40011400 	.word	0x40011400
 80065ac:	51eb851f 	.word	0x51eb851f

080065b0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	4b20      	ldr	r3, [pc, #128]	; (8006650 <FSMC_NORSRAM_Init+0xa0>)
 80065ce:	4013      	ands	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80065da:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80065e0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80065e6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80065ec:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80065f2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80065f8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80065fe:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006604:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800660a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006610:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006616:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800661c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	2b08      	cmp	r3, #8
 800662a:	d103      	bne.n	8006634 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006632:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68f9      	ldr	r1, [r7, #12]
 800663c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	fff00080 	.word	0xfff00080

08006654 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800666e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006676:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006682:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800668a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006692:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	3b01      	subs	r3, #1
 800669a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800669c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	3b02      	subs	r3, #2
 80066a4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80066a6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80066ac:	4313      	orrs	r3, r2
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6979      	ldr	r1, [r7, #20]
 80066bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
	...

080066d0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066e8:	d122      	bne.n	8006730 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	4b15      	ldr	r3, [pc, #84]	; (800674c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006706:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800670e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006716:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800671c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	4313      	orrs	r3, r2
 8006722:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	6979      	ldr	r1, [r7, #20]
 800672a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800672e:	e005      	b.n	800673c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	cff00000 	.word	0xcff00000

08006750 <__libc_init_array>:
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	4d0d      	ldr	r5, [pc, #52]	; (8006788 <__libc_init_array+0x38>)
 8006754:	4c0d      	ldr	r4, [pc, #52]	; (800678c <__libc_init_array+0x3c>)
 8006756:	1b64      	subs	r4, r4, r5
 8006758:	10a4      	asrs	r4, r4, #2
 800675a:	2600      	movs	r6, #0
 800675c:	42a6      	cmp	r6, r4
 800675e:	d109      	bne.n	8006774 <__libc_init_array+0x24>
 8006760:	4d0b      	ldr	r5, [pc, #44]	; (8006790 <__libc_init_array+0x40>)
 8006762:	4c0c      	ldr	r4, [pc, #48]	; (8006794 <__libc_init_array+0x44>)
 8006764:	f000 f820 	bl	80067a8 <_init>
 8006768:	1b64      	subs	r4, r4, r5
 800676a:	10a4      	asrs	r4, r4, #2
 800676c:	2600      	movs	r6, #0
 800676e:	42a6      	cmp	r6, r4
 8006770:	d105      	bne.n	800677e <__libc_init_array+0x2e>
 8006772:	bd70      	pop	{r4, r5, r6, pc}
 8006774:	f855 3b04 	ldr.w	r3, [r5], #4
 8006778:	4798      	blx	r3
 800677a:	3601      	adds	r6, #1
 800677c:	e7ee      	b.n	800675c <__libc_init_array+0xc>
 800677e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006782:	4798      	blx	r3
 8006784:	3601      	adds	r6, #1
 8006786:	e7f2      	b.n	800676e <__libc_init_array+0x1e>
 8006788:	0800d6c8 	.word	0x0800d6c8
 800678c:	0800d6c8 	.word	0x0800d6c8
 8006790:	0800d6c8 	.word	0x0800d6c8
 8006794:	0800d6cc 	.word	0x0800d6cc

08006798 <memset>:
 8006798:	4402      	add	r2, r0
 800679a:	4603      	mov	r3, r0
 800679c:	4293      	cmp	r3, r2
 800679e:	d100      	bne.n	80067a2 <memset+0xa>
 80067a0:	4770      	bx	lr
 80067a2:	f803 1b01 	strb.w	r1, [r3], #1
 80067a6:	e7f9      	b.n	800679c <memset+0x4>

080067a8 <_init>:
 80067a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067aa:	bf00      	nop
 80067ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ae:	bc08      	pop	{r3}
 80067b0:	469e      	mov	lr, r3
 80067b2:	4770      	bx	lr

080067b4 <_fini>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	bf00      	nop
 80067b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ba:	bc08      	pop	{r3}
 80067bc:	469e      	mov	lr, r3
 80067be:	4770      	bx	lr
