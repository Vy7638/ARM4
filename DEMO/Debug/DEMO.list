
DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000597c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f98  08005b04  08005b04  00015b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a9c  08008a9c  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08008a9c  08008a9c  00018a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008aa4  08008aa4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008aa4  08008aa4  00018aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008aa8  08008aa8  00018aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08008aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00000244  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000264  20000264  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cb99  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bb7  00000000  00000000  0003cbe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  000407a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013a8  00000000  00000000  00041ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000246ee  00000000  00000000  00043088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c1a4  00000000  00000000  00067776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3115  00000000  00000000  0008391a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00156a2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000573c  00000000  00000000  00156a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005aec 	.word	0x08005aec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08005aec 	.word	0x08005aec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2108      	movs	r1, #8
 80004c8:	4802      	ldr	r0, [pc, #8]	; (80004d4 <button_init+0x14>)
 80004ca:	f002 f9f1 	bl	80028b0 <HAL_GPIO_WritePin>
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40020c00 	.word	0x40020c00

080004d8 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2108      	movs	r1, #8
 80004e2:	482f      	ldr	r0, [pc, #188]	; (80005a0 <button_Scan+0xc8>)
 80004e4:	f002 f9e4 	bl	80028b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2108      	movs	r1, #8
 80004ec:	482c      	ldr	r0, [pc, #176]	; (80005a0 <button_Scan+0xc8>)
 80004ee:	f002 f9df 	bl	80028b0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004f2:	230a      	movs	r3, #10
 80004f4:	2202      	movs	r2, #2
 80004f6:	492b      	ldr	r1, [pc, #172]	; (80005a4 <button_Scan+0xcc>)
 80004f8:	482b      	ldr	r0, [pc, #172]	; (80005a8 <button_Scan+0xd0>)
 80004fa:	f003 f98a 	bl	8003812 <HAL_SPI_Receive>
	  int button_index = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000506:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000508:	2300      	movs	r3, #0
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	e03f      	b.n	800058e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b00      	cmp	r3, #0
 8000512:	db06      	blt.n	8000522 <button_Scan+0x4a>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b03      	cmp	r3, #3
 8000518:	dc03      	bgt.n	8000522 <button_Scan+0x4a>
			  button_index = i + 4;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3304      	adds	r3, #4
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	e018      	b.n	8000554 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b03      	cmp	r3, #3
 8000526:	dd07      	ble.n	8000538 <button_Scan+0x60>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b07      	cmp	r3, #7
 800052c:	dc04      	bgt.n	8000538 <button_Scan+0x60>
			  button_index = 7 - i;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f1c3 0307 	rsb	r3, r3, #7
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	e00d      	b.n	8000554 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dd06      	ble.n	800054c <button_Scan+0x74>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b0b      	cmp	r3, #11
 8000542:	dc03      	bgt.n	800054c <button_Scan+0x74>
			  button_index = i + 4;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3304      	adds	r3, #4
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e003      	b.n	8000554 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f1c3 0317 	rsb	r3, r3, #23
 8000552:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <button_Scan+0xcc>)
 8000556:	881a      	ldrh	r2, [r3, #0]
 8000558:	897b      	ldrh	r3, [r7, #10]
 800055a:	4013      	ands	r3, r2
 800055c:	b29b      	uxth	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d005      	beq.n	800056e <button_Scan+0x96>
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <button_Scan+0xd4>)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2100      	movs	r1, #0
 8000568:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800056c:	e009      	b.n	8000582 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800056e:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <button_Scan+0xd4>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000576:	3301      	adds	r3, #1
 8000578:	b299      	uxth	r1, r3
 800057a:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <button_Scan+0xd4>)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000582:	897b      	ldrh	r3, [r7, #10]
 8000584:	085b      	lsrs	r3, r3, #1
 8000586:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b0f      	cmp	r3, #15
 8000592:	ddbc      	ble.n	800050e <button_Scan+0x36>
	  }
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40020c00 	.word	0x40020c00
 80005a4:	2000003c 	.word	0x2000003c
 80005a8:	2000017c 	.word	0x2000017c
 80005ac:	20000058 	.word	0x20000058

080005b0 <fsm_auto_init>:
int counterRedGreen;
int counterRedAmber;
int counterGreenRed;
int counterAmberRed;

void fsm_auto_init(){
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	counterRedGreen = timerGreen;
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <fsm_auto_init+0x30>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <fsm_auto_init+0x34>)
 80005ba:	6013      	str	r3, [r2, #0]
	counterRedAmber = timerAmber;
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <fsm_auto_init+0x38>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <fsm_auto_init+0x3c>)
 80005c2:	6013      	str	r3, [r2, #0]
	counterGreenRed = timerGreen;
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <fsm_auto_init+0x30>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <fsm_auto_init+0x40>)
 80005ca:	6013      	str	r3, [r2, #0]
	counterAmberRed	= timerAmber;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <fsm_auto_init+0x38>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <fsm_auto_init+0x44>)
 80005d2:	6013      	str	r3, [r2, #0]
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000008 	.word	0x20000008
 80005e4:	20000098 	.word	0x20000098
 80005e8:	20000004 	.word	0x20000004
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	20000090 	.word	0x20000090
 80005f4:	20000080 	.word	0x20000080

080005f8 <fsm_auto>:

void fsm_auto(){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  if (counter % 20 == 0){
 80005fc:	4b49      	ldr	r3, [pc, #292]	; (8000724 <fsm_auto+0x12c>)
 80005fe:	6819      	ldr	r1, [r3, #0]
 8000600:	4b49      	ldr	r3, [pc, #292]	; (8000728 <fsm_auto+0x130>)
 8000602:	fb83 2301 	smull	r2, r3, r3, r1
 8000606:	10da      	asrs	r2, r3, #3
 8000608:	17cb      	asrs	r3, r1, #31
 800060a:	1ad2      	subs	r2, r2, r3
 800060c:	4613      	mov	r3, r2
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	4413      	add	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	1aca      	subs	r2, r1, r3
 8000616:	2a00      	cmp	r2, #0
 8000618:	d176      	bne.n	8000708 <fsm_auto+0x110>
	  counter = 0;
 800061a:	4b42      	ldr	r3, [pc, #264]	; (8000724 <fsm_auto+0x12c>)
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
	switch (status) {
 8000620:	4b42      	ldr	r3, [pc, #264]	; (800072c <fsm_auto+0x134>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b04      	cmp	r3, #4
 8000626:	d871      	bhi.n	800070c <fsm_auto+0x114>
 8000628:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <fsm_auto+0x38>)
 800062a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062e:	bf00      	nop
 8000630:	080006fd 	.word	0x080006fd
 8000634:	08000645 	.word	0x08000645
 8000638:	08000673 	.word	0x08000673
 800063c:	080006a1 	.word	0x080006a1
 8000640:	080006cf 	.word	0x080006cf
		case RED_GREEN:
			lcd_Clear(WHITE);
 8000644:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000648:	f000 fad0 	bl	8000bec <lcd_Clear>
			lcdRedGreen();
 800064c:	f000 ff96 	bl	800157c <lcdRedGreen>
			counterRedGreen--;
 8000650:	4b37      	ldr	r3, [pc, #220]	; (8000730 <fsm_auto+0x138>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3b01      	subs	r3, #1
 8000656:	4a36      	ldr	r2, [pc, #216]	; (8000730 <fsm_auto+0x138>)
 8000658:	6013      	str	r3, [r2, #0]
			if (counterRedGreen <= 0){
 800065a:	4b35      	ldr	r3, [pc, #212]	; (8000730 <fsm_auto+0x138>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	dc56      	bgt.n	8000710 <fsm_auto+0x118>
				counterRedGreen = timerGreen;
 8000662:	4b34      	ldr	r3, [pc, #208]	; (8000734 <fsm_auto+0x13c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a32      	ldr	r2, [pc, #200]	; (8000730 <fsm_auto+0x138>)
 8000668:	6013      	str	r3, [r2, #0]
				status = RED_AMBER;
 800066a:	4b30      	ldr	r3, [pc, #192]	; (800072c <fsm_auto+0x134>)
 800066c:	2202      	movs	r2, #2
 800066e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000670:	e04e      	b.n	8000710 <fsm_auto+0x118>
		case RED_AMBER:
			lcd_Clear(WHITE);
 8000672:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000676:	f000 fab9 	bl	8000bec <lcd_Clear>
			lcdRedAmber();
 800067a:	f000 ff97 	bl	80015ac <lcdRedAmber>
			counterRedAmber--;
 800067e:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <fsm_auto+0x140>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3b01      	subs	r3, #1
 8000684:	4a2c      	ldr	r2, [pc, #176]	; (8000738 <fsm_auto+0x140>)
 8000686:	6013      	str	r3, [r2, #0]
			if (counterRedAmber <= 0){
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <fsm_auto+0x140>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	dc41      	bgt.n	8000714 <fsm_auto+0x11c>
				counterRedAmber = timerAmber;
 8000690:	4b2a      	ldr	r3, [pc, #168]	; (800073c <fsm_auto+0x144>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a28      	ldr	r2, [pc, #160]	; (8000738 <fsm_auto+0x140>)
 8000696:	6013      	str	r3, [r2, #0]
				status = GREEN_RED;
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <fsm_auto+0x134>)
 800069a:	2203      	movs	r2, #3
 800069c:	601a      	str	r2, [r3, #0]
			}
			break;
 800069e:	e039      	b.n	8000714 <fsm_auto+0x11c>
		case GREEN_RED:
			lcd_Clear(WHITE);
 80006a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006a4:	f000 faa2 	bl	8000bec <lcd_Clear>
			lcdGreenRed();
 80006a8:	f000 ff98 	bl	80015dc <lcdGreenRed>
			counterGreenRed--;
 80006ac:	4b24      	ldr	r3, [pc, #144]	; (8000740 <fsm_auto+0x148>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	4a23      	ldr	r2, [pc, #140]	; (8000740 <fsm_auto+0x148>)
 80006b4:	6013      	str	r3, [r2, #0]
			if (counterGreenRed <= 0){
 80006b6:	4b22      	ldr	r3, [pc, #136]	; (8000740 <fsm_auto+0x148>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	dc2c      	bgt.n	8000718 <fsm_auto+0x120>
				counterGreenRed = timerGreen;
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <fsm_auto+0x13c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <fsm_auto+0x148>)
 80006c4:	6013      	str	r3, [r2, #0]
				status = AMBER_RED;
 80006c6:	4b19      	ldr	r3, [pc, #100]	; (800072c <fsm_auto+0x134>)
 80006c8:	2204      	movs	r2, #4
 80006ca:	601a      	str	r2, [r3, #0]
			}
			break;
 80006cc:	e024      	b.n	8000718 <fsm_auto+0x120>
		case AMBER_RED:
			lcd_Clear(WHITE);
 80006ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006d2:	f000 fa8b 	bl	8000bec <lcd_Clear>
			lcdAmberRed();
 80006d6:	f000 ff99 	bl	800160c <lcdAmberRed>
			counterAmberRed--;
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <fsm_auto+0x14c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3b01      	subs	r3, #1
 80006e0:	4a18      	ldr	r2, [pc, #96]	; (8000744 <fsm_auto+0x14c>)
 80006e2:	6013      	str	r3, [r2, #0]
			if (counterAmberRed <= 0){
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <fsm_auto+0x14c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	dc17      	bgt.n	800071c <fsm_auto+0x124>
				counterAmberRed = timerAmber;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <fsm_auto+0x144>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a14      	ldr	r2, [pc, #80]	; (8000744 <fsm_auto+0x14c>)
 80006f2:	6013      	str	r3, [r2, #0]
				status = RED_GREEN;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <fsm_auto+0x134>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	601a      	str	r2, [r3, #0]
			}
			break;
 80006fa:	e00f      	b.n	800071c <fsm_auto+0x124>
		case INIT:
			status = RED_GREEN;
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <fsm_auto+0x134>)
 80006fe:	2201      	movs	r2, #1
 8000700:	601a      	str	r2, [r3, #0]
			fsm_auto_init();
 8000702:	f7ff ff55 	bl	80005b0 <fsm_auto_init>
			break;
 8000706:	e00a      	b.n	800071e <fsm_auto+0x126>
		default:
			break;
	}
  }
 8000708:	bf00      	nop
 800070a:	e008      	b.n	800071e <fsm_auto+0x126>
			break;
 800070c:	bf00      	nop
 800070e:	e006      	b.n	800071e <fsm_auto+0x126>
			break;
 8000710:	bf00      	nop
 8000712:	e004      	b.n	800071e <fsm_auto+0x126>
			break;
 8000714:	bf00      	nop
 8000716:	e002      	b.n	800071e <fsm_auto+0x126>
			break;
 8000718:	bf00      	nop
 800071a:	e000      	b.n	800071e <fsm_auto+0x126>
			break;
 800071c:	bf00      	nop
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000044 	.word	0x20000044
 8000728:	66666667 	.word	0x66666667
 800072c:	20000040 	.word	0x20000040
 8000730:	20000098 	.word	0x20000098
 8000734:	20000008 	.word	0x20000008
 8000738:	2000008c 	.word	0x2000008c
 800073c:	20000004 	.word	0x20000004
 8000740:	20000090 	.word	0x20000090
 8000744:	20000080 	.word	0x20000080

08000748 <fsm_manual>:

void fsm_manual(){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	switch (status) {
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <fsm_manual+0x68>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b0d      	cmp	r3, #13
 8000752:	d01e      	beq.n	8000792 <fsm_manual+0x4a>
 8000754:	2b0d      	cmp	r3, #13
 8000756:	dc28      	bgt.n	80007aa <fsm_manual+0x62>
 8000758:	2b0b      	cmp	r3, #11
 800075a:	d002      	beq.n	8000762 <fsm_manual+0x1a>
 800075c:	2b0c      	cmp	r3, #12
 800075e:	d00c      	beq.n	800077a <fsm_manual+0x32>
			temp = tempGreen;
			blinkyGreen();
			showMode();
			break;
		default:
			break;
 8000760:	e023      	b.n	80007aa <fsm_manual+0x62>
			mode = 2;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <fsm_manual+0x6c>)
 8000764:	2202      	movs	r2, #2
 8000766:	601a      	str	r2, [r3, #0]
			temp = tempRed;
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <fsm_manual+0x70>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a13      	ldr	r2, [pc, #76]	; (80007bc <fsm_manual+0x74>)
 800076e:	6013      	str	r3, [r2, #0]
			blinkyRed();
 8000770:	f000 ff64 	bl	800163c <blinkyRed>
			showMode();
 8000774:	f000 ffce 	bl	8001714 <showMode>
			break;
 8000778:	e018      	b.n	80007ac <fsm_manual+0x64>
			mode = 3;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <fsm_manual+0x6c>)
 800077c:	2203      	movs	r2, #3
 800077e:	601a      	str	r2, [r3, #0]
			temp = tempAmber;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <fsm_manual+0x78>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <fsm_manual+0x74>)
 8000786:	6013      	str	r3, [r2, #0]
			blinkyAmber();
 8000788:	f000 ff7c 	bl	8001684 <blinkyAmber>
			showMode();
 800078c:	f000 ffc2 	bl	8001714 <showMode>
			break;
 8000790:	e00c      	b.n	80007ac <fsm_manual+0x64>
			mode = 4;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <fsm_manual+0x6c>)
 8000794:	2204      	movs	r2, #4
 8000796:	601a      	str	r2, [r3, #0]
			temp = tempGreen;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <fsm_manual+0x7c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <fsm_manual+0x74>)
 800079e:	6013      	str	r3, [r2, #0]
			blinkyGreen();
 80007a0:	f000 ff94 	bl	80016cc <blinkyGreen>
			showMode();
 80007a4:	f000 ffb6 	bl	8001714 <showMode>
			break;
 80007a8:	e000      	b.n	80007ac <fsm_manual+0x64>
			break;
 80007aa:	bf00      	nop
	}
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000040 	.word	0x20000040
 80007b4:	20000084 	.word	0x20000084
 80007b8:	20000078 	.word	0x20000078
 80007bc:	2000007c 	.word	0x2000007c
 80007c0:	20000088 	.word	0x20000088
 80007c4:	20000094 	.word	0x20000094

080007c8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	; 0x38
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
 80007de:	615a      	str	r2, [r3, #20]
 80007e0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80007e2:	463b      	mov	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
 80007f0:	615a      	str	r2, [r3, #20]
 80007f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80007f4:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <MX_FSMC_Init+0xec>)
 80007f6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80007fa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80007fc:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <MX_FSMC_Init+0xec>)
 80007fe:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <MX_FSMC_Init+0xf0>)
 8000800:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000802:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <MX_FSMC_Init+0xec>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000808:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <MX_FSMC_Init+0xec>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800080e:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <MX_FSMC_Init+0xec>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <MX_FSMC_Init+0xec>)
 8000816:	2210      	movs	r2, #16
 8000818:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <MX_FSMC_Init+0xec>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000820:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <MX_FSMC_Init+0xec>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <MX_FSMC_Init+0xec>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800082c:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <MX_FSMC_Init+0xec>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_FSMC_Init+0xec>)
 8000834:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_FSMC_Init+0xec>)
 800083c:	2200      	movs	r2, #0
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000840:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <MX_FSMC_Init+0xec>)
 8000842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000846:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_FSMC_Init+0xec>)
 800084a:	2200      	movs	r2, #0
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <MX_FSMC_Init+0xec>)
 8000850:	2200      	movs	r2, #0
 8000852:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_FSMC_Init+0xec>)
 8000856:	2200      	movs	r2, #0
 8000858:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800085a:	230f      	movs	r3, #15
 800085c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800085e:	230f      	movs	r3, #15
 8000860:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000862:	233c      	movs	r3, #60	; 0x3c
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800086a:	2310      	movs	r3, #16
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800086e:	2311      	movs	r3, #17
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000872:	2300      	movs	r3, #0
 8000874:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000876:	2308      	movs	r3, #8
 8000878:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800087a:	230f      	movs	r3, #15
 800087c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800087e:	2309      	movs	r3, #9
 8000880:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000886:	2310      	movs	r3, #16
 8000888:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800088a:	2311      	movs	r3, #17
 800088c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000892:	463a      	mov	r2, r7
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4806      	ldr	r0, [pc, #24]	; (80008b4 <MX_FSMC_Init+0xec>)
 800089c:	f003 fb9c 	bl	8003fd8 <HAL_SRAM_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80008a6:	f001 f90f 	bl	8001ac8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80008aa:	bf00      	nop
 80008ac:	3738      	adds	r7, #56	; 0x38
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000009c 	.word	0x2000009c
 80008b8:	a0000104 	.word	0xa0000104

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	4b69      	ldr	r3, [pc, #420]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a68      	ldr	r2, [pc, #416]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b66      	ldr	r3, [pc, #408]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0310 	and.w	r3, r3, #16
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	4b62      	ldr	r3, [pc, #392]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a61      	ldr	r2, [pc, #388]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b5f      	ldr	r3, [pc, #380]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b5b      	ldr	r3, [pc, #364]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a5a      	ldr	r2, [pc, #360]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 8000914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b58      	ldr	r3, [pc, #352]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b54      	ldr	r3, [pc, #336]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a53      	ldr	r2, [pc, #332]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b51      	ldr	r3, [pc, #324]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b4d      	ldr	r3, [pc, #308]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a4c      	ldr	r2, [pc, #304]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b4a      	ldr	r3, [pc, #296]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b46      	ldr	r3, [pc, #280]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a45      	ldr	r2, [pc, #276]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 8000968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b43      	ldr	r3, [pc, #268]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b3f      	ldr	r3, [pc, #252]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a3e      	ldr	r2, [pc, #248]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b3c      	ldr	r3, [pc, #240]	; (8000a7c <MX_GPIO_Init+0x1c0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_DEBUG_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2170      	movs	r1, #112	; 0x70
 800099a:	4839      	ldr	r0, [pc, #228]	; (8000a80 <MX_GPIO_Init+0x1c4>)
 800099c:	f001 ff88 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|INPUT_X2_Pin|INPUT_X3_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f242 0130 	movw	r1, #8240	; 0x2030
 80009a6:	4837      	ldr	r0, [pc, #220]	; (8000a84 <MX_GPIO_Init+0x1c8>)
 80009a8:	f001 ff82 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INPUT_X1_Pin|FSMC_BLK_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80009b2:	4835      	ldr	r0, [pc, #212]	; (8000a88 <MX_GPIO_Init+0x1cc>)
 80009b4:	f001 ff7c 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2140      	movs	r1, #64	; 0x40
 80009bc:	4833      	ldr	r0, [pc, #204]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 80009be:	f001 ff77 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2108      	movs	r1, #8
 80009c6:	4832      	ldr	r0, [pc, #200]	; (8000a90 <MX_GPIO_Init+0x1d4>)
 80009c8:	f001 ff72 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_DEBUG_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80009cc:	2370      	movs	r3, #112	; 0x70
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4827      	ldr	r0, [pc, #156]	; (8000a80 <MX_GPIO_Init+0x1c4>)
 80009e4:	f001 fdc8 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin INPUT_X2_Pin INPUT_X3_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|INPUT_X2_Pin|INPUT_X3_Pin;
 80009e8:	f242 0330 	movw	r3, #8240	; 0x2030
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4820      	ldr	r0, [pc, #128]	; (8000a84 <MX_GPIO_Init+0x1c8>)
 8000a02:	f001 fdb9 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_X0_Pin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin;
 8000a06:	2340      	movs	r3, #64	; 0x40
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INPUT_X0_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	481b      	ldr	r0, [pc, #108]	; (8000a88 <MX_GPIO_Init+0x1cc>)
 8000a1a:	f001 fdad 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X1_Pin FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = INPUT_X1_Pin|FSMC_BLK_Pin;
 8000a1e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4814      	ldr	r0, [pc, #80]	; (8000a88 <MX_GPIO_Init+0x1cc>)
 8000a38:	f001 fd9e 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_LATCH_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a3c:	2340      	movs	r3, #64	; 0x40
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	480e      	ldr	r0, [pc, #56]	; (8000a8c <MX_GPIO_Init+0x1d0>)
 8000a54:	f001 fd90 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4808      	ldr	r0, [pc, #32]	; (8000a90 <MX_GPIO_Init+0x1d4>)
 8000a70:	f001 fd82 	bl	8002578 <HAL_GPIO_Init>

}
 8000a74:	bf00      	nop
 8000a76:	3730      	adds	r7, #48	; 0x30
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40020800 	.word	0x40020800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40021800 	.word	0x40021800
 8000a90:	40020c00 	.word	0x40020c00

08000a94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <MX_I2C1_Init+0x54>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000aa0:	4a12      	ldr	r2, [pc, #72]	; (8000aec <MX_I2C1_Init+0x58>)
 8000aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000ab2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ab6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_I2C1_Init+0x50>)
 8000ad2:	f001 ff21 	bl	8002918 <HAL_I2C_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000adc:	f000 fff4 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000ec 	.word	0x200000ec
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	000186a0 	.word	0x000186a0

08000af0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000afa:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <LCD_WR_REG+0x1c>)
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	8013      	strh	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	600ffffe 	.word	0x600ffffe

08000b10 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000b1a:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <LCD_WR_DATA+0x1c>)
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	8053      	strh	r3, [r2, #2]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	600ffffe 	.word	0x600ffffe

08000b30 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <LCD_RD_DATA+0x20>)
 8000b38:	885b      	ldrh	r3, [r3, #2]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	b29b      	uxth	r3, r3
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	600ffffe 	.word	0x600ffffe

08000b54 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	4611      	mov	r1, r2
 8000b60:	461a      	mov	r2, r3
 8000b62:	4623      	mov	r3, r4
 8000b64:	80fb      	strh	r3, [r7, #6]
 8000b66:	4603      	mov	r3, r0
 8000b68:	80bb      	strh	r3, [r7, #4]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	807b      	strh	r3, [r7, #2]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000b72:	202a      	movs	r0, #42	; 0x2a
 8000b74:	f7ff ffbc 	bl	8000af0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ffc6 	bl	8000b10 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ffc0 	bl	8000b10 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000b90:	887b      	ldrh	r3, [r7, #2]
 8000b92:	0a1b      	lsrs	r3, r3, #8
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ffba 	bl	8000b10 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ffb4 	bl	8000b10 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000ba8:	202b      	movs	r0, #43	; 0x2b
 8000baa:	f7ff ffa1 	bl	8000af0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000bae:	88bb      	ldrh	r3, [r7, #4]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ffab 	bl	8000b10 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000bba:	88bb      	ldrh	r3, [r7, #4]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ffa5 	bl	8000b10 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000bc6:	883b      	ldrh	r3, [r7, #0]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff9f 	bl	8000b10 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000bd2:	883b      	ldrh	r3, [r7, #0]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff99 	bl	8000b10 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000bde:	202c      	movs	r0, #44	; 0x2c
 8000be0:	f7ff ff86 	bl	8000af0 <LCD_WR_REG>
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd90      	pop	{r4, r7, pc}

08000bec <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <lcd_Clear+0x60>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <lcd_Clear+0x60>)
 8000c00:	885b      	ldrh	r3, [r3, #2]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f7ff ffa3 	bl	8000b54 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	81fb      	strh	r3, [r7, #14]
 8000c12:	e011      	b.n	8000c38 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	81bb      	strh	r3, [r7, #12]
 8000c18:	e006      	b.n	8000c28 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff77 	bl	8000b10 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000c22:	89bb      	ldrh	r3, [r7, #12]
 8000c24:	3301      	adds	r3, #1
 8000c26:	81bb      	strh	r3, [r7, #12]
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <lcd_Clear+0x60>)
 8000c2a:	885b      	ldrh	r3, [r3, #2]
 8000c2c:	89ba      	ldrh	r2, [r7, #12]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d3f3      	bcc.n	8000c1a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000c32:	89fb      	ldrh	r3, [r7, #14]
 8000c34:	3301      	adds	r3, #1
 8000c36:	81fb      	strh	r3, [r7, #14]
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <lcd_Clear+0x60>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	89fa      	ldrh	r2, [r7, #14]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d3e8      	bcc.n	8000c14 <lcd_Clear+0x28>
		}
	}
}
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000140 	.word	0x20000140

08000c50 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	80fb      	strh	r3, [r7, #6]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	80bb      	strh	r3, [r7, #4]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000c62:	88bb      	ldrh	r3, [r7, #4]
 8000c64:	88fa      	ldrh	r2, [r7, #6]
 8000c66:	88b9      	ldrh	r1, [r7, #4]
 8000c68:	88f8      	ldrh	r0, [r7, #6]
 8000c6a:	f7ff ff73 	bl	8000b54 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000c6e:	887b      	ldrh	r3, [r7, #2]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff4d 	bl	8000b10 <LCD_WR_DATA>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b087      	sub	sp, #28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4604      	mov	r4, r0
 8000c88:	4608      	mov	r0, r1
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4623      	mov	r3, r4
 8000c90:	80fb      	strh	r3, [r7, #6]
 8000c92:	4603      	mov	r3, r0
 8000c94:	80bb      	strh	r3, [r7, #4]
 8000c96:	460b      	mov	r3, r1
 8000c98:	70fb      	strb	r3, [r7, #3]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000ca6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000caa:	085b      	lsrs	r3, r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	f003 0307 	and.w	r3, r3, #7
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	bf14      	ite	ne
 8000cc2:	2301      	movne	r3, #1
 8000cc4:	2300      	moveq	r3, #0
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	4413      	add	r3, r2
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	fb12 f303 	smulbb	r3, r2, r3
 8000cd6:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000cd8:	78fb      	ldrb	r3, [r7, #3]
 8000cda:	3b20      	subs	r3, #32
 8000cdc:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	b29c      	uxth	r4, r3
 8000cec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	88bb      	ldrh	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	88b9      	ldrh	r1, [r7, #4]
 8000cfe:	88f8      	ldrh	r0, [r7, #6]
 8000d00:	4622      	mov	r2, r4
 8000d02:	f7ff ff27 	bl	8000b54 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	827b      	strh	r3, [r7, #18]
 8000d0a:	e07a      	b.n	8000e02 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000d0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d10:	2b0c      	cmp	r3, #12
 8000d12:	d028      	beq.n	8000d66 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000d14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d18:	2b10      	cmp	r3, #16
 8000d1a:	d108      	bne.n	8000d2e <lcd_ShowChar+0xae>
 8000d1c:	78fa      	ldrb	r2, [r7, #3]
 8000d1e:	8a7b      	ldrh	r3, [r7, #18]
 8000d20:	493c      	ldr	r1, [pc, #240]	; (8000e14 <lcd_ShowChar+0x194>)
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	440a      	add	r2, r1
 8000d26:	4413      	add	r3, r2
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	75fb      	strb	r3, [r7, #23]
 8000d2c:	e01b      	b.n	8000d66 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000d2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d32:	2b18      	cmp	r3, #24
 8000d34:	d10b      	bne.n	8000d4e <lcd_ShowChar+0xce>
 8000d36:	78fa      	ldrb	r2, [r7, #3]
 8000d38:	8a79      	ldrh	r1, [r7, #18]
 8000d3a:	4837      	ldr	r0, [pc, #220]	; (8000e18 <lcd_ShowChar+0x198>)
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	4403      	add	r3, r0
 8000d46:	440b      	add	r3, r1
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	75fb      	strb	r3, [r7, #23]
 8000d4c:	e00b      	b.n	8000d66 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000d4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d52:	2b20      	cmp	r3, #32
 8000d54:	d15a      	bne.n	8000e0c <lcd_ShowChar+0x18c>
 8000d56:	78fa      	ldrb	r2, [r7, #3]
 8000d58:	8a7b      	ldrh	r3, [r7, #18]
 8000d5a:	4930      	ldr	r1, [pc, #192]	; (8000e1c <lcd_ShowChar+0x19c>)
 8000d5c:	0192      	lsls	r2, r2, #6
 8000d5e:	440a      	add	r2, r1
 8000d60:	4413      	add	r3, r2
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	75bb      	strb	r3, [r7, #22]
 8000d6a:	e044      	b.n	8000df6 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000d6c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d120      	bne.n	8000db6 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000d74:	7dfa      	ldrb	r2, [r7, #23]
 8000d76:	7dbb      	ldrb	r3, [r7, #22]
 8000d78:	fa42 f303 	asr.w	r3, r2, r3
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d004      	beq.n	8000d8e <lcd_ShowChar+0x10e>
 8000d84:	883b      	ldrh	r3, [r7, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fec2 	bl	8000b10 <LCD_WR_DATA>
 8000d8c:	e003      	b.n	8000d96 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000d8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff febd 	bl	8000b10 <LCD_WR_DATA>
				m++;
 8000d96:	7d7b      	ldrb	r3, [r7, #21]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000d9c:	7d7b      	ldrb	r3, [r7, #21]
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	fbb3 f1f2 	udiv	r1, r3, r2
 8000da4:	fb02 f201 	mul.w	r2, r2, r1
 8000da8:	1a9b      	subs	r3, r3, r2
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d11f      	bne.n	8000df0 <lcd_ShowChar+0x170>
				{
					m=0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	757b      	strb	r3, [r7, #21]
					break;
 8000db4:	e022      	b.n	8000dfc <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000db6:	7dfa      	ldrb	r2, [r7, #23]
 8000db8:	7dbb      	ldrb	r3, [r7, #22]
 8000dba:	fa42 f303 	asr.w	r3, r2, r3
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d005      	beq.n	8000dd2 <lcd_ShowChar+0x152>
 8000dc6:	883a      	ldrh	r2, [r7, #0]
 8000dc8:	88b9      	ldrh	r1, [r7, #4]
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff3f 	bl	8000c50 <lcd_DrawPoint>
				x++;
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000dd8:	88fa      	ldrh	r2, [r7, #6]
 8000dda:	8a3b      	ldrh	r3, [r7, #16]
 8000ddc:	1ad2      	subs	r2, r2, r3
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d105      	bne.n	8000df0 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000de4:	8a3b      	ldrh	r3, [r7, #16]
 8000de6:	80fb      	strh	r3, [r7, #6]
					y++;
 8000de8:	88bb      	ldrh	r3, [r7, #4]
 8000dea:	3301      	adds	r3, #1
 8000dec:	80bb      	strh	r3, [r7, #4]
					break;
 8000dee:	e005      	b.n	8000dfc <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000df0:	7dbb      	ldrb	r3, [r7, #22]
 8000df2:	3301      	adds	r3, #1
 8000df4:	75bb      	strb	r3, [r7, #22]
 8000df6:	7dbb      	ldrb	r3, [r7, #22]
 8000df8:	2b07      	cmp	r3, #7
 8000dfa:	d9b7      	bls.n	8000d6c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000dfc:	8a7b      	ldrh	r3, [r7, #18]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	827b      	strh	r3, [r7, #18]
 8000e02:	8a7a      	ldrh	r2, [r7, #18]
 8000e04:	89bb      	ldrh	r3, [r7, #12]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d380      	bcc.n	8000d0c <lcd_ShowChar+0x8c>
 8000e0a:	e000      	b.n	8000e0e <lcd_ShowChar+0x18e>
		else return;
 8000e0c:	bf00      	nop
				}
			}
		}
	}
}
 8000e0e:	371c      	adds	r7, #28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}
 8000e14:	08005b04 	.word	0x08005b04
 8000e18:	080060f4 	.word	0x080060f4
 8000e1c:	080072c4 	.word	0x080072c4

08000e20 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	460a      	mov	r2, r1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000e34:	e004      	b.n	8000e40 <mypow+0x20>
 8000e36:	79fa      	ldrb	r2, [r7, #7]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	fb02 f303 	mul.w	r3, r2, r3
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	79bb      	ldrb	r3, [r7, #6]
 8000e42:	1e5a      	subs	r2, r3, #1
 8000e44:	71ba      	strb	r2, [r7, #6]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1f5      	bne.n	8000e36 <mypow+0x16>
	return result;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af04      	add	r7, sp, #16
 8000e5e:	4604      	mov	r4, r0
 8000e60:	4608      	mov	r0, r1
 8000e62:	4611      	mov	r1, r2
 8000e64:	461a      	mov	r2, r3
 8000e66:	4623      	mov	r3, r4
 8000e68:	80fb      	strh	r3, [r7, #6]
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	80bb      	strh	r3, [r7, #4]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	807b      	strh	r3, [r7, #2]
 8000e72:	4613      	mov	r3, r2
 8000e74:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000e7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e7e:	085b      	lsrs	r3, r3, #1
 8000e80:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]
 8000e86:	e059      	b.n	8000f3c <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000e88:	887c      	ldrh	r4, [r7, #2]
 8000e8a:	787a      	ldrb	r2, [r7, #1]
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	3b01      	subs	r3, #1
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	4619      	mov	r1, r3
 8000e98:	200a      	movs	r0, #10
 8000e9a:	f7ff ffc1 	bl	8000e20 <mypow>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	fbb4 f1f3 	udiv	r1, r4, r3
 8000ea4:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <lcd_ShowIntNum+0xf8>)
 8000ea6:	fba3 2301 	umull	r2, r3, r3, r1
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	1aca      	subs	r2, r1, r3
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000eba:	7bbb      	ldrb	r3, [r7, #14]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d121      	bne.n	8000f04 <lcd_ShowIntNum+0xac>
 8000ec0:	7bfa      	ldrb	r2, [r7, #15]
 8000ec2:	787b      	ldrb	r3, [r7, #1]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	da1c      	bge.n	8000f04 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000eca:	7b3b      	ldrb	r3, [r7, #12]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d117      	bne.n	8000f00 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	7b7b      	ldrb	r3, [r7, #13]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	fb12 f303 	smulbb	r3, r2, r3
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b298      	uxth	r0, r3
 8000ee4:	8c3a      	ldrh	r2, [r7, #32]
 8000ee6:	88b9      	ldrh	r1, [r7, #4]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	2220      	movs	r2, #32
 8000efa:	f7ff fec1 	bl	8000c80 <lcd_ShowChar>
				continue;
 8000efe:	e01a      	b.n	8000f36 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	7b7b      	ldrb	r3, [r7, #13]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	fb12 f303 	smulbb	r3, r2, r3
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	4413      	add	r3, r2
 8000f16:	b298      	uxth	r0, r3
 8000f18:	7b3b      	ldrb	r3, [r7, #12]
 8000f1a:	3330      	adds	r3, #48	; 0x30
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	8c3c      	ldrh	r4, [r7, #32]
 8000f20:	88b9      	ldrh	r1, [r7, #4]
 8000f22:	2300      	movs	r3, #0
 8000f24:	9302      	str	r3, [sp, #8]
 8000f26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	4623      	mov	r3, r4
 8000f32:	f7ff fea5 	bl	8000c80 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	7bfa      	ldrb	r2, [r7, #15]
 8000f3e:	787b      	ldrb	r3, [r7, #1]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d3a1      	bcc.n	8000e88 <lcd_ShowIntNum+0x30>
	}
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd90      	pop	{r4, r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	cccccccd 	.word	0xcccccccd

08000f54 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	091b      	lsrs	r3, r3, #4
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d007      	beq.n	8000f7e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <lcd_SetDir+0x44>)
 8000f70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f74:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <lcd_SetDir+0x44>)
 8000f78:	22f0      	movs	r2, #240	; 0xf0
 8000f7a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000f7c:	e006      	b.n	8000f8c <lcd_SetDir+0x38>
		lcddev.width=240;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <lcd_SetDir+0x44>)
 8000f80:	22f0      	movs	r2, #240	; 0xf0
 8000f82:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <lcd_SetDir+0x44>)
 8000f86:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f8a:	805a      	strh	r2, [r3, #2]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	20000140 	.word	0x20000140

08000f9c <lcd_init>:


void lcd_init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa6:	48aa      	ldr	r0, [pc, #680]	; (8001250 <lcd_init+0x2b4>)
 8000fa8:	f001 fc82 	bl	80028b0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000fac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb0:	f001 f91a 	bl	80021e8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fba:	48a5      	ldr	r0, [pc, #660]	; (8001250 <lcd_init+0x2b4>)
 8000fbc:	f001 fc78 	bl	80028b0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000fc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc4:	f001 f910 	bl	80021e8 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff ffc3 	bl	8000f54 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000fce:	20d3      	movs	r0, #211	; 0xd3
 8000fd0:	f7ff fd8e 	bl	8000af0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000fd4:	f7ff fdac 	bl	8000b30 <LCD_RD_DATA>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b9d      	ldr	r3, [pc, #628]	; (8001254 <lcd_init+0x2b8>)
 8000fde:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000fe0:	f7ff fda6 	bl	8000b30 <LCD_RD_DATA>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b9a      	ldr	r3, [pc, #616]	; (8001254 <lcd_init+0x2b8>)
 8000fea:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000fec:	f7ff fda0 	bl	8000b30 <LCD_RD_DATA>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b97      	ldr	r3, [pc, #604]	; (8001254 <lcd_init+0x2b8>)
 8000ff6:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000ff8:	4b96      	ldr	r3, [pc, #600]	; (8001254 <lcd_init+0x2b8>)
 8000ffa:	889b      	ldrh	r3, [r3, #4]
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b94      	ldr	r3, [pc, #592]	; (8001254 <lcd_init+0x2b8>)
 8001002:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001004:	f7ff fd94 	bl	8000b30 <LCD_RD_DATA>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	4b91      	ldr	r3, [pc, #580]	; (8001254 <lcd_init+0x2b8>)
 800100e:	889b      	ldrh	r3, [r3, #4]
 8001010:	4313      	orrs	r3, r2
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b8f      	ldr	r3, [pc, #572]	; (8001254 <lcd_init+0x2b8>)
 8001016:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001018:	20cf      	movs	r0, #207	; 0xcf
 800101a:	f7ff fd69 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800101e:	2000      	movs	r0, #0
 8001020:	f7ff fd76 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001024:	20c1      	movs	r0, #193	; 0xc1
 8001026:	f7ff fd73 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800102a:	2030      	movs	r0, #48	; 0x30
 800102c:	f7ff fd70 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001030:	20ed      	movs	r0, #237	; 0xed
 8001032:	f7ff fd5d 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001036:	2064      	movs	r0, #100	; 0x64
 8001038:	f7ff fd6a 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800103c:	2003      	movs	r0, #3
 800103e:	f7ff fd67 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001042:	2012      	movs	r0, #18
 8001044:	f7ff fd64 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001048:	2081      	movs	r0, #129	; 0x81
 800104a:	f7ff fd61 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800104e:	20e8      	movs	r0, #232	; 0xe8
 8001050:	f7ff fd4e 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001054:	2085      	movs	r0, #133	; 0x85
 8001056:	f7ff fd5b 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800105a:	2010      	movs	r0, #16
 800105c:	f7ff fd58 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001060:	207a      	movs	r0, #122	; 0x7a
 8001062:	f7ff fd55 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001066:	20cb      	movs	r0, #203	; 0xcb
 8001068:	f7ff fd42 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800106c:	2039      	movs	r0, #57	; 0x39
 800106e:	f7ff fd4f 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001072:	202c      	movs	r0, #44	; 0x2c
 8001074:	f7ff fd4c 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001078:	2000      	movs	r0, #0
 800107a:	f7ff fd49 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800107e:	2034      	movs	r0, #52	; 0x34
 8001080:	f7ff fd46 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001084:	2002      	movs	r0, #2
 8001086:	f7ff fd43 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800108a:	20f7      	movs	r0, #247	; 0xf7
 800108c:	f7ff fd30 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001090:	2020      	movs	r0, #32
 8001092:	f7ff fd3d 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001096:	20ea      	movs	r0, #234	; 0xea
 8001098:	f7ff fd2a 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff fd37 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff fd34 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80010a8:	20c0      	movs	r0, #192	; 0xc0
 80010aa:	f7ff fd21 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80010ae:	201b      	movs	r0, #27
 80010b0:	f7ff fd2e 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80010b4:	20c1      	movs	r0, #193	; 0xc1
 80010b6:	f7ff fd1b 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80010ba:	2001      	movs	r0, #1
 80010bc:	f7ff fd28 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80010c0:	20c5      	movs	r0, #197	; 0xc5
 80010c2:	f7ff fd15 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80010c6:	2030      	movs	r0, #48	; 0x30
 80010c8:	f7ff fd22 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80010cc:	2030      	movs	r0, #48	; 0x30
 80010ce:	f7ff fd1f 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80010d2:	20c7      	movs	r0, #199	; 0xc7
 80010d4:	f7ff fd0c 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80010d8:	20b7      	movs	r0, #183	; 0xb7
 80010da:	f7ff fd19 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80010de:	2036      	movs	r0, #54	; 0x36
 80010e0:	f7ff fd06 	bl	8000af0 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80010e4:	2008      	movs	r0, #8
 80010e6:	f7ff fd13 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80010ea:	203a      	movs	r0, #58	; 0x3a
 80010ec:	f7ff fd00 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80010f0:	2055      	movs	r0, #85	; 0x55
 80010f2:	f7ff fd0d 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80010f6:	20b1      	movs	r0, #177	; 0xb1
 80010f8:	f7ff fcfa 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff fd07 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001102:	201a      	movs	r0, #26
 8001104:	f7ff fd04 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001108:	20b6      	movs	r0, #182	; 0xb6
 800110a:	f7ff fcf1 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800110e:	200a      	movs	r0, #10
 8001110:	f7ff fcfe 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001114:	20a2      	movs	r0, #162	; 0xa2
 8001116:	f7ff fcfb 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800111a:	20f2      	movs	r0, #242	; 0xf2
 800111c:	f7ff fce8 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff fcf5 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001126:	2026      	movs	r0, #38	; 0x26
 8001128:	f7ff fce2 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800112c:	2001      	movs	r0, #1
 800112e:	f7ff fcef 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001132:	20e0      	movs	r0, #224	; 0xe0
 8001134:	f7ff fcdc 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001138:	200f      	movs	r0, #15
 800113a:	f7ff fce9 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800113e:	202a      	movs	r0, #42	; 0x2a
 8001140:	f7ff fce6 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001144:	2028      	movs	r0, #40	; 0x28
 8001146:	f7ff fce3 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800114a:	2008      	movs	r0, #8
 800114c:	f7ff fce0 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001150:	200e      	movs	r0, #14
 8001152:	f7ff fcdd 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001156:	2008      	movs	r0, #8
 8001158:	f7ff fcda 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800115c:	2054      	movs	r0, #84	; 0x54
 800115e:	f7ff fcd7 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001162:	20a9      	movs	r0, #169	; 0xa9
 8001164:	f7ff fcd4 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001168:	2043      	movs	r0, #67	; 0x43
 800116a:	f7ff fcd1 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800116e:	200a      	movs	r0, #10
 8001170:	f7ff fcce 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001174:	200f      	movs	r0, #15
 8001176:	f7ff fccb 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800117a:	2000      	movs	r0, #0
 800117c:	f7ff fcc8 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fcc5 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001186:	2000      	movs	r0, #0
 8001188:	f7ff fcc2 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff fcbf 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001192:	20e1      	movs	r0, #225	; 0xe1
 8001194:	f7ff fcac 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff fcb9 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800119e:	2015      	movs	r0, #21
 80011a0:	f7ff fcb6 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80011a4:	2017      	movs	r0, #23
 80011a6:	f7ff fcb3 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80011aa:	2007      	movs	r0, #7
 80011ac:	f7ff fcb0 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80011b0:	2011      	movs	r0, #17
 80011b2:	f7ff fcad 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80011b6:	2006      	movs	r0, #6
 80011b8:	f7ff fcaa 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80011bc:	202b      	movs	r0, #43	; 0x2b
 80011be:	f7ff fca7 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80011c2:	2056      	movs	r0, #86	; 0x56
 80011c4:	f7ff fca4 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80011c8:	203c      	movs	r0, #60	; 0x3c
 80011ca:	f7ff fca1 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80011ce:	2005      	movs	r0, #5
 80011d0:	f7ff fc9e 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80011d4:	2010      	movs	r0, #16
 80011d6:	f7ff fc9b 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80011da:	200f      	movs	r0, #15
 80011dc:	f7ff fc98 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80011e0:	203f      	movs	r0, #63	; 0x3f
 80011e2:	f7ff fc95 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80011e6:	203f      	movs	r0, #63	; 0x3f
 80011e8:	f7ff fc92 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80011ec:	200f      	movs	r0, #15
 80011ee:	f7ff fc8f 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80011f2:	202b      	movs	r0, #43	; 0x2b
 80011f4:	f7ff fc7c 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fc89 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011fe:	2000      	movs	r0, #0
 8001200:	f7ff fc86 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff fc83 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800120a:	203f      	movs	r0, #63	; 0x3f
 800120c:	f7ff fc80 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001210:	202a      	movs	r0, #42	; 0x2a
 8001212:	f7ff fc6d 	bl	8000af0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff fc7a 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800121c:	2000      	movs	r0, #0
 800121e:	f7ff fc77 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff fc74 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001228:	20ef      	movs	r0, #239	; 0xef
 800122a:	f7ff fc71 	bl	8000b10 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800122e:	2011      	movs	r0, #17
 8001230:	f7ff fc5e 	bl	8000af0 <LCD_WR_REG>
	HAL_Delay(120);
 8001234:	2078      	movs	r0, #120	; 0x78
 8001236:	f000 ffd7 	bl	80021e8 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800123a:	2029      	movs	r0, #41	; 0x29
 800123c:	f7ff fc58 	bl	8000af0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001240:	2201      	movs	r2, #1
 8001242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <lcd_init+0x2bc>)
 8001248:	f001 fb32 	bl	80028b0 <HAL_GPIO_WritePin>
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40020800 	.word	0x40020800
 8001254:	20000140 	.word	0x20000140
 8001258:	40020000 	.word	0x40020000

0800125c <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	b29a      	uxth	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	b29b      	uxth	r3, r3
 8001272:	4413      	add	r3, r2
 8001274:	b298      	uxth	r0, r3
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	b29a      	uxth	r2, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b29b      	uxth	r3, r3
 800127e:	4413      	add	r3, r2
 8001280:	b29b      	uxth	r3, r3
 8001282:	8b3a      	ldrh	r2, [r7, #24]
 8001284:	4619      	mov	r1, r3
 8001286:	f7ff fce3 	bl	8000c50 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	b29a      	uxth	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	b29b      	uxth	r3, r3
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	b298      	uxth	r0, r3
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	b29a      	uxth	r2, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	4413      	add	r3, r2
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	8b3a      	ldrh	r2, [r7, #24]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fcd3 	bl	8000c50 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4413      	add	r3, r2
 80012b4:	b298      	uxth	r0, r3
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	8b3a      	ldrh	r2, [r7, #24]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fcc3 	bl	8000c50 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b298      	uxth	r0, r3
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	8b3a      	ldrh	r2, [r7, #24]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fcb3 	bl	8000c50 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	b298      	uxth	r0, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4413      	add	r3, r2
 8001300:	b29b      	uxth	r3, r3
 8001302:	8b3a      	ldrh	r2, [r7, #24]
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff fca3 	bl	8000c50 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	b29a      	uxth	r2, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b29b      	uxth	r3, r3
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	b298      	uxth	r0, r3
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	b29a      	uxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	b29b      	uxth	r3, r3
 800131e:	4413      	add	r3, r2
 8001320:	b29b      	uxth	r3, r3
 8001322:	8b3a      	ldrh	r2, [r7, #24]
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fc93 	bl	8000c50 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	b29a      	uxth	r2, r3
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b29b      	uxth	r3, r3
 8001332:	4413      	add	r3, r2
 8001334:	b298      	uxth	r0, r3
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	b29a      	uxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	b29b      	uxth	r3, r3
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	b29b      	uxth	r3, r3
 8001342:	8b3a      	ldrh	r2, [r7, #24]
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fc83 	bl	8000c50 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	b29a      	uxth	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b29b      	uxth	r3, r3
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	b298      	uxth	r0, r3
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	b29b      	uxth	r3, r3
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	b29b      	uxth	r3, r3
 8001362:	8b3a      	ldrh	r2, [r7, #24]
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff fc73 	bl	8000c50 <lcd_DrawPoint>
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b08a      	sub	sp, #40	; 0x28
 8001376:	af02      	add	r7, sp, #8
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	4613      	mov	r3, r2
 8001380:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	f1c3 0303 	rsb	r3, r3, #3
 8001392:	613b      	str	r3, [r7, #16]


	if (fill)
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	2b00      	cmp	r3, #0
 8001398:	d04f      	beq.n	800143a <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 800139a:	e029      	b.n	80013f0 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e00a      	b.n	80013b8 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	68b9      	ldr	r1, [r7, #8]
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f7ff ff55 	bl	800125c <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	429a      	cmp	r2, r3
 80013be:	ddf0      	ble.n	80013a2 <lcd_DrawCircle+0x30>

			if (d < 0) {
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da06      	bge.n	80013d4 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	009a      	lsls	r2, r3, #2
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4413      	add	r3, r2
 80013ce:	3306      	adds	r3, #6
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	e00a      	b.n	80013ea <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80013d4:	69fa      	ldr	r2, [r7, #28]
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	009a      	lsls	r2, r3, #2
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4413      	add	r3, r2
 80013e0:	330a      	adds	r3, #10
 80013e2:	613b      	str	r3, [r7, #16]
				y--;
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	ddd1      	ble.n	800139c <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80013f8:	e023      	b.n	8001442 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	68b9      	ldr	r1, [r7, #8]
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f7ff ff29 	bl	800125c <_draw_circle_8>
			if (d < 0) {
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	2b00      	cmp	r3, #0
 800140e:	da06      	bge.n	800141e <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	009a      	lsls	r2, r3, #2
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4413      	add	r3, r2
 8001418:	3306      	adds	r3, #6
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	e00a      	b.n	8001434 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 800141e:	69fa      	ldr	r2, [r7, #28]
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	009a      	lsls	r2, r3, #2
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4413      	add	r3, r2
 800142a:	330a      	adds	r3, #10
 800142c:	613b      	str	r3, [r7, #16]
				y--;
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	3b01      	subs	r3, #1
 8001432:	61bb      	str	r3, [r7, #24]
			x++;
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	3301      	adds	r3, #1
 8001438:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	429a      	cmp	r2, r3
 8001440:	dddb      	ble.n	80013fa <lcd_DrawCircle+0x88>
}
 8001442:	bf00      	nop
 8001444:	3720      	adds	r7, #32
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <led7_init>:
uint8_t led7seg[4] = {0, 1, 2, 3}; //4 index
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;
uint16_t led7_index = 0;

void led7_init(){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001450:	2201      	movs	r2, #1
 8001452:	2140      	movs	r1, #64	; 0x40
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <led7_init+0x14>)
 8001456:	f001 fa2b 	bl	80028b0 <HAL_GPIO_WritePin>
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40021800 	.word	0x40021800

08001464 <led7_Scan>:

void led7_Scan(){
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001468:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <led7_Scan+0x104>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	b29a      	uxth	r2, r3
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <led7_Scan+0x104>)
 8001472:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001474:	4b3d      	ldr	r3, [pc, #244]	; (800156c <led7_Scan+0x108>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <led7_Scan+0x10c>)
 800147c:	5c9b      	ldrb	r3, [r3, r2]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	4b39      	ldr	r3, [pc, #228]	; (8001568 <led7_Scan+0x104>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	b21b      	sxth	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b21b      	sxth	r3, r3
 800148c:	b29a      	uxth	r2, r3
 800148e:	4b36      	ldr	r3, [pc, #216]	; (8001568 <led7_Scan+0x104>)
 8001490:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001492:	4b36      	ldr	r3, [pc, #216]	; (800156c <led7_Scan+0x108>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	2b03      	cmp	r3, #3
 8001498:	d846      	bhi.n	8001528 <led7_Scan+0xc4>
 800149a:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <led7_Scan+0x3c>)
 800149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a0:	080014b1 	.word	0x080014b1
 80014a4:	080014cf 	.word	0x080014cf
 80014a8:	080014ed 	.word	0x080014ed
 80014ac:	0800150b 	.word	0x0800150b
	case 0:
		spi_buffer |= 0x00b0;
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <led7_Scan+0x104>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <led7_Scan+0x104>)
 80014bc:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80014be:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <led7_Scan+0x104>)
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <led7_Scan+0x104>)
 80014ca:	801a      	strh	r2, [r3, #0]
		break;
 80014cc:	e02d      	b.n	800152a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <led7_Scan+0x104>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <led7_Scan+0x104>)
 80014da:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <led7_Scan+0x104>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	f023 0320 	bic.w	r3, r3, #32
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <led7_Scan+0x104>)
 80014e8:	801a      	strh	r2, [r3, #0]
		break;
 80014ea:	e01e      	b.n	800152a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <led7_Scan+0x104>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <led7_Scan+0x104>)
 80014f8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <led7_Scan+0x104>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	f023 0310 	bic.w	r3, r3, #16
 8001502:	b29a      	uxth	r2, r3
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <led7_Scan+0x104>)
 8001506:	801a      	strh	r2, [r3, #0]
		break;
 8001508:	e00f      	b.n	800152a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <led7_Scan+0x104>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001512:	b29a      	uxth	r2, r3
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <led7_Scan+0x104>)
 8001516:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <led7_Scan+0x104>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001520:	b29a      	uxth	r2, r3
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <led7_Scan+0x104>)
 8001524:	801a      	strh	r2, [r3, #0]
		break;
 8001526:	e000      	b.n	800152a <led7_Scan+0xc6>
	default:
		break;
 8001528:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <led7_Scan+0x108>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	425a      	negs	r2, r3
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	f002 0203 	and.w	r2, r2, #3
 800153a:	bf58      	it	pl
 800153c:	4253      	negpl	r3, r2
 800153e:	b29a      	uxth	r2, r3
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <led7_Scan+0x108>)
 8001542:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	2140      	movs	r1, #64	; 0x40
 8001548:	480a      	ldr	r0, [pc, #40]	; (8001574 <led7_Scan+0x110>)
 800154a:	f001 f9b1 	bl	80028b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 800154e:	2301      	movs	r3, #1
 8001550:	2202      	movs	r2, #2
 8001552:	4905      	ldr	r1, [pc, #20]	; (8001568 <led7_Scan+0x104>)
 8001554:	4808      	ldr	r0, [pc, #32]	; (8001578 <led7_Scan+0x114>)
 8001556:	f002 f820 	bl	800359a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800155a:	2201      	movs	r2, #1
 800155c:	2140      	movs	r1, #64	; 0x40
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <led7_Scan+0x110>)
 8001560:	f001 f9a6 	bl	80028b0 <HAL_GPIO_WritePin>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000010 	.word	0x20000010
 800156c:	20000048 	.word	0x20000048
 8001570:	2000000c 	.word	0x2000000c
 8001574:	40021800 	.word	0x40021800
 8001578:	2000017c 	.word	0x2000017c

0800157c <lcdRedGreen>:
 *      Author: ADMIN
 */

#include "led_lcd.h"

void lcdRedGreen(){
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af02      	add	r7, sp, #8
	lcd_DrawCircle(40, 180, RED, 20, 1);
 8001582:	2301      	movs	r3, #1
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2314      	movs	r3, #20
 8001588:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800158c:	21b4      	movs	r1, #180	; 0xb4
 800158e:	2028      	movs	r0, #40	; 0x28
 8001590:	f7ff feef 	bl	8001372 <lcd_DrawCircle>
	lcd_DrawCircle(160, 50, GREEN, 20, 1);
 8001594:	2301      	movs	r3, #1
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2314      	movs	r3, #20
 800159a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800159e:	2132      	movs	r1, #50	; 0x32
 80015a0:	20a0      	movs	r0, #160	; 0xa0
 80015a2:	f7ff fee6 	bl	8001372 <lcd_DrawCircle>
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <lcdRedAmber>:
void lcdRedAmber(){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af02      	add	r7, sp, #8
	lcd_DrawCircle(40, 180, RED, 20, 1);
 80015b2:	2301      	movs	r3, #1
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2314      	movs	r3, #20
 80015b8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80015bc:	21b4      	movs	r1, #180	; 0xb4
 80015be:	2028      	movs	r0, #40	; 0x28
 80015c0:	f7ff fed7 	bl	8001372 <lcd_DrawCircle>
	lcd_DrawCircle(120, 50, YELLOW, 20, 1);
 80015c4:	2301      	movs	r3, #1
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2314      	movs	r3, #20
 80015ca:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80015ce:	2132      	movs	r1, #50	; 0x32
 80015d0:	2078      	movs	r0, #120	; 0x78
 80015d2:	f7ff fece 	bl	8001372 <lcd_DrawCircle>
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <lcdGreenRed>:
void lcdGreenRed(){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af02      	add	r7, sp, #8
	lcd_DrawCircle(40, 100, GREEN, 20, 1);
 80015e2:	2301      	movs	r3, #1
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2314      	movs	r3, #20
 80015e8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80015ec:	2164      	movs	r1, #100	; 0x64
 80015ee:	2028      	movs	r0, #40	; 0x28
 80015f0:	f7ff febf 	bl	8001372 <lcd_DrawCircle>
	lcd_DrawCircle(80, 50, RED, 20, 1);
 80015f4:	2301      	movs	r3, #1
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2314      	movs	r3, #20
 80015fa:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80015fe:	2132      	movs	r1, #50	; 0x32
 8001600:	2050      	movs	r0, #80	; 0x50
 8001602:	f7ff feb6 	bl	8001372 <lcd_DrawCircle>
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <lcdAmberRed>:
void lcdAmberRed(){
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af02      	add	r7, sp, #8
	lcd_DrawCircle(40, 140, YELLOW, 20, 1);
 8001612:	2301      	movs	r3, #1
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2314      	movs	r3, #20
 8001618:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800161c:	218c      	movs	r1, #140	; 0x8c
 800161e:	2028      	movs	r0, #40	; 0x28
 8001620:	f7ff fea7 	bl	8001372 <lcd_DrawCircle>
	lcd_DrawCircle(80, 50, RED, 20, 1);
 8001624:	2301      	movs	r3, #1
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2314      	movs	r3, #20
 800162a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800162e:	2132      	movs	r1, #50	; 0x32
 8001630:	2050      	movs	r0, #80	; 0x50
 8001632:	f7ff fe9e 	bl	8001372 <lcd_DrawCircle>
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <blinkyRed>:

void blinkyRed(){
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af02      	add	r7, sp, #8
	if (counter > 10){
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <blinkyRed+0x44>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b0a      	cmp	r3, #10
 8001648:	dd04      	ble.n	8001654 <blinkyRed+0x18>
		lcd_Clear(WHITE);
 800164a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800164e:	f7ff facd 	bl	8000bec <lcd_Clear>
	}
	else {
		lcd_DrawCircle(40, 180, RED, 20, 1);
		lcd_DrawCircle(80, 50, RED, 20, 1);
	}
}
 8001652:	e011      	b.n	8001678 <blinkyRed+0x3c>
		lcd_DrawCircle(40, 180, RED, 20, 1);
 8001654:	2301      	movs	r3, #1
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2314      	movs	r3, #20
 800165a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800165e:	21b4      	movs	r1, #180	; 0xb4
 8001660:	2028      	movs	r0, #40	; 0x28
 8001662:	f7ff fe86 	bl	8001372 <lcd_DrawCircle>
		lcd_DrawCircle(80, 50, RED, 20, 1);
 8001666:	2301      	movs	r3, #1
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2314      	movs	r3, #20
 800166c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001670:	2132      	movs	r1, #50	; 0x32
 8001672:	2050      	movs	r0, #80	; 0x50
 8001674:	f7ff fe7d 	bl	8001372 <lcd_DrawCircle>
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000044 	.word	0x20000044

08001684 <blinkyAmber>:
void blinkyAmber(){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af02      	add	r7, sp, #8
	if (counter > 10){
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <blinkyAmber+0x44>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b0a      	cmp	r3, #10
 8001690:	dd04      	ble.n	800169c <blinkyAmber+0x18>
		lcd_Clear(WHITE);
 8001692:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001696:	f7ff faa9 	bl	8000bec <lcd_Clear>
	}
	else {
		lcd_DrawCircle(120, 50, YELLOW, 20, 1);
		lcd_DrawCircle(40, 140, YELLOW, 20, 1);
	}
}
 800169a:	e011      	b.n	80016c0 <blinkyAmber+0x3c>
		lcd_DrawCircle(120, 50, YELLOW, 20, 1);
 800169c:	2301      	movs	r3, #1
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2314      	movs	r3, #20
 80016a2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80016a6:	2132      	movs	r1, #50	; 0x32
 80016a8:	2078      	movs	r0, #120	; 0x78
 80016aa:	f7ff fe62 	bl	8001372 <lcd_DrawCircle>
		lcd_DrawCircle(40, 140, YELLOW, 20, 1);
 80016ae:	2301      	movs	r3, #1
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2314      	movs	r3, #20
 80016b4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80016b8:	218c      	movs	r1, #140	; 0x8c
 80016ba:	2028      	movs	r0, #40	; 0x28
 80016bc:	f7ff fe59 	bl	8001372 <lcd_DrawCircle>
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000044 	.word	0x20000044

080016cc <blinkyGreen>:
void blinkyGreen(){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af02      	add	r7, sp, #8
	if (counter > 10){
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <blinkyGreen+0x44>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b0a      	cmp	r3, #10
 80016d8:	dd04      	ble.n	80016e4 <blinkyGreen+0x18>
		lcd_Clear(WHITE);
 80016da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016de:	f7ff fa85 	bl	8000bec <lcd_Clear>
	}
	else {
		lcd_DrawCircle(40, 100, GREEN, 20, 1);
		lcd_DrawCircle(160, 50, GREEN, 20, 1);
	}
}
 80016e2:	e011      	b.n	8001708 <blinkyGreen+0x3c>
		lcd_DrawCircle(40, 100, GREEN, 20, 1);
 80016e4:	2301      	movs	r3, #1
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2314      	movs	r3, #20
 80016ea:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80016ee:	2164      	movs	r1, #100	; 0x64
 80016f0:	2028      	movs	r0, #40	; 0x28
 80016f2:	f7ff fe3e 	bl	8001372 <lcd_DrawCircle>
		lcd_DrawCircle(160, 50, GREEN, 20, 1);
 80016f6:	2301      	movs	r3, #1
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2314      	movs	r3, #20
 80016fc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001700:	2132      	movs	r1, #50	; 0x32
 8001702:	20a0      	movs	r0, #160	; 0xa0
 8001704:	f7ff fe35 	bl	8001372 <lcd_DrawCircle>
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000044 	.word	0x20000044

08001714 <showMode>:

void showMode(){
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, mode, 2, GREEN, BLACK, 24);
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <showMode+0x48>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	b29a      	uxth	r2, r3
 8001720:	2318      	movs	r3, #24
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	2300      	movs	r3, #0
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	2302      	movs	r3, #2
 8001730:	2164      	movs	r1, #100	; 0x64
 8001732:	2046      	movs	r0, #70	; 0x46
 8001734:	f7ff fb90 	bl	8000e58 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, temp, 2, GREEN, BLACK, 24);
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <showMode+0x4c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	b29a      	uxth	r2, r3
 800173e:	2318      	movs	r3, #24
 8001740:	9302      	str	r3, [sp, #8]
 8001742:	2300      	movs	r3, #0
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2302      	movs	r3, #2
 800174e:	2164      	movs	r1, #100	; 0x64
 8001750:	206e      	movs	r0, #110	; 0x6e
 8001752:	f7ff fb81 	bl	8000e58 <lcd_ShowIntNum>
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000084 	.word	0x20000084
 8001760:	2000007c 	.word	0x2000007c

08001764 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001768:	f000 fccc 	bl	8002104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176c:	f000 f82a 	bl	80017c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001770:	f7ff f8a4 	bl	80008bc <MX_GPIO_Init>
  MX_TIM2_Init();
 8001774:	f000 fc08 	bl	8001f88 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001778:	f000 f9fc 	bl	8001b74 <MX_SPI1_Init>
  MX_FSMC_Init();
 800177c:	f7ff f824 	bl	80007c8 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001780:	f7ff f988 	bl	8000a94 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001784:	f000 fc6a 	bl	800205c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001788:	f000 f886 	bl	8001898 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  while(!flag_timer2);
 800178c:	bf00      	nop
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <main+0x58>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0fb      	beq.n	800178e <main+0x2a>
	  flag_timer2 = 0;
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <main+0x58>)
 8001798:	2200      	movs	r2, #0
 800179a:	801a      	strh	r2, [r3, #0]
	  counter++;
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <main+0x5c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <main+0x5c>)
 80017a4:	6013      	str	r3, [r2, #0]
	  test_led();
 80017a6:	f000 f897 	bl	80018d8 <test_led>
	  button_Scan();
 80017aa:	f7fe fe95 	bl	80004d8 <button_Scan>
	  //test_lcd();
	  //ds3231_ReadTime();
	  //displayTime();
	  //test_button();
	  input_process();
 80017ae:	f000 f89d 	bl	80018ec <input_process>
	  fsm_auto();
 80017b2:	f7fe ff21 	bl	80005f8 <fsm_auto>
	  fsm_manual();
 80017b6:	f7fe ffc7 	bl	8000748 <fsm_manual>
	  while(!flag_timer2);
 80017ba:	e7e7      	b.n	800178c <main+0x28>
 80017bc:	2000004a 	.word	0x2000004a
 80017c0:	20000044 	.word	0x20000044

080017c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b094      	sub	sp, #80	; 0x50
 80017c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ca:	f107 0320 	add.w	r3, r7, #32
 80017ce:	2230      	movs	r2, #48	; 0x30
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 f982 	bl	8005adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e8:	2300      	movs	r3, #0
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	4b28      	ldr	r3, [pc, #160]	; (8001890 <SystemClock_Config+0xcc>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	4a27      	ldr	r2, [pc, #156]	; (8001890 <SystemClock_Config+0xcc>)
 80017f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f6:	6413      	str	r3, [r2, #64]	; 0x40
 80017f8:	4b25      	ldr	r3, [pc, #148]	; (8001890 <SystemClock_Config+0xcc>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001804:	2300      	movs	r3, #0
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	4b22      	ldr	r3, [pc, #136]	; (8001894 <SystemClock_Config+0xd0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a21      	ldr	r2, [pc, #132]	; (8001894 <SystemClock_Config+0xd0>)
 800180e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <SystemClock_Config+0xd0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001820:	2302      	movs	r3, #2
 8001822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001824:	2301      	movs	r3, #1
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001828:	2310      	movs	r3, #16
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182c:	2302      	movs	r3, #2
 800182e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001830:	2300      	movs	r3, #0
 8001832:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001834:	2308      	movs	r3, #8
 8001836:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001838:	23a8      	movs	r3, #168	; 0xa8
 800183a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800183c:	2302      	movs	r3, #2
 800183e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001840:	2304      	movs	r3, #4
 8001842:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	4618      	mov	r0, r3
 800184a:	f001 f9a9 	bl	8002ba0 <HAL_RCC_OscConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001854:	f000 f938 	bl	8001ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001858:	230f      	movs	r3, #15
 800185a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800185c:	2302      	movs	r3, #2
 800185e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001864:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001868:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800186a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	2105      	movs	r1, #5
 8001876:	4618      	mov	r0, r3
 8001878:	f001 fc0a 	bl	8003090 <HAL_RCC_ClockConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001882:	f000 f921 	bl	8001ac8 <Error_Handler>
  }
}
 8001886:	bf00      	nop
 8001888:	3750      	adds	r7, #80	; 0x50
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800
 8001894:	40007000 	.word	0x40007000

08001898 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2120      	movs	r1, #32
 80018a0:	480c      	ldr	r0, [pc, #48]	; (80018d4 <system_init+0x3c>)
 80018a2:	f001 f805 	bl	80028b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2140      	movs	r1, #64	; 0x40
 80018aa:	480a      	ldr	r0, [pc, #40]	; (80018d4 <system_init+0x3c>)
 80018ac:	f001 f800 	bl	80028b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2110      	movs	r1, #16
 80018b4:	4807      	ldr	r0, [pc, #28]	; (80018d4 <system_init+0x3c>)
 80018b6:	f000 fffb 	bl	80028b0 <HAL_GPIO_WritePin>
	  timer_init();
 80018ba:	f000 f90b 	bl	8001ad4 <timer_init>
	  led7_init();
 80018be:	f7ff fdc5 	bl	800144c <led7_init>
	  button_init();
 80018c2:	f7fe fdfd 	bl	80004c0 <button_init>
	  lcd_init();
 80018c6:	f7ff fb69 	bl	8000f9c <lcd_init>
	  //ds3231_init();
	  setTimer2(50);
 80018ca:	2032      	movs	r0, #50	; 0x32
 80018cc:	f000 f90c 	bl	8001ae8 <setTimer2>
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000

080018d8 <test_led>:

void test_led(){
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 80018dc:	2110      	movs	r1, #16
 80018de:	4802      	ldr	r0, [pc, #8]	; (80018e8 <test_led+0x10>)
 80018e0:	f000 ffff 	bl	80028e2 <HAL_GPIO_TogglePin>
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40021000 	.word	0x40021000

080018ec <input_process>:

void input_process(){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	switch (status) {
 80018f0:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <input_process+0x1bc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b0d      	cmp	r3, #13
 80018f6:	f200 80c4 	bhi.w	8001a82 <input_process+0x196>
 80018fa:	a201      	add	r2, pc, #4	; (adr r2, 8001900 <input_process+0x14>)
 80018fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001900:	080019a1 	.word	0x080019a1
 8001904:	08001939 	.word	0x08001939
 8001908:	08001953 	.word	0x08001953
 800190c:	0800196d 	.word	0x0800196d
 8001910:	08001987 	.word	0x08001987
 8001914:	08001a83 	.word	0x08001a83
 8001918:	08001a83 	.word	0x08001a83
 800191c:	08001a83 	.word	0x08001a83
 8001920:	08001a83 	.word	0x08001a83
 8001924:	08001a83 	.word	0x08001a83
 8001928:	08001a83 	.word	0x08001a83
 800192c:	080019b9 	.word	0x080019b9
 8001930:	080019f3 	.word	0x080019f3
 8001934:	08001a2d 	.word	0x08001a2d
		case RED_GREEN:
			if (button_count[0] == 1){
 8001938:	4b5c      	ldr	r3, [pc, #368]	; (8001aac <input_process+0x1c0>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	f040 80a2 	bne.w	8001a86 <input_process+0x19a>
				status = RED_MANUAL;
 8001942:	4b59      	ldr	r3, [pc, #356]	; (8001aa8 <input_process+0x1bc>)
 8001944:	220b      	movs	r2, #11
 8001946:	601a      	str	r2, [r3, #0]
				tempRed = timerRed;
 8001948:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <input_process+0x1c4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a59      	ldr	r2, [pc, #356]	; (8001ab4 <input_process+0x1c8>)
 800194e:	6013      	str	r3, [r2, #0]
			}
			break;
 8001950:	e099      	b.n	8001a86 <input_process+0x19a>
		case RED_AMBER:
			if (button_count[0] == 1){
 8001952:	4b56      	ldr	r3, [pc, #344]	; (8001aac <input_process+0x1c0>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	f040 8097 	bne.w	8001a8a <input_process+0x19e>
				status = RED_MANUAL;
 800195c:	4b52      	ldr	r3, [pc, #328]	; (8001aa8 <input_process+0x1bc>)
 800195e:	220b      	movs	r2, #11
 8001960:	601a      	str	r2, [r3, #0]
				tempRed = timerRed;
 8001962:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <input_process+0x1c4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a53      	ldr	r2, [pc, #332]	; (8001ab4 <input_process+0x1c8>)
 8001968:	6013      	str	r3, [r2, #0]
			}
			break;
 800196a:	e08e      	b.n	8001a8a <input_process+0x19e>
		case GREEN_RED:
			if (button_count[0] == 1){
 800196c:	4b4f      	ldr	r3, [pc, #316]	; (8001aac <input_process+0x1c0>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	f040 808c 	bne.w	8001a8e <input_process+0x1a2>
				status = RED_MANUAL;
 8001976:	4b4c      	ldr	r3, [pc, #304]	; (8001aa8 <input_process+0x1bc>)
 8001978:	220b      	movs	r2, #11
 800197a:	601a      	str	r2, [r3, #0]
				tempRed = timerRed;
 800197c:	4b4c      	ldr	r3, [pc, #304]	; (8001ab0 <input_process+0x1c4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a4c      	ldr	r2, [pc, #304]	; (8001ab4 <input_process+0x1c8>)
 8001982:	6013      	str	r3, [r2, #0]
			}
			break;
 8001984:	e083      	b.n	8001a8e <input_process+0x1a2>
		case AMBER_RED:
			if (button_count[0] == 1){
 8001986:	4b49      	ldr	r3, [pc, #292]	; (8001aac <input_process+0x1c0>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	2b01      	cmp	r3, #1
 800198c:	f040 8081 	bne.w	8001a92 <input_process+0x1a6>
				status = RED_MANUAL;
 8001990:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <input_process+0x1bc>)
 8001992:	220b      	movs	r2, #11
 8001994:	601a      	str	r2, [r3, #0]
				tempRed = timerRed;
 8001996:	4b46      	ldr	r3, [pc, #280]	; (8001ab0 <input_process+0x1c4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a46      	ldr	r2, [pc, #280]	; (8001ab4 <input_process+0x1c8>)
 800199c:	6013      	str	r3, [r2, #0]
			}
			break;
 800199e:	e078      	b.n	8001a92 <input_process+0x1a6>
		case INIT:
			if (button_count[0] == 1){
 80019a0:	4b42      	ldr	r3, [pc, #264]	; (8001aac <input_process+0x1c0>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d176      	bne.n	8001a96 <input_process+0x1aa>
				status = RED_MANUAL;
 80019a8:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <input_process+0x1bc>)
 80019aa:	220b      	movs	r2, #11
 80019ac:	601a      	str	r2, [r3, #0]
				tempRed = timerRed;
 80019ae:	4b40      	ldr	r3, [pc, #256]	; (8001ab0 <input_process+0x1c4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a40      	ldr	r2, [pc, #256]	; (8001ab4 <input_process+0x1c8>)
 80019b4:	6013      	str	r3, [r2, #0]
			}
			break;
 80019b6:	e06e      	b.n	8001a96 <input_process+0x1aa>
		case RED_MANUAL:
			if (button_count[0] == 1){
 80019b8:	4b3c      	ldr	r3, [pc, #240]	; (8001aac <input_process+0x1c0>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d106      	bne.n	80019ce <input_process+0xe2>
				status = AMBER_MANUAL;
 80019c0:	4b39      	ldr	r3, [pc, #228]	; (8001aa8 <input_process+0x1bc>)
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
				tempAmber = timerAmber;
 80019c6:	4b3c      	ldr	r3, [pc, #240]	; (8001ab8 <input_process+0x1cc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a3c      	ldr	r2, [pc, #240]	; (8001abc <input_process+0x1d0>)
 80019cc:	6013      	str	r3, [r2, #0]
			}
			if (button_count[1] == 1){
 80019ce:	4b37      	ldr	r3, [pc, #220]	; (8001aac <input_process+0x1c0>)
 80019d0:	885b      	ldrh	r3, [r3, #2]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d104      	bne.n	80019e0 <input_process+0xf4>
				tempRed++;
 80019d6:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <input_process+0x1c8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	4a35      	ldr	r2, [pc, #212]	; (8001ab4 <input_process+0x1c8>)
 80019de:	6013      	str	r3, [r2, #0]
			}
			if (button_count[2] == 1){
 80019e0:	4b32      	ldr	r3, [pc, #200]	; (8001aac <input_process+0x1c0>)
 80019e2:	889b      	ldrh	r3, [r3, #4]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d158      	bne.n	8001a9a <input_process+0x1ae>
				timerRed = tempRed;
 80019e8:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <input_process+0x1c8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a30      	ldr	r2, [pc, #192]	; (8001ab0 <input_process+0x1c4>)
 80019ee:	6013      	str	r3, [r2, #0]
			}
			break;
 80019f0:	e053      	b.n	8001a9a <input_process+0x1ae>
		case AMBER_MANUAL:
			if (button_count[0] == 1){
 80019f2:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <input_process+0x1c0>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d106      	bne.n	8001a08 <input_process+0x11c>
				status = GREEN_MANUAL;
 80019fa:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <input_process+0x1bc>)
 80019fc:	220d      	movs	r2, #13
 80019fe:	601a      	str	r2, [r3, #0]
				tempGreen = timerGreen;
 8001a00:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <input_process+0x1d4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a2f      	ldr	r2, [pc, #188]	; (8001ac4 <input_process+0x1d8>)
 8001a06:	6013      	str	r3, [r2, #0]
			}
			if (button_count[1] == 1){
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <input_process+0x1c0>)
 8001a0a:	885b      	ldrh	r3, [r3, #2]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d104      	bne.n	8001a1a <input_process+0x12e>
				tempAmber++;
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <input_process+0x1d0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3301      	adds	r3, #1
 8001a16:	4a29      	ldr	r2, [pc, #164]	; (8001abc <input_process+0x1d0>)
 8001a18:	6013      	str	r3, [r2, #0]
			}
			if (button_count[2] == 1){
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <input_process+0x1c0>)
 8001a1c:	889b      	ldrh	r3, [r3, #4]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d13d      	bne.n	8001a9e <input_process+0x1b2>
				timerAmber= tempAmber;
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <input_process+0x1d0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a24      	ldr	r2, [pc, #144]	; (8001ab8 <input_process+0x1cc>)
 8001a28:	6013      	str	r3, [r2, #0]
			}
			break;
 8001a2a:	e038      	b.n	8001a9e <input_process+0x1b2>
		case GREEN_MANUAL:
			if (button_count[0] == 1){
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <input_process+0x1c0>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d114      	bne.n	8001a5e <input_process+0x172>
				status = RED_GREEN;
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <input_process+0x1bc>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]
				if (timerRed != timerAmber + timerGreen){
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <input_process+0x1cc>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <input_process+0x1d4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	441a      	add	r2, r3
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <input_process+0x1c4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d006      	beq.n	8001a5a <input_process+0x16e>
					timerRed = timerAmber + timerGreen;
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <input_process+0x1cc>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <input_process+0x1d4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a16      	ldr	r2, [pc, #88]	; (8001ab0 <input_process+0x1c4>)
 8001a58:	6013      	str	r3, [r2, #0]
				}
				fsm_auto_init();
 8001a5a:	f7fe fda9 	bl	80005b0 <fsm_auto_init>
			}
			if (button_count[1] == 1){
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <input_process+0x1c0>)
 8001a60:	885b      	ldrh	r3, [r3, #2]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d104      	bne.n	8001a70 <input_process+0x184>
				tempGreen++;
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <input_process+0x1d8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	4a15      	ldr	r2, [pc, #84]	; (8001ac4 <input_process+0x1d8>)
 8001a6e:	6013      	str	r3, [r2, #0]
			}
			if (button_count[2] == 1){
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <input_process+0x1c0>)
 8001a72:	889b      	ldrh	r3, [r3, #4]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d114      	bne.n	8001aa2 <input_process+0x1b6>
				timerGreen = tempGreen;
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <input_process+0x1d8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <input_process+0x1d4>)
 8001a7e:	6013      	str	r3, [r2, #0]
			}
			break;
 8001a80:	e00f      	b.n	8001aa2 <input_process+0x1b6>
		default:
			break;
 8001a82:	bf00      	nop
 8001a84:	e00e      	b.n	8001aa4 <input_process+0x1b8>
			break;
 8001a86:	bf00      	nop
 8001a88:	e00c      	b.n	8001aa4 <input_process+0x1b8>
			break;
 8001a8a:	bf00      	nop
 8001a8c:	e00a      	b.n	8001aa4 <input_process+0x1b8>
			break;
 8001a8e:	bf00      	nop
 8001a90:	e008      	b.n	8001aa4 <input_process+0x1b8>
			break;
 8001a92:	bf00      	nop
 8001a94:	e006      	b.n	8001aa4 <input_process+0x1b8>
			break;
 8001a96:	bf00      	nop
 8001a98:	e004      	b.n	8001aa4 <input_process+0x1b8>
			break;
 8001a9a:	bf00      	nop
 8001a9c:	e002      	b.n	8001aa4 <input_process+0x1b8>
			break;
 8001a9e:	bf00      	nop
 8001aa0:	e000      	b.n	8001aa4 <input_process+0x1b8>
			break;
 8001aa2:	bf00      	nop
	}
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000040 	.word	0x20000040
 8001aac:	20000058 	.word	0x20000058
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000078 	.word	0x20000078
 8001ab8:	20000004 	.word	0x20000004
 8001abc:	20000088 	.word	0x20000088
 8001ac0:	20000008 	.word	0x20000008
 8001ac4:	20000094 	.word	0x20000094

08001ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001acc:	b672      	cpsid	i
}
 8001ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <Error_Handler+0x8>
	...

08001ad4 <timer_init>:
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;



void timer_init(){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <timer_init+0x10>)
 8001ada:	f002 fb11 	bl	8004100 <HAL_TIM_Base_Start_IT>
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200001d4 	.word	0x200001d4

08001ae8 <setTimer2>:
	timer1_MUL = duration / TIMER_CYCLE_2;
	timer1_counter = timer1_MUL;
	flag_timer1 = 0;
}*/

void setTimer2(uint16_t duration){
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration / TIMER_CYCLE_2;
 8001af2:	4a08      	ldr	r2, [pc, #32]	; (8001b14 <setTimer2+0x2c>)
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <setTimer2+0x2c>)
 8001afa:	881a      	ldrh	r2, [r3, #0]
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <setTimer2+0x30>)
 8001afe:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <setTimer2+0x34>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	801a      	strh	r2, [r3, #0]
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	2000004e 	.word	0x2000004e
 8001b18:	2000004c 	.word	0x2000004c
 8001b1c:	2000004a 	.word	0x2000004a

08001b20 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b30:	d116      	bne.n	8001b60 <HAL_TIM_PeriodElapsedCallback+0x40>
			if(timer1_counter == 0) {
				flag_timer1 = 1;
				timer1_counter = timer1_MUL;
			}
		}*/
		if(timer2_counter > 0){
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d010      	beq.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b44:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001b56:	881a      	ldrh	r2, [r3, #0]
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b5a:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8001b5c:	f7ff fc82 	bl	8001464 <led7_Scan>
	}
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	2000004c 	.word	0x2000004c
 8001b6c:	2000004a 	.word	0x2000004a
 8001b70:	2000004e 	.word	0x2000004e

08001b74 <MX_SPI1_Init>:
  * @param None
  * @retval None
  */

void MX_SPI1_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <MX_SPI1_Init+0x64>)
 8001b7a:	4a18      	ldr	r2, [pc, #96]	; (8001bdc <MX_SPI1_Init+0x68>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <MX_SPI1_Init+0x64>)
 8001b80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <MX_SPI1_Init+0x64>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <MX_SPI1_Init+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <MX_SPI1_Init+0x64>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <MX_SPI1_Init+0x64>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_SPI1_Init+0x64>)
 8001ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_SPI1_Init+0x64>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <MX_SPI1_Init+0x64>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_SPI1_Init+0x64>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <MX_SPI1_Init+0x64>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_SPI1_Init+0x64>)
 8001bc0:	220a      	movs	r2, #10
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bc4:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <MX_SPI1_Init+0x64>)
 8001bc6:	f001 fc5f 	bl	8003488 <HAL_SPI_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bd0:	f7ff ff7a 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	2000017c 	.word	0x2000017c
 8001bdc:	40013000 	.word	0x40013000

08001be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <HAL_MspInit+0x4c>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	4a0f      	ldr	r2, [pc, #60]	; (8001c2c <HAL_MspInit+0x4c>)
 8001bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <HAL_MspInit+0x4c>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_MspInit+0x4c>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <HAL_MspInit+0x4c>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_MspInit+0x4c>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800

08001c30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <HAL_I2C_MspInit+0x84>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d12b      	bne.n	8001caa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_I2C_MspInit+0x88>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a17      	ldr	r2, [pc, #92]	; (8001cb8 <HAL_I2C_MspInit+0x88>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_I2C_MspInit+0x88>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c6e:	23c0      	movs	r3, #192	; 0xc0
 8001c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c72:	2312      	movs	r3, #18
 8001c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	4619      	mov	r1, r3
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <HAL_I2C_MspInit+0x8c>)
 8001c8a:	f000 fc75 	bl	8002578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_I2C_MspInit+0x88>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <HAL_I2C_MspInit+0x88>)
 8001c98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_I2C_MspInit+0x88>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001caa:	bf00      	nop
 8001cac:	3728      	adds	r7, #40	; 0x28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40005400 	.word	0x40005400
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020400 	.word	0x40020400

08001cc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <HAL_SPI_MspInit+0x84>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d12b      	bne.n	8001d3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	4a17      	ldr	r2, [pc, #92]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001cec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <HAL_SPI_MspInit+0x88>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d1a:	2338      	movs	r3, #56	; 0x38
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d2a:	2305      	movs	r3, #5
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	4805      	ldr	r0, [pc, #20]	; (8001d4c <HAL_SPI_MspInit+0x8c>)
 8001d36:	f000 fc1f 	bl	8002578 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	; 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40013000 	.word	0x40013000
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020400 	.word	0x40020400

08001d50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d60:	d115      	bne.n	8001d8e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_TIM_Base_MspInit+0x48>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <HAL_TIM_Base_MspInit+0x48>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6413      	str	r3, [r2, #64]	; 0x40
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_TIM_Base_MspInit+0x48>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	201c      	movs	r0, #28
 8001d84:	f000 fb2f 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d88:	201c      	movs	r0, #28
 8001d8a:	f000 fb48 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a1d      	ldr	r2, [pc, #116]	; (8001e30 <HAL_UART_MspInit+0x94>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d134      	bne.n	8001e28 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_UART_MspInit+0x98>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	4a1b      	ldr	r2, [pc, #108]	; (8001e34 <HAL_UART_MspInit+0x98>)
 8001dc8:	f043 0310 	orr.w	r3, r3, #16
 8001dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dce:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_UART_MspInit+0x98>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <HAL_UART_MspInit+0x98>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a14      	ldr	r2, [pc, #80]	; (8001e34 <HAL_UART_MspInit+0x98>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_UART_MspInit+0x98>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001df6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e08:	2307      	movs	r3, #7
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	4809      	ldr	r0, [pc, #36]	; (8001e38 <HAL_UART_MspInit+0x9c>)
 8001e14:	f000 fbb0 	bl	8002578 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	2025      	movs	r0, #37	; 0x25
 8001e1e:	f000 fae2 	bl	80023e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e22:	2025      	movs	r0, #37	; 0x25
 8001e24:	f000 fafb 	bl	800241e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e28:	bf00      	nop
 8001e2a:	3728      	adds	r7, #40	; 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40011000 	.word	0x40011000
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020000 	.word	0x40020000

08001e3c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001e50:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <HAL_FSMC_MspInit+0x88>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d131      	bne.n	8001ebc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <HAL_FSMC_MspInit+0x88>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <HAL_FSMC_MspInit+0x8c>)
 8001e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e66:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <HAL_FSMC_MspInit+0x8c>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6393      	str	r3, [r2, #56]	; 0x38
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <HAL_FSMC_MspInit+0x8c>)
 8001e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001e7a:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001e7e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e8c:	230c      	movs	r3, #12
 8001e8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	4619      	mov	r1, r3
 8001e94:	480d      	ldr	r0, [pc, #52]	; (8001ecc <HAL_FSMC_MspInit+0x90>)
 8001e96:	f000 fb6f 	bl	8002578 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001e9a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001e9e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001eac:	230c      	movs	r3, #12
 8001eae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4806      	ldr	r0, [pc, #24]	; (8001ed0 <HAL_FSMC_MspInit+0x94>)
 8001eb6:	f000 fb5f 	bl	8002578 <HAL_GPIO_Init>
 8001eba:	e000      	b.n	8001ebe <HAL_FSMC_MspInit+0x82>
    return;
 8001ebc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000050 	.word	0x20000050
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40020c00 	.word	0x40020c00

08001ed4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001edc:	f7ff ffae 	bl	8001e3c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <NMI_Handler+0x4>

08001eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef2:	e7fe      	b.n	8001ef2 <HardFault_Handler+0x4>

08001ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <MemManage_Handler+0x4>

08001efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <BusFault_Handler+0x4>

08001f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <UsageFault_Handler+0x4>

08001f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f34:	f000 f938 	bl	80021a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <TIM2_IRQHandler+0x10>)
 8001f42:	f002 f94d 	bl	80041e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200001d4 	.word	0x200001d4

08001f50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <USART1_IRQHandler+0x10>)
 8001f56:	f002 fe15 	bl	8004b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000021c 	.word	0x2000021c

08001f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <SystemInit+0x20>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <SystemInit+0x20>)
 8001f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8e:	f107 0308 	add.w	r3, r7, #8
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <MX_TIM2_Init+0x94>)
 8001fa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001faa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001fac:	4b1b      	ldr	r3, [pc, #108]	; (800201c <MX_TIM2_Init+0x94>)
 8001fae:	f240 3247 	movw	r2, #839	; 0x347
 8001fb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <MX_TIM2_Init+0x94>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <MX_TIM2_Init+0x94>)
 8001fbc:	2263      	movs	r2, #99	; 0x63
 8001fbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <MX_TIM2_Init+0x94>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <MX_TIM2_Init+0x94>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fcc:	4813      	ldr	r0, [pc, #76]	; (800201c <MX_TIM2_Init+0x94>)
 8001fce:	f002 f847 	bl	8004060 <HAL_TIM_Base_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001fd8:	f7ff fd76 	bl	8001ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fe2:	f107 0308 	add.w	r3, r7, #8
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	480c      	ldr	r0, [pc, #48]	; (800201c <MX_TIM2_Init+0x94>)
 8001fea:	f002 fa01 	bl	80043f0 <HAL_TIM_ConfigClockSource>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ff4:	f7ff fd68 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002000:	463b      	mov	r3, r7
 8002002:	4619      	mov	r1, r3
 8002004:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_TIM2_Init+0x94>)
 8002006:	f002 fc1d 	bl	8004844 <HAL_TIMEx_MasterConfigSynchronization>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002010:	f7ff fd5a 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002014:	bf00      	nop
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200001d4 	.word	0x200001d4

08002020 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a08      	ldr	r2, [pc, #32]	; (8002050 <HAL_UART_RxCpltCallback+0x30>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d10a      	bne.n	8002048 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002032:	230a      	movs	r3, #10
 8002034:	2201      	movs	r2, #1
 8002036:	4907      	ldr	r1, [pc, #28]	; (8002054 <HAL_UART_RxCpltCallback+0x34>)
 8002038:	4807      	ldr	r0, [pc, #28]	; (8002058 <HAL_UART_RxCpltCallback+0x38>)
 800203a:	f002 fce0 	bl	80049fe <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800203e:	2201      	movs	r2, #1
 8002040:	4904      	ldr	r1, [pc, #16]	; (8002054 <HAL_UART_RxCpltCallback+0x34>)
 8002042:	4805      	ldr	r0, [pc, #20]	; (8002058 <HAL_UART_RxCpltCallback+0x38>)
 8002044:	f002 fd6d 	bl	8004b22 <HAL_UART_Receive_IT>
	}
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40011000 	.word	0x40011000
 8002054:	20000054 	.word	0x20000054
 8002058:	2000021c 	.word	0x2000021c

0800205c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 8002062:	4a12      	ldr	r2, [pc, #72]	; (80020ac <MX_USART1_UART_Init+0x50>)
 8002064:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 8002068:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800206c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 8002082:	220c      	movs	r2, #12
 8002084:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 800208e:	2200      	movs	r2, #0
 8002090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002092:	4805      	ldr	r0, [pc, #20]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 8002094:	f002 fc66 	bl	8004964 <HAL_UART_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800209e:	f7ff fd13 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000021c 	.word	0x2000021c
 80020ac:	40011000 	.word	0x40011000

080020b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020b4:	480d      	ldr	r0, [pc, #52]	; (80020ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020b6:	490e      	ldr	r1, [pc, #56]	; (80020f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020b8:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020bc:	e002      	b.n	80020c4 <LoopCopyDataInit>

080020be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c2:	3304      	adds	r3, #4

080020c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c8:	d3f9      	bcc.n	80020be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ca:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020cc:	4c0b      	ldr	r4, [pc, #44]	; (80020fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d0:	e001      	b.n	80020d6 <LoopFillZerobss>

080020d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d4:	3204      	adds	r2, #4

080020d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d8:	d3fb      	bcc.n	80020d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020da:	f7ff ff43 	bl	8001f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020de:	f003 fcd9 	bl	8005a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020e2:	f7ff fb3f 	bl	8001764 <main>
  bx  lr    
 80020e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80020f4:	08008aac 	.word	0x08008aac
  ldr r2, =_sbss
 80020f8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80020fc:	20000264 	.word	0x20000264

08002100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002100:	e7fe      	b.n	8002100 <ADC_IRQHandler>
	...

08002104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <HAL_Init+0x40>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <HAL_Init+0x40>)
 800210e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <HAL_Init+0x40>)
 800211a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800211e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a07      	ldr	r2, [pc, #28]	; (8002144 <HAL_Init+0x40>)
 8002126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800212c:	2003      	movs	r0, #3
 800212e:	f000 f94f 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002132:	200f      	movs	r0, #15
 8002134:	f000 f808 	bl	8002148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002138:	f7ff fd52 	bl	8001be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023c00 	.word	0x40023c00

08002148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_InitTick+0x54>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_InitTick+0x58>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4619      	mov	r1, r3
 800215a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f967 	bl	800243a <HAL_SYSTICK_Config>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e00e      	b.n	8002194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b0f      	cmp	r3, #15
 800217a:	d80a      	bhi.n	8002192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800217c:	2200      	movs	r2, #0
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	f000 f92f 	bl	80023e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002188:	4a06      	ldr	r2, [pc, #24]	; (80021a4 <HAL_InitTick+0x5c>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e000      	b.n	8002194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000014 	.word	0x20000014
 80021a0:	2000001c 	.word	0x2000001c
 80021a4:	20000018 	.word	0x20000018

080021a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_IncTick+0x20>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_IncTick+0x24>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	4a04      	ldr	r2, [pc, #16]	; (80021cc <HAL_IncTick+0x24>)
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	2000001c 	.word	0x2000001c
 80021cc:	20000260 	.word	0x20000260

080021d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return uwTick;
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <HAL_GetTick+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000260 	.word	0x20000260

080021e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f0:	f7ff ffee 	bl	80021d0 <HAL_GetTick>
 80021f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d005      	beq.n	800220e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_Delay+0x44>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800220e:	bf00      	nop
 8002210:	f7ff ffde 	bl	80021d0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	429a      	cmp	r2, r3
 800221e:	d8f7      	bhi.n	8002210 <HAL_Delay+0x28>
  {
  }
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	2000001c 	.word	0x2000001c

08002230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800224c:	4013      	ands	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800225c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002262:	4a04      	ldr	r2, [pc, #16]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	60d3      	str	r3, [r2, #12]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <__NVIC_GetPriorityGrouping+0x18>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	f003 0307 	and.w	r3, r3, #7
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	db0b      	blt.n	80022be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	4907      	ldr	r1, [pc, #28]	; (80022cc <__NVIC_EnableIRQ+0x38>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	2001      	movs	r0, #1
 80022b6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000e100 	.word	0xe000e100

080022d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	db0a      	blt.n	80022fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	490c      	ldr	r1, [pc, #48]	; (800231c <__NVIC_SetPriority+0x4c>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f8:	e00a      	b.n	8002310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4908      	ldr	r1, [pc, #32]	; (8002320 <__NVIC_SetPriority+0x50>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3b04      	subs	r3, #4
 8002308:	0112      	lsls	r2, r2, #4
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	440b      	add	r3, r1
 800230e:	761a      	strb	r2, [r3, #24]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f1c3 0307 	rsb	r3, r3, #7
 800233e:	2b04      	cmp	r3, #4
 8002340:	bf28      	it	cs
 8002342:	2304      	movcs	r3, #4
 8002344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3304      	adds	r3, #4
 800234a:	2b06      	cmp	r3, #6
 800234c:	d902      	bls.n	8002354 <NVIC_EncodePriority+0x30>
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3b03      	subs	r3, #3
 8002352:	e000      	b.n	8002356 <NVIC_EncodePriority+0x32>
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	f04f 32ff 	mov.w	r2, #4294967295
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	401a      	ands	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800236c:	f04f 31ff 	mov.w	r1, #4294967295
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43d9      	mvns	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	4313      	orrs	r3, r2
         );
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800239c:	d301      	bcc.n	80023a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239e:	2301      	movs	r3, #1
 80023a0:	e00f      	b.n	80023c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a2:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <SysTick_Config+0x40>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023aa:	210f      	movs	r1, #15
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f7ff ff8e 	bl	80022d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <SysTick_Config+0x40>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <SysTick_Config+0x40>)
 80023bc:	2207      	movs	r2, #7
 80023be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010

080023d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff29 	bl	8002230 <__NVIC_SetPriorityGrouping>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f8:	f7ff ff3e 	bl	8002278 <__NVIC_GetPriorityGrouping>
 80023fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f7ff ff8e 	bl	8002324 <NVIC_EncodePriority>
 8002408:	4602      	mov	r2, r0
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff5d 	bl	80022d0 <__NVIC_SetPriority>
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff31 	bl	8002294 <__NVIC_EnableIRQ>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffa2 	bl	800238c <SysTick_Config>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002460:	f7ff feb6 	bl	80021d0 <HAL_GetTick>
 8002464:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d008      	beq.n	8002484 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2280      	movs	r2, #128	; 0x80
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e052      	b.n	800252a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0216 	bic.w	r2, r2, #22
 8002492:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d103      	bne.n	80024b4 <HAL_DMA_Abort+0x62>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d007      	beq.n	80024c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0208 	bic.w	r2, r2, #8
 80024c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d4:	e013      	b.n	80024fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024d6:	f7ff fe7b 	bl	80021d0 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b05      	cmp	r3, #5
 80024e2:	d90c      	bls.n	80024fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e015      	b.n	800252a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e4      	bne.n	80024d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	223f      	movs	r2, #63	; 0x3f
 8002512:	409a      	lsls	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d004      	beq.n	8002550 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2280      	movs	r2, #128	; 0x80
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e00c      	b.n	800256a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2205      	movs	r2, #5
 8002554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	e16b      	b.n	800286c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002594:	2201      	movs	r2, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	f040 815a 	bne.w	8002866 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d005      	beq.n	80025ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d130      	bne.n	800262c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	2203      	movs	r2, #3
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 0201 	and.w	r2, r3, #1
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b03      	cmp	r3, #3
 8002636:	d017      	beq.n	8002668 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	2203      	movs	r2, #3
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d123      	bne.n	80026bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	08da      	lsrs	r2, r3, #3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3208      	adds	r2, #8
 800267c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	220f      	movs	r2, #15
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	08da      	lsrs	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3208      	adds	r2, #8
 80026b6:	69b9      	ldr	r1, [r7, #24]
 80026b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	2203      	movs	r2, #3
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0203 	and.w	r2, r3, #3
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80b4 	beq.w	8002866 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	4b60      	ldr	r3, [pc, #384]	; (8002884 <HAL_GPIO_Init+0x30c>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	4a5f      	ldr	r2, [pc, #380]	; (8002884 <HAL_GPIO_Init+0x30c>)
 8002708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800270c:	6453      	str	r3, [r2, #68]	; 0x44
 800270e:	4b5d      	ldr	r3, [pc, #372]	; (8002884 <HAL_GPIO_Init+0x30c>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800271a:	4a5b      	ldr	r2, [pc, #364]	; (8002888 <HAL_GPIO_Init+0x310>)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3302      	adds	r3, #2
 8002722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	220f      	movs	r2, #15
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a52      	ldr	r2, [pc, #328]	; (800288c <HAL_GPIO_Init+0x314>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d02b      	beq.n	800279e <HAL_GPIO_Init+0x226>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a51      	ldr	r2, [pc, #324]	; (8002890 <HAL_GPIO_Init+0x318>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d025      	beq.n	800279a <HAL_GPIO_Init+0x222>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a50      	ldr	r2, [pc, #320]	; (8002894 <HAL_GPIO_Init+0x31c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01f      	beq.n	8002796 <HAL_GPIO_Init+0x21e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4f      	ldr	r2, [pc, #316]	; (8002898 <HAL_GPIO_Init+0x320>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d019      	beq.n	8002792 <HAL_GPIO_Init+0x21a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a4e      	ldr	r2, [pc, #312]	; (800289c <HAL_GPIO_Init+0x324>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_GPIO_Init+0x216>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a4d      	ldr	r2, [pc, #308]	; (80028a0 <HAL_GPIO_Init+0x328>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00d      	beq.n	800278a <HAL_GPIO_Init+0x212>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4c      	ldr	r2, [pc, #304]	; (80028a4 <HAL_GPIO_Init+0x32c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d007      	beq.n	8002786 <HAL_GPIO_Init+0x20e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a4b      	ldr	r2, [pc, #300]	; (80028a8 <HAL_GPIO_Init+0x330>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <HAL_GPIO_Init+0x20a>
 800277e:	2307      	movs	r3, #7
 8002780:	e00e      	b.n	80027a0 <HAL_GPIO_Init+0x228>
 8002782:	2308      	movs	r3, #8
 8002784:	e00c      	b.n	80027a0 <HAL_GPIO_Init+0x228>
 8002786:	2306      	movs	r3, #6
 8002788:	e00a      	b.n	80027a0 <HAL_GPIO_Init+0x228>
 800278a:	2305      	movs	r3, #5
 800278c:	e008      	b.n	80027a0 <HAL_GPIO_Init+0x228>
 800278e:	2304      	movs	r3, #4
 8002790:	e006      	b.n	80027a0 <HAL_GPIO_Init+0x228>
 8002792:	2303      	movs	r3, #3
 8002794:	e004      	b.n	80027a0 <HAL_GPIO_Init+0x228>
 8002796:	2302      	movs	r3, #2
 8002798:	e002      	b.n	80027a0 <HAL_GPIO_Init+0x228>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_GPIO_Init+0x228>
 800279e:	2300      	movs	r3, #0
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	f002 0203 	and.w	r2, r2, #3
 80027a6:	0092      	lsls	r2, r2, #2
 80027a8:	4093      	lsls	r3, r2
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027b0:	4935      	ldr	r1, [pc, #212]	; (8002888 <HAL_GPIO_Init+0x310>)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	089b      	lsrs	r3, r3, #2
 80027b6:	3302      	adds	r3, #2
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027be:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_GPIO_Init+0x334>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027e2:	4a32      	ldr	r2, [pc, #200]	; (80028ac <HAL_GPIO_Init+0x334>)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027e8:	4b30      	ldr	r3, [pc, #192]	; (80028ac <HAL_GPIO_Init+0x334>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800280c:	4a27      	ldr	r2, [pc, #156]	; (80028ac <HAL_GPIO_Init+0x334>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002812:	4b26      	ldr	r3, [pc, #152]	; (80028ac <HAL_GPIO_Init+0x334>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002836:	4a1d      	ldr	r2, [pc, #116]	; (80028ac <HAL_GPIO_Init+0x334>)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <HAL_GPIO_Init+0x334>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002860:	4a12      	ldr	r2, [pc, #72]	; (80028ac <HAL_GPIO_Init+0x334>)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3301      	adds	r3, #1
 800286a:	61fb      	str	r3, [r7, #28]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2b0f      	cmp	r3, #15
 8002870:	f67f ae90 	bls.w	8002594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	3724      	adds	r7, #36	; 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
 8002888:	40013800 	.word	0x40013800
 800288c:	40020000 	.word	0x40020000
 8002890:	40020400 	.word	0x40020400
 8002894:	40020800 	.word	0x40020800
 8002898:	40020c00 	.word	0x40020c00
 800289c:	40021000 	.word	0x40021000
 80028a0:	40021400 	.word	0x40021400
 80028a4:	40021800 	.word	0x40021800
 80028a8:	40021c00 	.word	0x40021c00
 80028ac:	40013c00 	.word	0x40013c00

080028b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
 80028bc:	4613      	mov	r3, r2
 80028be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028c0:	787b      	ldrb	r3, [r7, #1]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028cc:	e003      	b.n	80028d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ce:	887b      	ldrh	r3, [r7, #2]
 80028d0:	041a      	lsls	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	619a      	str	r2, [r3, #24]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028f4:	887a      	ldrh	r2, [r7, #2]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4013      	ands	r3, r2
 80028fa:	041a      	lsls	r2, r3, #16
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43d9      	mvns	r1, r3
 8002900:	887b      	ldrh	r3, [r7, #2]
 8002902:	400b      	ands	r3, r1
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	619a      	str	r2, [r3, #24]
}
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e12b      	b.n	8002b82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff f976 	bl	8001c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2224      	movs	r2, #36	; 0x24
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0201 	bic.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800296a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800297a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800297c:	f000 fd5c 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 8002980:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4a81      	ldr	r2, [pc, #516]	; (8002b8c <HAL_I2C_Init+0x274>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d807      	bhi.n	800299c <HAL_I2C_Init+0x84>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4a80      	ldr	r2, [pc, #512]	; (8002b90 <HAL_I2C_Init+0x278>)
 8002990:	4293      	cmp	r3, r2
 8002992:	bf94      	ite	ls
 8002994:	2301      	movls	r3, #1
 8002996:	2300      	movhi	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	e006      	b.n	80029aa <HAL_I2C_Init+0x92>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4a7d      	ldr	r2, [pc, #500]	; (8002b94 <HAL_I2C_Init+0x27c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	bf94      	ite	ls
 80029a4:	2301      	movls	r3, #1
 80029a6:	2300      	movhi	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e0e7      	b.n	8002b82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4a78      	ldr	r2, [pc, #480]	; (8002b98 <HAL_I2C_Init+0x280>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0c9b      	lsrs	r3, r3, #18
 80029bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a6a      	ldr	r2, [pc, #424]	; (8002b8c <HAL_I2C_Init+0x274>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d802      	bhi.n	80029ec <HAL_I2C_Init+0xd4>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	3301      	adds	r3, #1
 80029ea:	e009      	b.n	8002a00 <HAL_I2C_Init+0xe8>
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029f2:	fb02 f303 	mul.w	r3, r2, r3
 80029f6:	4a69      	ldr	r2, [pc, #420]	; (8002b9c <HAL_I2C_Init+0x284>)
 80029f8:	fba2 2303 	umull	r2, r3, r2, r3
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	3301      	adds	r3, #1
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	430b      	orrs	r3, r1
 8002a06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	495c      	ldr	r1, [pc, #368]	; (8002b8c <HAL_I2C_Init+0x274>)
 8002a1c:	428b      	cmp	r3, r1
 8002a1e:	d819      	bhi.n	8002a54 <HAL_I2C_Init+0x13c>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1e59      	subs	r1, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a2e:	1c59      	adds	r1, r3, #1
 8002a30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a34:	400b      	ands	r3, r1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_I2C_Init+0x138>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1e59      	subs	r1, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a48:	3301      	adds	r3, #1
 8002a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4e:	e051      	b.n	8002af4 <HAL_I2C_Init+0x1dc>
 8002a50:	2304      	movs	r3, #4
 8002a52:	e04f      	b.n	8002af4 <HAL_I2C_Init+0x1dc>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d111      	bne.n	8002a80 <HAL_I2C_Init+0x168>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1e58      	subs	r0, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	440b      	add	r3, r1
 8002a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	e012      	b.n	8002aa6 <HAL_I2C_Init+0x18e>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1e58      	subs	r0, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	0099      	lsls	r1, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a96:	3301      	adds	r3, #1
 8002a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_I2C_Init+0x196>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e022      	b.n	8002af4 <HAL_I2C_Init+0x1dc>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10e      	bne.n	8002ad4 <HAL_I2C_Init+0x1bc>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1e58      	subs	r0, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6859      	ldr	r1, [r3, #4]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	440b      	add	r3, r1
 8002ac4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ad2:	e00f      	b.n	8002af4 <HAL_I2C_Init+0x1dc>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1e58      	subs	r0, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	0099      	lsls	r1, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aea:	3301      	adds	r3, #1
 8002aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	6809      	ldr	r1, [r1, #0]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69da      	ldr	r2, [r3, #28]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6911      	ldr	r1, [r2, #16]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68d2      	ldr	r2, [r2, #12]
 8002b2e:	4311      	orrs	r1, r2
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	430b      	orrs	r3, r1
 8002b36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	000186a0 	.word	0x000186a0
 8002b90:	001e847f 	.word	0x001e847f
 8002b94:	003d08ff 	.word	0x003d08ff
 8002b98:	431bde83 	.word	0x431bde83
 8002b9c:	10624dd3 	.word	0x10624dd3

08002ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e264      	b.n	800307c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d075      	beq.n	8002caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bbe:	4ba3      	ldr	r3, [pc, #652]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d00c      	beq.n	8002be4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bca:	4ba0      	ldr	r3, [pc, #640]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d112      	bne.n	8002bfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd6:	4b9d      	ldr	r3, [pc, #628]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be2:	d10b      	bne.n	8002bfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	4b99      	ldr	r3, [pc, #612]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d05b      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x108>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d157      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e23f      	b.n	800307c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c04:	d106      	bne.n	8002c14 <HAL_RCC_OscConfig+0x74>
 8002c06:	4b91      	ldr	r3, [pc, #580]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a90      	ldr	r2, [pc, #576]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e01d      	b.n	8002c50 <HAL_RCC_OscConfig+0xb0>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x98>
 8002c1e:	4b8b      	ldr	r3, [pc, #556]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a8a      	ldr	r2, [pc, #552]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b88      	ldr	r3, [pc, #544]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a87      	ldr	r2, [pc, #540]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_OscConfig+0xb0>
 8002c38:	4b84      	ldr	r3, [pc, #528]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a83      	ldr	r2, [pc, #524]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b81      	ldr	r3, [pc, #516]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a80      	ldr	r2, [pc, #512]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d013      	beq.n	8002c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7ff faba 	bl	80021d0 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c60:	f7ff fab6 	bl	80021d0 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e204      	b.n	800307c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b76      	ldr	r3, [pc, #472]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0xc0>
 8002c7e:	e014      	b.n	8002caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7ff faa6 	bl	80021d0 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c88:	f7ff faa2 	bl	80021d0 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e1f0      	b.n	800307c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9a:	4b6c      	ldr	r3, [pc, #432]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0xe8>
 8002ca6:	e000      	b.n	8002caa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d063      	beq.n	8002d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cb6:	4b65      	ldr	r3, [pc, #404]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc2:	4b62      	ldr	r3, [pc, #392]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d11c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cce:	4b5f      	ldr	r3, [pc, #380]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d116      	bne.n	8002d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cda:	4b5c      	ldr	r3, [pc, #368]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x152>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e1c4      	b.n	800307c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf2:	4b56      	ldr	r3, [pc, #344]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4952      	ldr	r1, [pc, #328]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d06:	e03a      	b.n	8002d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d020      	beq.n	8002d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d10:	4b4f      	ldr	r3, [pc, #316]	; (8002e50 <HAL_RCC_OscConfig+0x2b0>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d16:	f7ff fa5b 	bl	80021d0 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d1e:	f7ff fa57 	bl	80021d0 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e1a5      	b.n	800307c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d30:	4b46      	ldr	r3, [pc, #280]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3c:	4b43      	ldr	r3, [pc, #268]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4940      	ldr	r1, [pc, #256]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]
 8002d50:	e015      	b.n	8002d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d52:	4b3f      	ldr	r3, [pc, #252]	; (8002e50 <HAL_RCC_OscConfig+0x2b0>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7ff fa3a 	bl	80021d0 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d60:	f7ff fa36 	bl	80021d0 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e184      	b.n	800307c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d72:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d030      	beq.n	8002dec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d016      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d92:	4b30      	ldr	r3, [pc, #192]	; (8002e54 <HAL_RCC_OscConfig+0x2b4>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d98:	f7ff fa1a 	bl	80021d0 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002da0:	f7ff fa16 	bl	80021d0 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e164      	b.n	800307c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db2:	4b26      	ldr	r3, [pc, #152]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x200>
 8002dbe:	e015      	b.n	8002dec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc0:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <HAL_RCC_OscConfig+0x2b4>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc6:	f7ff fa03 	bl	80021d0 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dce:	f7ff f9ff 	bl	80021d0 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e14d      	b.n	800307c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de0:	4b1a      	ldr	r3, [pc, #104]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f0      	bne.n	8002dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80a0 	beq.w	8002f3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfe:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10f      	bne.n	8002e2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a0e      	ldr	r2, [pc, #56]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1a:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e26:	2301      	movs	r3, #1
 8002e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCC_OscConfig+0x2b8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d121      	bne.n	8002e7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <HAL_RCC_OscConfig+0x2b8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a07      	ldr	r2, [pc, #28]	; (8002e58 <HAL_RCC_OscConfig+0x2b8>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e42:	f7ff f9c5 	bl	80021d0 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	e011      	b.n	8002e6e <HAL_RCC_OscConfig+0x2ce>
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	42470000 	.word	0x42470000
 8002e54:	42470e80 	.word	0x42470e80
 8002e58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5c:	f7ff f9b8 	bl	80021d0 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e106      	b.n	800307c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6e:	4b85      	ldr	r3, [pc, #532]	; (8003084 <HAL_RCC_OscConfig+0x4e4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d106      	bne.n	8002e90 <HAL_RCC_OscConfig+0x2f0>
 8002e82:	4b81      	ldr	r3, [pc, #516]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e86:	4a80      	ldr	r2, [pc, #512]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8e:	e01c      	b.n	8002eca <HAL_RCC_OscConfig+0x32a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d10c      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x312>
 8002e98:	4b7b      	ldr	r3, [pc, #492]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9c:	4a7a      	ldr	r2, [pc, #488]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002e9e:	f043 0304 	orr.w	r3, r3, #4
 8002ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea4:	4b78      	ldr	r3, [pc, #480]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	4a77      	ldr	r2, [pc, #476]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb0:	e00b      	b.n	8002eca <HAL_RCC_OscConfig+0x32a>
 8002eb2:	4b75      	ldr	r3, [pc, #468]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	4a74      	ldr	r2, [pc, #464]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ebe:	4b72      	ldr	r3, [pc, #456]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	4a71      	ldr	r2, [pc, #452]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d015      	beq.n	8002efe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed2:	f7ff f97d 	bl	80021d0 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7ff f979 	bl	80021d0 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e0c5      	b.n	800307c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef0:	4b65      	ldr	r3, [pc, #404]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0ee      	beq.n	8002eda <HAL_RCC_OscConfig+0x33a>
 8002efc:	e014      	b.n	8002f28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efe:	f7ff f967 	bl	80021d0 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f04:	e00a      	b.n	8002f1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7ff f963 	bl	80021d0 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e0af      	b.n	800307c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1c:	4b5a      	ldr	r3, [pc, #360]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ee      	bne.n	8002f06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d105      	bne.n	8002f3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2e:	4b56      	ldr	r3, [pc, #344]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	4a55      	ldr	r2, [pc, #340]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 809b 	beq.w	800307a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f44:	4b50      	ldr	r3, [pc, #320]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 030c 	and.w	r3, r3, #12
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d05c      	beq.n	800300a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d141      	bne.n	8002fdc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f58:	4b4c      	ldr	r3, [pc, #304]	; (800308c <HAL_RCC_OscConfig+0x4ec>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7ff f937 	bl	80021d0 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f66:	f7ff f933 	bl	80021d0 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e081      	b.n	800307c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f78:	4b43      	ldr	r3, [pc, #268]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f0      	bne.n	8002f66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69da      	ldr	r2, [r3, #28]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	019b      	lsls	r3, r3, #6
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	041b      	lsls	r3, r3, #16
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	061b      	lsls	r3, r3, #24
 8002fa8:	4937      	ldr	r1, [pc, #220]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fae:	4b37      	ldr	r3, [pc, #220]	; (800308c <HAL_RCC_OscConfig+0x4ec>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7ff f90c 	bl	80021d0 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7ff f908 	bl	80021d0 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e056      	b.n	800307c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fce:	4b2e      	ldr	r3, [pc, #184]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x41c>
 8002fda:	e04e      	b.n	800307a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fdc:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_RCC_OscConfig+0x4ec>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe2:	f7ff f8f5 	bl	80021d0 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fea:	f7ff f8f1 	bl	80021d0 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e03f      	b.n	800307c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffc:	4b22      	ldr	r3, [pc, #136]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f0      	bne.n	8002fea <HAL_RCC_OscConfig+0x44a>
 8003008:	e037      	b.n	800307a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e032      	b.n	800307c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003016:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_RCC_OscConfig+0x4e8>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d028      	beq.n	8003076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d121      	bne.n	8003076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d11a      	bne.n	8003076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003046:	4013      	ands	r3, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800304c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800304e:	4293      	cmp	r3, r2
 8003050:	d111      	bne.n	8003076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	3b01      	subs	r3, #1
 8003060:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d107      	bne.n	8003076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d001      	beq.n	800307a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40007000 	.word	0x40007000
 8003088:	40023800 	.word	0x40023800
 800308c:	42470060 	.word	0x42470060

08003090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0cc      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a4:	4b68      	ldr	r3, [pc, #416]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d90c      	bls.n	80030cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b65      	ldr	r3, [pc, #404]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b63      	ldr	r3, [pc, #396]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0b8      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d020      	beq.n	800311a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e4:	4b59      	ldr	r3, [pc, #356]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a58      	ldr	r2, [pc, #352]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030fc:	4b53      	ldr	r3, [pc, #332]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	4a52      	ldr	r2, [pc, #328]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003108:	4b50      	ldr	r3, [pc, #320]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	494d      	ldr	r1, [pc, #308]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	4313      	orrs	r3, r2
 8003118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d044      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d119      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e07f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d003      	beq.n	800314e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314a:	2b03      	cmp	r3, #3
 800314c:	d107      	bne.n	800315e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314e:	4b3f      	ldr	r3, [pc, #252]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e06f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315e:	4b3b      	ldr	r3, [pc, #236]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e067      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316e:	4b37      	ldr	r3, [pc, #220]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f023 0203 	bic.w	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4934      	ldr	r1, [pc, #208]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	4313      	orrs	r3, r2
 800317e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003180:	f7ff f826 	bl	80021d0 <HAL_GetTick>
 8003184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003186:	e00a      	b.n	800319e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003188:	f7ff f822 	bl	80021d0 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e04f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319e:	4b2b      	ldr	r3, [pc, #172]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 020c 	and.w	r2, r3, #12
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d1eb      	bne.n	8003188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031b0:	4b25      	ldr	r3, [pc, #148]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d20c      	bcs.n	80031d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031be:	4b22      	ldr	r3, [pc, #136]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e032      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e4:	4b19      	ldr	r3, [pc, #100]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4916      	ldr	r1, [pc, #88]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003202:	4b12      	ldr	r3, [pc, #72]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	490e      	ldr	r1, [pc, #56]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003216:	f000 f821 	bl	800325c <HAL_RCC_GetSysClockFreq>
 800321a:	4602      	mov	r2, r0
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	490a      	ldr	r1, [pc, #40]	; (8003250 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	5ccb      	ldrb	r3, [r1, r3]
 800322a:	fa22 f303 	lsr.w	r3, r2, r3
 800322e:	4a09      	ldr	r2, [pc, #36]	; (8003254 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_RCC_ClockConfig+0x1c8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe ff86 	bl	8002148 <HAL_InitTick>

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40023c00 	.word	0x40023c00
 800324c:	40023800 	.word	0x40023800
 8003250:	08008a84 	.word	0x08008a84
 8003254:	20000014 	.word	0x20000014
 8003258:	20000018 	.word	0x20000018

0800325c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800325c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	607b      	str	r3, [r7, #4]
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	2300      	movs	r3, #0
 800326e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003274:	4b67      	ldr	r3, [pc, #412]	; (8003414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 030c 	and.w	r3, r3, #12
 800327c:	2b08      	cmp	r3, #8
 800327e:	d00d      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0x40>
 8003280:	2b08      	cmp	r3, #8
 8003282:	f200 80bd 	bhi.w	8003400 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x34>
 800328a:	2b04      	cmp	r3, #4
 800328c:	d003      	beq.n	8003296 <HAL_RCC_GetSysClockFreq+0x3a>
 800328e:	e0b7      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003290:	4b61      	ldr	r3, [pc, #388]	; (8003418 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003292:	60bb      	str	r3, [r7, #8]
       break;
 8003294:	e0b7      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003296:	4b61      	ldr	r3, [pc, #388]	; (800341c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003298:	60bb      	str	r3, [r7, #8]
      break;
 800329a:	e0b4      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800329c:	4b5d      	ldr	r3, [pc, #372]	; (8003414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032a6:	4b5b      	ldr	r3, [pc, #364]	; (8003414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d04d      	beq.n	800334e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b2:	4b58      	ldr	r3, [pc, #352]	; (8003414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	099b      	lsrs	r3, r3, #6
 80032b8:	461a      	mov	r2, r3
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032c2:	f04f 0100 	mov.w	r1, #0
 80032c6:	ea02 0800 	and.w	r8, r2, r0
 80032ca:	ea03 0901 	and.w	r9, r3, r1
 80032ce:	4640      	mov	r0, r8
 80032d0:	4649      	mov	r1, r9
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	014b      	lsls	r3, r1, #5
 80032dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032e0:	0142      	lsls	r2, r0, #5
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	ebb0 0008 	subs.w	r0, r0, r8
 80032ea:	eb61 0109 	sbc.w	r1, r1, r9
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	018b      	lsls	r3, r1, #6
 80032f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032fc:	0182      	lsls	r2, r0, #6
 80032fe:	1a12      	subs	r2, r2, r0
 8003300:	eb63 0301 	sbc.w	r3, r3, r1
 8003304:	f04f 0000 	mov.w	r0, #0
 8003308:	f04f 0100 	mov.w	r1, #0
 800330c:	00d9      	lsls	r1, r3, #3
 800330e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003312:	00d0      	lsls	r0, r2, #3
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	eb12 0208 	adds.w	r2, r2, r8
 800331c:	eb43 0309 	adc.w	r3, r3, r9
 8003320:	f04f 0000 	mov.w	r0, #0
 8003324:	f04f 0100 	mov.w	r1, #0
 8003328:	0259      	lsls	r1, r3, #9
 800332a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800332e:	0250      	lsls	r0, r2, #9
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	461a      	mov	r2, r3
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	f7fc ff42 	bl	80001c8 <__aeabi_uldivmod>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4613      	mov	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e04a      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334e:	4b31      	ldr	r3, [pc, #196]	; (8003414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	099b      	lsrs	r3, r3, #6
 8003354:	461a      	mov	r2, r3
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	ea02 0400 	and.w	r4, r2, r0
 8003366:	ea03 0501 	and.w	r5, r3, r1
 800336a:	4620      	mov	r0, r4
 800336c:	4629      	mov	r1, r5
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	014b      	lsls	r3, r1, #5
 8003378:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800337c:	0142      	lsls	r2, r0, #5
 800337e:	4610      	mov	r0, r2
 8003380:	4619      	mov	r1, r3
 8003382:	1b00      	subs	r0, r0, r4
 8003384:	eb61 0105 	sbc.w	r1, r1, r5
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	018b      	lsls	r3, r1, #6
 8003392:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003396:	0182      	lsls	r2, r0, #6
 8003398:	1a12      	subs	r2, r2, r0
 800339a:	eb63 0301 	sbc.w	r3, r3, r1
 800339e:	f04f 0000 	mov.w	r0, #0
 80033a2:	f04f 0100 	mov.w	r1, #0
 80033a6:	00d9      	lsls	r1, r3, #3
 80033a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033ac:	00d0      	lsls	r0, r2, #3
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	1912      	adds	r2, r2, r4
 80033b4:	eb45 0303 	adc.w	r3, r5, r3
 80033b8:	f04f 0000 	mov.w	r0, #0
 80033bc:	f04f 0100 	mov.w	r1, #0
 80033c0:	0299      	lsls	r1, r3, #10
 80033c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033c6:	0290      	lsls	r0, r2, #10
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4610      	mov	r0, r2
 80033ce:	4619      	mov	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	461a      	mov	r2, r3
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	f7fc fef6 	bl	80001c8 <__aeabi_uldivmod>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4613      	mov	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	0c1b      	lsrs	r3, r3, #16
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	3301      	adds	r3, #1
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	60bb      	str	r3, [r7, #8]
      break;
 80033fe:	e002      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003402:	60bb      	str	r3, [r7, #8]
      break;
 8003404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003406:	68bb      	ldr	r3, [r7, #8]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	00f42400 	.word	0x00f42400
 800341c:	007a1200 	.word	0x007a1200

08003420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <HAL_RCC_GetHCLKFreq+0x14>)
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	20000014 	.word	0x20000014

08003438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800343c:	f7ff fff0 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003440:	4602      	mov	r2, r0
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	0a9b      	lsrs	r3, r3, #10
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	4903      	ldr	r1, [pc, #12]	; (800345c <HAL_RCC_GetPCLK1Freq+0x24>)
 800344e:	5ccb      	ldrb	r3, [r1, r3]
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	08008a94 	.word	0x08008a94

08003460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003464:	f7ff ffdc 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003468:	4602      	mov	r2, r0
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	0b5b      	lsrs	r3, r3, #13
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	4903      	ldr	r1, [pc, #12]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003476:	5ccb      	ldrb	r3, [r1, r3]
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40023800 	.word	0x40023800
 8003484:	08008a94 	.word	0x08008a94

08003488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e07b      	b.n	8003592 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d108      	bne.n	80034b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034aa:	d009      	beq.n	80034c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
 80034b2:	e005      	b.n	80034c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fe fbf0 	bl	8001cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003544:	ea42 0103 	orr.w	r1, r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	0c1b      	lsrs	r3, r3, #16
 800355e:	f003 0104 	and.w	r1, r3, #4
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	f003 0210 	and.w	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003580:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b088      	sub	sp, #32
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_SPI_Transmit+0x22>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e126      	b.n	800380a <HAL_SPI_Transmit+0x270>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035c4:	f7fe fe04 	bl	80021d0 <HAL_GetTick>
 80035c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d002      	beq.n	80035e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035da:	2302      	movs	r3, #2
 80035dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035de:	e10b      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_SPI_Transmit+0x52>
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d102      	bne.n	80035f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035f0:	e102      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2203      	movs	r2, #3
 80035f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	88fa      	ldrh	r2, [r7, #6]
 800360a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003638:	d10f      	bne.n	800365a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003648:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003658:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d007      	beq.n	8003678 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003676:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003680:	d14b      	bne.n	800371a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_SPI_Transmit+0xf6>
 800368a:	8afb      	ldrh	r3, [r7, #22]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d13e      	bne.n	800370e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	1c9a      	adds	r2, r3, #2
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036b4:	e02b      	b.n	800370e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d112      	bne.n	80036ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	881a      	ldrh	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	1c9a      	adds	r2, r3, #2
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80036e8:	e011      	b.n	800370e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ea:	f7fe fd71 	bl	80021d0 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d803      	bhi.n	8003702 <HAL_SPI_Transmit+0x168>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d102      	bne.n	8003708 <HAL_SPI_Transmit+0x16e>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d102      	bne.n	800370e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800370c:	e074      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ce      	bne.n	80036b6 <HAL_SPI_Transmit+0x11c>
 8003718:	e04c      	b.n	80037b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_SPI_Transmit+0x18e>
 8003722:	8afb      	ldrh	r3, [r7, #22]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d140      	bne.n	80037aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	330c      	adds	r3, #12
 8003732:	7812      	ldrb	r2, [r2, #0]
 8003734:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800374e:	e02c      	b.n	80037aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b02      	cmp	r3, #2
 800375c:	d113      	bne.n	8003786 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	330c      	adds	r3, #12
 8003768:	7812      	ldrb	r2, [r2, #0]
 800376a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	86da      	strh	r2, [r3, #54]	; 0x36
 8003784:	e011      	b.n	80037aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003786:	f7fe fd23 	bl	80021d0 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d803      	bhi.n	800379e <HAL_SPI_Transmit+0x204>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d102      	bne.n	80037a4 <HAL_SPI_Transmit+0x20a>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037a8:	e026      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1cd      	bne.n	8003750 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	6839      	ldr	r1, [r7, #0]
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fbcb 	bl	8003f54 <SPI_EndRxTxTransaction>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	77fb      	strb	r3, [r7, #31]
 80037f4:	e000      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80037f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003808:	7ffb      	ldrb	r3, [r7, #31]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3720      	adds	r7, #32
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b088      	sub	sp, #32
 8003816:	af02      	add	r7, sp, #8
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800382e:	d112      	bne.n	8003856 <HAL_SPI_Receive+0x44>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10e      	bne.n	8003856 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2204      	movs	r2, #4
 800383c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003840:	88fa      	ldrh	r2, [r7, #6]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	4613      	mov	r3, r2
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f8f1 	bl	8003a34 <HAL_SPI_TransmitReceive>
 8003852:	4603      	mov	r3, r0
 8003854:	e0ea      	b.n	8003a2c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_SPI_Receive+0x52>
 8003860:	2302      	movs	r3, #2
 8003862:	e0e3      	b.n	8003a2c <HAL_SPI_Receive+0x21a>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800386c:	f7fe fcb0 	bl	80021d0 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b01      	cmp	r3, #1
 800387c:	d002      	beq.n	8003884 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800387e:	2302      	movs	r3, #2
 8003880:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003882:	e0ca      	b.n	8003a1a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_SPI_Receive+0x7e>
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d102      	bne.n	8003896 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003894:	e0c1      	b.n	8003a1a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2204      	movs	r2, #4
 800389a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	88fa      	ldrh	r2, [r7, #6]
 80038ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038dc:	d10f      	bne.n	80038fe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b40      	cmp	r3, #64	; 0x40
 800390a:	d007      	beq.n	800391c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800391a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d162      	bne.n	80039ea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003924:	e02e      	b.n	8003984 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b01      	cmp	r3, #1
 8003932:	d115      	bne.n	8003960 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f103 020c 	add.w	r2, r3, #12
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003940:	7812      	ldrb	r2, [r2, #0]
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800395e:	e011      	b.n	8003984 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003960:	f7fe fc36 	bl	80021d0 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d803      	bhi.n	8003978 <HAL_SPI_Receive+0x166>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003976:	d102      	bne.n	800397e <HAL_SPI_Receive+0x16c>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d102      	bne.n	8003984 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003982:	e04a      	b.n	8003a1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1cb      	bne.n	8003926 <HAL_SPI_Receive+0x114>
 800398e:	e031      	b.n	80039f4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b01      	cmp	r3, #1
 800399c:	d113      	bne.n	80039c6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	b292      	uxth	r2, r2
 80039aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	1c9a      	adds	r2, r3, #2
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039c4:	e011      	b.n	80039ea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039c6:	f7fe fc03 	bl	80021d0 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d803      	bhi.n	80039de <HAL_SPI_Receive+0x1cc>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d102      	bne.n	80039e4 <HAL_SPI_Receive+0x1d2>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d102      	bne.n	80039ea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039e8:	e017      	b.n	8003a1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1cd      	bne.n	8003990 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	6839      	ldr	r1, [r7, #0]
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fa45 	bl	8003e88 <SPI_EndRxTransaction>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	75fb      	strb	r3, [r7, #23]
 8003a16:	e000      	b.n	8003a1a <HAL_SPI_Receive+0x208>
  }

error :
 8003a18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08c      	sub	sp, #48	; 0x30
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a42:	2301      	movs	r3, #1
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_SPI_TransmitReceive+0x26>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e18a      	b.n	8003d70 <HAL_SPI_TransmitReceive+0x33c>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a62:	f7fe fbb5 	bl	80021d0 <HAL_GetTick>
 8003a66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a78:	887b      	ldrh	r3, [r7, #2]
 8003a7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d00f      	beq.n	8003aa4 <HAL_SPI_TransmitReceive+0x70>
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a8a:	d107      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d103      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x68>
 8003a94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d003      	beq.n	8003aa4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003aa2:	e15b      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_SPI_TransmitReceive+0x82>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <HAL_SPI_TransmitReceive+0x82>
 8003ab0:	887b      	ldrh	r3, [r7, #2]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d103      	bne.n	8003abe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003abc:	e14e      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d003      	beq.n	8003ad2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2205      	movs	r2, #5
 8003ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	887a      	ldrh	r2, [r7, #2]
 8003ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	887a      	ldrh	r2, [r7, #2]
 8003ae8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	887a      	ldrh	r2, [r7, #2]
 8003af4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	887a      	ldrh	r2, [r7, #2]
 8003afa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d007      	beq.n	8003b26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2e:	d178      	bne.n	8003c22 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <HAL_SPI_TransmitReceive+0x10a>
 8003b38:	8b7b      	ldrh	r3, [r7, #26]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d166      	bne.n	8003c0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	881a      	ldrh	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	1c9a      	adds	r2, r3, #2
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b62:	e053      	b.n	8003c0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d11b      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x176>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d016      	beq.n	8003baa <HAL_SPI_TransmitReceive+0x176>
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d113      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	881a      	ldrh	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	1c9a      	adds	r2, r3, #2
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d119      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x1b8>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d014      	beq.n	8003bec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	b292      	uxth	r2, r2
 8003bce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	1c9a      	adds	r2, r3, #2
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003be8:	2301      	movs	r3, #1
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bec:	f7fe faf0 	bl	80021d0 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d807      	bhi.n	8003c0c <HAL_SPI_TransmitReceive+0x1d8>
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c02:	d003      	beq.n	8003c0c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c0a:	e0a7      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1a6      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x130>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1a1      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x130>
 8003c20:	e07c      	b.n	8003d1c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_SPI_TransmitReceive+0x1fc>
 8003c2a:	8b7b      	ldrh	r3, [r7, #26]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d16b      	bne.n	8003d08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	330c      	adds	r3, #12
 8003c3a:	7812      	ldrb	r2, [r2, #0]
 8003c3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c56:	e057      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d11c      	bne.n	8003ca0 <HAL_SPI_TransmitReceive+0x26c>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d017      	beq.n	8003ca0 <HAL_SPI_TransmitReceive+0x26c>
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d114      	bne.n	8003ca0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	7812      	ldrb	r2, [r2, #0]
 8003c82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d119      	bne.n	8003ce2 <HAL_SPI_TransmitReceive+0x2ae>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d014      	beq.n	8003ce2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ce2:	f7fe fa75 	bl	80021d0 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d803      	bhi.n	8003cfa <HAL_SPI_TransmitReceive+0x2c6>
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d102      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x2cc>
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d103      	bne.n	8003d08 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d06:	e029      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1a2      	bne.n	8003c58 <HAL_SPI_TransmitReceive+0x224>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d19d      	bne.n	8003c58 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f917 	bl	8003f54 <SPI_EndRxTxTransaction>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d006      	beq.n	8003d3a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d38:	e010      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	e000      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3730      	adds	r7, #48	; 0x30
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d88:	f7fe fa22 	bl	80021d0 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	4413      	add	r3, r2
 8003d96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d98:	f7fe fa1a 	bl	80021d0 <HAL_GetTick>
 8003d9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d9e:	4b39      	ldr	r3, [pc, #228]	; (8003e84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	015b      	lsls	r3, r3, #5
 8003da4:	0d1b      	lsrs	r3, r3, #20
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	fb02 f303 	mul.w	r3, r2, r3
 8003dac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dae:	e054      	b.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db6:	d050      	beq.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003db8:	f7fe fa0a 	bl	80021d0 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d902      	bls.n	8003dce <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d13d      	bne.n	8003e4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ddc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003de6:	d111      	bne.n	8003e0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df0:	d004      	beq.n	8003dfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfa:	d107      	bne.n	8003e0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e14:	d10f      	bne.n	8003e36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e017      	b.n	8003e7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4013      	ands	r3, r2
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	bf0c      	ite	eq
 8003e6a:	2301      	moveq	r3, #1
 8003e6c:	2300      	movne	r3, #0
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d19b      	bne.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000014 	.word	0x20000014

08003e88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e9c:	d111      	bne.n	8003ec2 <SPI_EndRxTransaction+0x3a>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea6:	d004      	beq.n	8003eb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb0:	d107      	bne.n	8003ec2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eca:	d12a      	bne.n	8003f22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed4:	d012      	beq.n	8003efc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2200      	movs	r2, #0
 8003ede:	2180      	movs	r1, #128	; 0x80
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f7ff ff49 	bl	8003d78 <SPI_WaitFlagStateUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d02d      	beq.n	8003f48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e026      	b.n	8003f4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2200      	movs	r2, #0
 8003f04:	2101      	movs	r1, #1
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f7ff ff36 	bl	8003d78 <SPI_WaitFlagStateUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01a      	beq.n	8003f48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	f043 0220 	orr.w	r2, r3, #32
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e013      	b.n	8003f4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f7ff ff23 	bl	8003d78 <SPI_WaitFlagStateUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3c:	f043 0220 	orr.w	r2, r3, #32
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e000      	b.n	8003f4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f60:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <SPI_EndRxTxTransaction+0x7c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1b      	ldr	r2, [pc, #108]	; (8003fd4 <SPI_EndRxTxTransaction+0x80>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	0d5b      	lsrs	r3, r3, #21
 8003f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f70:	fb02 f303 	mul.w	r3, r2, r3
 8003f74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f7e:	d112      	bne.n	8003fa6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2200      	movs	r2, #0
 8003f88:	2180      	movs	r1, #128	; 0x80
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f7ff fef4 	bl	8003d78 <SPI_WaitFlagStateUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d016      	beq.n	8003fc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9a:	f043 0220 	orr.w	r2, r3, #32
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e00f      	b.n	8003fc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbc:	2b80      	cmp	r3, #128	; 0x80
 8003fbe:	d0f2      	beq.n	8003fa6 <SPI_EndRxTxTransaction+0x52>
 8003fc0:	e000      	b.n	8003fc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003fc2:	bf00      	nop
  }

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000014 	.word	0x20000014
 8003fd4:	165e9f81 	.word	0x165e9f81

08003fd8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e034      	b.n	8004058 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f7fd ff66 	bl	8001ed4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3308      	adds	r3, #8
 8004010:	4619      	mov	r1, r3
 8004012:	4610      	mov	r0, r2
 8004014:	f001 fc6e 	bl	80058f4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	461a      	mov	r2, r3
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	f001 fcb8 	bl	8005998 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6858      	ldr	r0, [r3, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	f001 fced 	bl	8005a14 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	6892      	ldr	r2, [r2, #8]
 8004042:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	6892      	ldr	r2, [r2, #8]
 800404e:	f041 0101 	orr.w	r1, r1, #1
 8004052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e041      	b.n	80040f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fd fe62 	bl	8001d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	4619      	mov	r1, r3
 800409e:	4610      	mov	r0, r2
 80040a0:	f000 fa96 	bl	80045d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	d001      	beq.n	8004118 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e04e      	b.n	80041b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a23      	ldr	r2, [pc, #140]	; (80041c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d022      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x80>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004142:	d01d      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x80>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1f      	ldr	r2, [pc, #124]	; (80041c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d018      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x80>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1e      	ldr	r2, [pc, #120]	; (80041cc <HAL_TIM_Base_Start_IT+0xcc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d013      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x80>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a1c      	ldr	r2, [pc, #112]	; (80041d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00e      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x80>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d009      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x80>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a19      	ldr	r2, [pc, #100]	; (80041d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x80>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a18      	ldr	r2, [pc, #96]	; (80041dc <HAL_TIM_Base_Start_IT+0xdc>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d111      	bne.n	80041a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b06      	cmp	r3, #6
 8004190:	d010      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0201 	orr.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a2:	e007      	b.n	80041b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40010000 	.word	0x40010000
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40000800 	.word	0x40000800
 80041d0:	40000c00 	.word	0x40000c00
 80041d4:	40010400 	.word	0x40010400
 80041d8:	40014000 	.word	0x40014000
 80041dc:	40001800 	.word	0x40001800

080041e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d122      	bne.n	800423c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b02      	cmp	r3, #2
 8004202:	d11b      	bne.n	800423c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0202 	mvn.w	r2, #2
 800420c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f9b5 	bl	8004592 <HAL_TIM_IC_CaptureCallback>
 8004228:	e005      	b.n	8004236 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f9a7 	bl	800457e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f9b8 	bl	80045a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b04      	cmp	r3, #4
 8004248:	d122      	bne.n	8004290 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b04      	cmp	r3, #4
 8004256:	d11b      	bne.n	8004290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0204 	mvn.w	r2, #4
 8004260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2202      	movs	r2, #2
 8004266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f98b 	bl	8004592 <HAL_TIM_IC_CaptureCallback>
 800427c:	e005      	b.n	800428a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f97d 	bl	800457e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f98e 	bl	80045a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b08      	cmp	r3, #8
 800429c:	d122      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d11b      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0208 	mvn.w	r2, #8
 80042b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2204      	movs	r2, #4
 80042ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f961 	bl	8004592 <HAL_TIM_IC_CaptureCallback>
 80042d0:	e005      	b.n	80042de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f953 	bl	800457e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f964 	bl	80045a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	2b10      	cmp	r3, #16
 80042f0:	d122      	bne.n	8004338 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b10      	cmp	r3, #16
 80042fe:	d11b      	bne.n	8004338 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0210 	mvn.w	r2, #16
 8004308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2208      	movs	r2, #8
 800430e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f937 	bl	8004592 <HAL_TIM_IC_CaptureCallback>
 8004324:	e005      	b.n	8004332 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f929 	bl	800457e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f93a 	bl	80045a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b01      	cmp	r3, #1
 8004344:	d10e      	bne.n	8004364 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b01      	cmp	r3, #1
 8004352:	d107      	bne.n	8004364 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0201 	mvn.w	r2, #1
 800435c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fd fbde 	bl	8001b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	2b80      	cmp	r3, #128	; 0x80
 8004370:	d10e      	bne.n	8004390 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437c:	2b80      	cmp	r3, #128	; 0x80
 800437e:	d107      	bne.n	8004390 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fae0 	bl	8004950 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d10e      	bne.n	80043bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a8:	2b40      	cmp	r3, #64	; 0x40
 80043aa:	d107      	bne.n	80043bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f8ff 	bl	80045ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d10e      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d107      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0220 	mvn.w	r2, #32
 80043e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 faaa 	bl	800493c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_TIM_ConfigClockSource+0x1c>
 8004408:	2302      	movs	r3, #2
 800440a:	e0b4      	b.n	8004576 <HAL_TIM_ConfigClockSource+0x186>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800442a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004432:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004444:	d03e      	beq.n	80044c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800444a:	f200 8087 	bhi.w	800455c <HAL_TIM_ConfigClockSource+0x16c>
 800444e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004452:	f000 8086 	beq.w	8004562 <HAL_TIM_ConfigClockSource+0x172>
 8004456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800445a:	d87f      	bhi.n	800455c <HAL_TIM_ConfigClockSource+0x16c>
 800445c:	2b70      	cmp	r3, #112	; 0x70
 800445e:	d01a      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0xa6>
 8004460:	2b70      	cmp	r3, #112	; 0x70
 8004462:	d87b      	bhi.n	800455c <HAL_TIM_ConfigClockSource+0x16c>
 8004464:	2b60      	cmp	r3, #96	; 0x60
 8004466:	d050      	beq.n	800450a <HAL_TIM_ConfigClockSource+0x11a>
 8004468:	2b60      	cmp	r3, #96	; 0x60
 800446a:	d877      	bhi.n	800455c <HAL_TIM_ConfigClockSource+0x16c>
 800446c:	2b50      	cmp	r3, #80	; 0x50
 800446e:	d03c      	beq.n	80044ea <HAL_TIM_ConfigClockSource+0xfa>
 8004470:	2b50      	cmp	r3, #80	; 0x50
 8004472:	d873      	bhi.n	800455c <HAL_TIM_ConfigClockSource+0x16c>
 8004474:	2b40      	cmp	r3, #64	; 0x40
 8004476:	d058      	beq.n	800452a <HAL_TIM_ConfigClockSource+0x13a>
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	d86f      	bhi.n	800455c <HAL_TIM_ConfigClockSource+0x16c>
 800447c:	2b30      	cmp	r3, #48	; 0x30
 800447e:	d064      	beq.n	800454a <HAL_TIM_ConfigClockSource+0x15a>
 8004480:	2b30      	cmp	r3, #48	; 0x30
 8004482:	d86b      	bhi.n	800455c <HAL_TIM_ConfigClockSource+0x16c>
 8004484:	2b20      	cmp	r3, #32
 8004486:	d060      	beq.n	800454a <HAL_TIM_ConfigClockSource+0x15a>
 8004488:	2b20      	cmp	r3, #32
 800448a:	d867      	bhi.n	800455c <HAL_TIM_ConfigClockSource+0x16c>
 800448c:	2b00      	cmp	r3, #0
 800448e:	d05c      	beq.n	800454a <HAL_TIM_ConfigClockSource+0x15a>
 8004490:	2b10      	cmp	r3, #16
 8004492:	d05a      	beq.n	800454a <HAL_TIM_ConfigClockSource+0x15a>
 8004494:	e062      	b.n	800455c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6899      	ldr	r1, [r3, #8]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f000 f9ad 	bl	8004804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	609a      	str	r2, [r3, #8]
      break;
 80044c2:	e04f      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	6899      	ldr	r1, [r3, #8]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f000 f996 	bl	8004804 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044e6:	609a      	str	r2, [r3, #8]
      break;
 80044e8:	e03c      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	6859      	ldr	r1, [r3, #4]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	461a      	mov	r2, r3
 80044f8:	f000 f90a 	bl	8004710 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2150      	movs	r1, #80	; 0x50
 8004502:	4618      	mov	r0, r3
 8004504:	f000 f963 	bl	80047ce <TIM_ITRx_SetConfig>
      break;
 8004508:	e02c      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6859      	ldr	r1, [r3, #4]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	461a      	mov	r2, r3
 8004518:	f000 f929 	bl	800476e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2160      	movs	r1, #96	; 0x60
 8004522:	4618      	mov	r0, r3
 8004524:	f000 f953 	bl	80047ce <TIM_ITRx_SetConfig>
      break;
 8004528:	e01c      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	6859      	ldr	r1, [r3, #4]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	461a      	mov	r2, r3
 8004538:	f000 f8ea 	bl	8004710 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2140      	movs	r1, #64	; 0x40
 8004542:	4618      	mov	r0, r3
 8004544:	f000 f943 	bl	80047ce <TIM_ITRx_SetConfig>
      break;
 8004548:	e00c      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4619      	mov	r1, r3
 8004554:	4610      	mov	r0, r2
 8004556:	f000 f93a 	bl	80047ce <TIM_ITRx_SetConfig>
      break;
 800455a:	e003      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
      break;
 8004560:	e000      	b.n	8004564 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004562:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004574:	7bfb      	ldrb	r3, [r7, #15]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
	...

080045d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a40      	ldr	r2, [pc, #256]	; (80046e4 <TIM_Base_SetConfig+0x114>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d013      	beq.n	8004610 <TIM_Base_SetConfig+0x40>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ee:	d00f      	beq.n	8004610 <TIM_Base_SetConfig+0x40>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a3d      	ldr	r2, [pc, #244]	; (80046e8 <TIM_Base_SetConfig+0x118>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00b      	beq.n	8004610 <TIM_Base_SetConfig+0x40>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a3c      	ldr	r2, [pc, #240]	; (80046ec <TIM_Base_SetConfig+0x11c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d007      	beq.n	8004610 <TIM_Base_SetConfig+0x40>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a3b      	ldr	r2, [pc, #236]	; (80046f0 <TIM_Base_SetConfig+0x120>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <TIM_Base_SetConfig+0x40>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a3a      	ldr	r2, [pc, #232]	; (80046f4 <TIM_Base_SetConfig+0x124>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d108      	bne.n	8004622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a2f      	ldr	r2, [pc, #188]	; (80046e4 <TIM_Base_SetConfig+0x114>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d02b      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004630:	d027      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a2c      	ldr	r2, [pc, #176]	; (80046e8 <TIM_Base_SetConfig+0x118>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d023      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a2b      	ldr	r2, [pc, #172]	; (80046ec <TIM_Base_SetConfig+0x11c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d01f      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a2a      	ldr	r2, [pc, #168]	; (80046f0 <TIM_Base_SetConfig+0x120>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d01b      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a29      	ldr	r2, [pc, #164]	; (80046f4 <TIM_Base_SetConfig+0x124>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d017      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a28      	ldr	r2, [pc, #160]	; (80046f8 <TIM_Base_SetConfig+0x128>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d013      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a27      	ldr	r2, [pc, #156]	; (80046fc <TIM_Base_SetConfig+0x12c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00f      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a26      	ldr	r2, [pc, #152]	; (8004700 <TIM_Base_SetConfig+0x130>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00b      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a25      	ldr	r2, [pc, #148]	; (8004704 <TIM_Base_SetConfig+0x134>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d007      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a24      	ldr	r2, [pc, #144]	; (8004708 <TIM_Base_SetConfig+0x138>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d003      	beq.n	8004682 <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a23      	ldr	r2, [pc, #140]	; (800470c <TIM_Base_SetConfig+0x13c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d108      	bne.n	8004694 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a0a      	ldr	r2, [pc, #40]	; (80046e4 <TIM_Base_SetConfig+0x114>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_Base_SetConfig+0xf8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a0c      	ldr	r2, [pc, #48]	; (80046f4 <TIM_Base_SetConfig+0x124>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d103      	bne.n	80046d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	615a      	str	r2, [r3, #20]
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800
 80046f0:	40000c00 	.word	0x40000c00
 80046f4:	40010400 	.word	0x40010400
 80046f8:	40014000 	.word	0x40014000
 80046fc:	40014400 	.word	0x40014400
 8004700:	40014800 	.word	0x40014800
 8004704:	40001800 	.word	0x40001800
 8004708:	40001c00 	.word	0x40001c00
 800470c:	40002000 	.word	0x40002000

08004710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	f023 0201 	bic.w	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800473a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f023 030a 	bic.w	r3, r3, #10
 800474c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4313      	orrs	r3, r2
 8004754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	621a      	str	r2, [r3, #32]
}
 8004762:	bf00      	nop
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800476e:	b480      	push	{r7}
 8004770:	b087      	sub	sp, #28
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	f023 0210 	bic.w	r2, r3, #16
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004798:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	031b      	lsls	r3, r3, #12
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	621a      	str	r2, [r3, #32]
}
 80047c2:	bf00      	nop
 80047c4:	371c      	adds	r7, #28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b085      	sub	sp, #20
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f043 0307 	orr.w	r3, r3, #7
 80047f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	609a      	str	r2, [r3, #8]
}
 80047f8:	bf00      	nop
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800481e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	021a      	lsls	r2, r3, #8
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	431a      	orrs	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4313      	orrs	r3, r2
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	609a      	str	r2, [r3, #8]
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004858:	2302      	movs	r3, #2
 800485a:	e05a      	b.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a21      	ldr	r2, [pc, #132]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d022      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a8:	d01d      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a1d      	ldr	r2, [pc, #116]	; (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d018      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1b      	ldr	r2, [pc, #108]	; (8004928 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1a      	ldr	r2, [pc, #104]	; (800492c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00e      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a18      	ldr	r2, [pc, #96]	; (8004930 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d009      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a17      	ldr	r2, [pc, #92]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d004      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a15      	ldr	r2, [pc, #84]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d10c      	bne.n	8004900 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40010000 	.word	0x40010000
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800
 800492c:	40000c00 	.word	0x40000c00
 8004930:	40010400 	.word	0x40010400
 8004934:	40014000 	.word	0x40014000
 8004938:	40001800 	.word	0x40001800

0800493c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e03f      	b.n	80049f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fd fa06 	bl	8001d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2224      	movs	r2, #36	; 0x24
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fddb 	bl	8005564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695a      	ldr	r2, [r3, #20]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b08a      	sub	sp, #40	; 0x28
 8004a02:	af02      	add	r7, sp, #8
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b20      	cmp	r3, #32
 8004a1c:	d17c      	bne.n	8004b18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <HAL_UART_Transmit+0x2c>
 8004a24:	88fb      	ldrh	r3, [r7, #6]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e075      	b.n	8004b1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_UART_Transmit+0x3e>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e06e      	b.n	8004b1a <HAL_UART_Transmit+0x11c>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2221      	movs	r2, #33	; 0x21
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a52:	f7fd fbbd 	bl	80021d0 <HAL_GetTick>
 8004a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	88fa      	ldrh	r2, [r7, #6]
 8004a5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	88fa      	ldrh	r2, [r7, #6]
 8004a62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6c:	d108      	bne.n	8004a80 <HAL_UART_Transmit+0x82>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d104      	bne.n	8004a80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	61bb      	str	r3, [r7, #24]
 8004a7e:	e003      	b.n	8004a88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a90:	e02a      	b.n	8004ae8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2180      	movs	r1, #128	; 0x80
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fb1f 	bl	80050e0 <UART_WaitOnFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e036      	b.n	8004b1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10b      	bne.n	8004aca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	3302      	adds	r3, #2
 8004ac6:	61bb      	str	r3, [r7, #24]
 8004ac8:	e007      	b.n	8004ada <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	781a      	ldrb	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1cf      	bne.n	8004a92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2200      	movs	r2, #0
 8004afa:	2140      	movs	r1, #64	; 0x40
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 faef 	bl	80050e0 <UART_WaitOnFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e006      	b.n	8004b1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e000      	b.n	8004b1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3720      	adds	r7, #32
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d11d      	bne.n	8004b78 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_UART_Receive_IT+0x26>
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e016      	b.n	8004b7a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_UART_Receive_IT+0x38>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e00f      	b.n	8004b7a <HAL_UART_Receive_IT+0x58>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fb24 	bl	80051bc <UART_Start_Receive_IT>
 8004b74:	4603      	mov	r3, r0
 8004b76:	e000      	b.n	8004b7a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004b78:	2302      	movs	r3, #2
  }
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b0ba      	sub	sp, #232	; 0xe8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004bc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10f      	bne.n	8004bea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d009      	beq.n	8004bea <HAL_UART_IRQHandler+0x66>
 8004bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fc03 	bl	80053ee <UART_Receive_IT>
      return;
 8004be8:	e256      	b.n	8005098 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004bea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80de 	beq.w	8004db0 <HAL_UART_IRQHandler+0x22c>
 8004bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d106      	bne.n	8004c0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 80d1 	beq.w	8004db0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00b      	beq.n	8004c32 <HAL_UART_IRQHandler+0xae>
 8004c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f043 0201 	orr.w	r2, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <HAL_UART_IRQHandler+0xd2>
 8004c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f043 0202 	orr.w	r2, r3, #2
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00b      	beq.n	8004c7a <HAL_UART_IRQHandler+0xf6>
 8004c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	f043 0204 	orr.w	r2, r3, #4
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d011      	beq.n	8004caa <HAL_UART_IRQHandler+0x126>
 8004c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d105      	bne.n	8004c9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f043 0208 	orr.w	r2, r3, #8
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 81ed 	beq.w	800508e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb8:	f003 0320 	and.w	r3, r3, #32
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x14e>
 8004cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fb8e 	bl	80053ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cdc:	2b40      	cmp	r3, #64	; 0x40
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d103      	bne.n	8004cfe <HAL_UART_IRQHandler+0x17a>
 8004cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d04f      	beq.n	8004d9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fa96 	bl	8005230 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	2b40      	cmp	r3, #64	; 0x40
 8004d10:	d141      	bne.n	8004d96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3314      	adds	r3, #20
 8004d18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3314      	adds	r3, #20
 8004d3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1d9      	bne.n	8004d12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d013      	beq.n	8004d8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6a:	4a7d      	ldr	r2, [pc, #500]	; (8004f60 <HAL_UART_IRQHandler+0x3dc>)
 8004d6c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fd fbdd 	bl	8002532 <HAL_DMA_Abort_IT>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d016      	beq.n	8004dac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d88:	4610      	mov	r0, r2
 8004d8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8c:	e00e      	b.n	8004dac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f990 	bl	80050b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d94:	e00a      	b.n	8004dac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f98c 	bl	80050b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9c:	e006      	b.n	8004dac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f988 	bl	80050b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004daa:	e170      	b.n	800508e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dac:	bf00      	nop
    return;
 8004dae:	e16e      	b.n	800508e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	f040 814a 	bne.w	800504e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dbe:	f003 0310 	and.w	r3, r3, #16
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 8143 	beq.w	800504e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dcc:	f003 0310 	and.w	r3, r3, #16
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 813c 	beq.w	800504e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	60bb      	str	r3, [r7, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	60bb      	str	r3, [r7, #8]
 8004dea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df6:	2b40      	cmp	r3, #64	; 0x40
 8004df8:	f040 80b4 	bne.w	8004f64 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 8140 	beq.w	8005092 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	f080 8139 	bcs.w	8005092 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e26:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e32:	f000 8088 	beq.w	8004f46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1d9      	bne.n	8004e36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3314      	adds	r3, #20
 8004e88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e94:	f023 0301 	bic.w	r3, r3, #1
 8004e98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3314      	adds	r3, #20
 8004ea2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ea6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004eaa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004eae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e1      	bne.n	8004e82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3314      	adds	r3, #20
 8004ec4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3314      	adds	r3, #20
 8004ede:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ee2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ee4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ee8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e3      	bne.n	8004ebe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	330c      	adds	r3, #12
 8004f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f16:	f023 0310 	bic.w	r3, r3, #16
 8004f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	330c      	adds	r3, #12
 8004f24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f28:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e3      	bne.n	8004f04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fd fa86 	bl	8002452 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f8b6 	bl	80050c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f5c:	e099      	b.n	8005092 <HAL_UART_IRQHandler+0x50e>
 8004f5e:	bf00      	nop
 8004f60:	080052f7 	.word	0x080052f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 808b 	beq.w	8005096 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004f80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 8086 	beq.w	8005096 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	330c      	adds	r3, #12
 8004f90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fa0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	330c      	adds	r3, #12
 8004faa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004fae:	647a      	str	r2, [r7, #68]	; 0x44
 8004fb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e3      	bne.n	8004f8a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3314      	adds	r3, #20
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	623b      	str	r3, [r7, #32]
   return(result);
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	f023 0301 	bic.w	r3, r3, #1
 8004fd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3314      	adds	r3, #20
 8004fe2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fe6:	633a      	str	r2, [r7, #48]	; 0x30
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e3      	bne.n	8004fc2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	330c      	adds	r3, #12
 800500e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	60fb      	str	r3, [r7, #12]
   return(result);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0310 	bic.w	r3, r3, #16
 800501e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	330c      	adds	r3, #12
 8005028:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800502c:	61fa      	str	r2, [r7, #28]
 800502e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005030:	69b9      	ldr	r1, [r7, #24]
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	e841 2300 	strex	r3, r2, [r1]
 8005038:	617b      	str	r3, [r7, #20]
   return(result);
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e3      	bne.n	8005008 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005040:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005044:	4619      	mov	r1, r3
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f83e 	bl	80050c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800504c:	e023      	b.n	8005096 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800504e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005056:	2b00      	cmp	r3, #0
 8005058:	d009      	beq.n	800506e <HAL_UART_IRQHandler+0x4ea>
 800505a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800505e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f959 	bl	800531e <UART_Transmit_IT>
    return;
 800506c:	e014      	b.n	8005098 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800506e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00e      	beq.n	8005098 <HAL_UART_IRQHandler+0x514>
 800507a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	d008      	beq.n	8005098 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f999 	bl	80053be <UART_EndTransmit_IT>
    return;
 800508c:	e004      	b.n	8005098 <HAL_UART_IRQHandler+0x514>
    return;
 800508e:	bf00      	nop
 8005090:	e002      	b.n	8005098 <HAL_UART_IRQHandler+0x514>
      return;
 8005092:	bf00      	nop
 8005094:	e000      	b.n	8005098 <HAL_UART_IRQHandler+0x514>
      return;
 8005096:	bf00      	nop
  }
}
 8005098:	37e8      	adds	r7, #232	; 0xe8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop

080050a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b090      	sub	sp, #64	; 0x40
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	603b      	str	r3, [r7, #0]
 80050ec:	4613      	mov	r3, r2
 80050ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f0:	e050      	b.n	8005194 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d04c      	beq.n	8005194 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d007      	beq.n	8005110 <UART_WaitOnFlagUntilTimeout+0x30>
 8005100:	f7fd f866 	bl	80021d0 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800510c:	429a      	cmp	r2, r3
 800510e:	d241      	bcs.n	8005194 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	330c      	adds	r3, #12
 800512e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005130:	637a      	str	r2, [r7, #52]	; 0x34
 8005132:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005138:	e841 2300 	strex	r3, r2, [r1]
 800513c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e5      	bne.n	8005110 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3314      	adds	r3, #20
 800514a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	613b      	str	r3, [r7, #16]
   return(result);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	63bb      	str	r3, [r7, #56]	; 0x38
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3314      	adds	r3, #20
 8005162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005164:	623a      	str	r2, [r7, #32]
 8005166:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	69f9      	ldr	r1, [r7, #28]
 800516a:	6a3a      	ldr	r2, [r7, #32]
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	61bb      	str	r3, [r7, #24]
   return(result);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e5      	bne.n	8005144 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e00f      	b.n	80051b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	4013      	ands	r3, r2
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	bf0c      	ite	eq
 80051a4:	2301      	moveq	r3, #1
 80051a6:	2300      	movne	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	461a      	mov	r2, r3
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d09f      	beq.n	80050f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3740      	adds	r7, #64	; 0x40
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	88fa      	ldrh	r2, [r7, #6]
 80051da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2222      	movs	r2, #34	; 0x22
 80051e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005200:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695a      	ldr	r2, [r3, #20]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0201 	orr.w	r2, r2, #1
 8005210:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f042 0220 	orr.w	r2, r2, #32
 8005220:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b095      	sub	sp, #84	; 0x54
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	330c      	adds	r3, #12
 800523e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800524e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005258:	643a      	str	r2, [r7, #64]	; 0x40
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800525e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e5      	bne.n	8005238 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3314      	adds	r3, #20
 8005272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	61fb      	str	r3, [r7, #28]
   return(result);
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	64bb      	str	r3, [r7, #72]	; 0x48
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3314      	adds	r3, #20
 800528a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800528c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800528e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e5      	bne.n	800526c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d119      	bne.n	80052dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f023 0310 	bic.w	r3, r3, #16
 80052be:	647b      	str	r3, [r7, #68]	; 0x44
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	330c      	adds	r3, #12
 80052c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052c8:	61ba      	str	r2, [r7, #24]
 80052ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6979      	ldr	r1, [r7, #20]
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	613b      	str	r3, [r7, #16]
   return(result);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e5      	bne.n	80052a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052ea:	bf00      	nop
 80052ec:	3754      	adds	r7, #84	; 0x54
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b084      	sub	sp, #16
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f7ff fecf 	bl	80050b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005316:	bf00      	nop
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800531e:	b480      	push	{r7}
 8005320:	b085      	sub	sp, #20
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b21      	cmp	r3, #33	; 0x21
 8005330:	d13e      	bne.n	80053b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533a:	d114      	bne.n	8005366 <UART_Transmit_IT+0x48>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d110      	bne.n	8005366 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005358:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	1c9a      	adds	r2, r3, #2
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	621a      	str	r2, [r3, #32]
 8005364:	e008      	b.n	8005378 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	1c59      	adds	r1, r3, #1
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6211      	str	r1, [r2, #32]
 8005370:	781a      	ldrb	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29b      	uxth	r3, r3
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	4619      	mov	r1, r3
 8005386:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10f      	bne.n	80053ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800539a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	e000      	b.n	80053b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053b0:	2302      	movs	r3, #2
  }
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b082      	sub	sp, #8
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff fe5e 	bl	80050a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b08c      	sub	sp, #48	; 0x30
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b22      	cmp	r3, #34	; 0x22
 8005400:	f040 80ab 	bne.w	800555a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540c:	d117      	bne.n	800543e <UART_Receive_IT+0x50>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d113      	bne.n	800543e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005416:	2300      	movs	r3, #0
 8005418:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	b29b      	uxth	r3, r3
 8005428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542c:	b29a      	uxth	r2, r3
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	1c9a      	adds	r2, r3, #2
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	629a      	str	r2, [r3, #40]	; 0x28
 800543c:	e026      	b.n	800548c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005442:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005444:	2300      	movs	r3, #0
 8005446:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005450:	d007      	beq.n	8005462 <UART_Receive_IT+0x74>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10a      	bne.n	8005470 <UART_Receive_IT+0x82>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	b2da      	uxtb	r2, r3
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	e008      	b.n	8005482 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800547c:	b2da      	uxtb	r2, r3
 800547e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005480:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005490:	b29b      	uxth	r3, r3
 8005492:	3b01      	subs	r3, #1
 8005494:	b29b      	uxth	r3, r3
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	4619      	mov	r1, r3
 800549a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800549c:	2b00      	cmp	r3, #0
 800549e:	d15a      	bne.n	8005556 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0220 	bic.w	r2, r2, #32
 80054ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695a      	ldr	r2, [r3, #20]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0201 	bic.w	r2, r2, #1
 80054ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d135      	bne.n	800554c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	330c      	adds	r3, #12
 80054ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	613b      	str	r3, [r7, #16]
   return(result);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f023 0310 	bic.w	r3, r3, #16
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	330c      	adds	r3, #12
 8005504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005506:	623a      	str	r2, [r7, #32]
 8005508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	69f9      	ldr	r1, [r7, #28]
 800550c:	6a3a      	ldr	r2, [r7, #32]
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	61bb      	str	r3, [r7, #24]
   return(result);
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e5      	bne.n	80054e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b10      	cmp	r3, #16
 8005526:	d10a      	bne.n	800553e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff fdbf 	bl	80050c8 <HAL_UARTEx_RxEventCallback>
 800554a:	e002      	b.n	8005552 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7fc fd67 	bl	8002020 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	e002      	b.n	800555c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	e000      	b.n	800555c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800555a:	2302      	movs	r3, #2
  }
}
 800555c:	4618      	mov	r0, r3
 800555e:	3730      	adds	r7, #48	; 0x30
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005568:	b09f      	sub	sp, #124	; 0x7c
 800556a:	af00      	add	r7, sp, #0
 800556c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800556e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557a:	68d9      	ldr	r1, [r3, #12]
 800557c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	ea40 0301 	orr.w	r3, r0, r1
 8005584:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	431a      	orrs	r2, r3
 8005590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	431a      	orrs	r2, r3
 8005596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	4313      	orrs	r3, r2
 800559c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800559e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055a8:	f021 010c 	bic.w	r1, r1, #12
 80055ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055b2:	430b      	orrs	r3, r1
 80055b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c2:	6999      	ldr	r1, [r3, #24]
 80055c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	ea40 0301 	orr.w	r3, r0, r1
 80055cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4bc5      	ldr	r3, [pc, #788]	; (80058e8 <UART_SetConfig+0x384>)
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d004      	beq.n	80055e2 <UART_SetConfig+0x7e>
 80055d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4bc3      	ldr	r3, [pc, #780]	; (80058ec <UART_SetConfig+0x388>)
 80055de:	429a      	cmp	r2, r3
 80055e0:	d103      	bne.n	80055ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055e2:	f7fd ff3d 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 80055e6:	6778      	str	r0, [r7, #116]	; 0x74
 80055e8:	e002      	b.n	80055f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055ea:	f7fd ff25 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 80055ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f8:	f040 80b6 	bne.w	8005768 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055fe:	461c      	mov	r4, r3
 8005600:	f04f 0500 	mov.w	r5, #0
 8005604:	4622      	mov	r2, r4
 8005606:	462b      	mov	r3, r5
 8005608:	1891      	adds	r1, r2, r2
 800560a:	6439      	str	r1, [r7, #64]	; 0x40
 800560c:	415b      	adcs	r3, r3
 800560e:	647b      	str	r3, [r7, #68]	; 0x44
 8005610:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005614:	1912      	adds	r2, r2, r4
 8005616:	eb45 0303 	adc.w	r3, r5, r3
 800561a:	f04f 0000 	mov.w	r0, #0
 800561e:	f04f 0100 	mov.w	r1, #0
 8005622:	00d9      	lsls	r1, r3, #3
 8005624:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005628:	00d0      	lsls	r0, r2, #3
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	1911      	adds	r1, r2, r4
 8005630:	6639      	str	r1, [r7, #96]	; 0x60
 8005632:	416b      	adcs	r3, r5
 8005634:	667b      	str	r3, [r7, #100]	; 0x64
 8005636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	461a      	mov	r2, r3
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	1891      	adds	r1, r2, r2
 8005642:	63b9      	str	r1, [r7, #56]	; 0x38
 8005644:	415b      	adcs	r3, r3
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005648:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800564c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005650:	f7fa fdba 	bl	80001c8 <__aeabi_uldivmod>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4ba5      	ldr	r3, [pc, #660]	; (80058f0 <UART_SetConfig+0x38c>)
 800565a:	fba3 2302 	umull	r2, r3, r3, r2
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	011e      	lsls	r6, r3, #4
 8005662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005664:	461c      	mov	r4, r3
 8005666:	f04f 0500 	mov.w	r5, #0
 800566a:	4622      	mov	r2, r4
 800566c:	462b      	mov	r3, r5
 800566e:	1891      	adds	r1, r2, r2
 8005670:	6339      	str	r1, [r7, #48]	; 0x30
 8005672:	415b      	adcs	r3, r3
 8005674:	637b      	str	r3, [r7, #52]	; 0x34
 8005676:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800567a:	1912      	adds	r2, r2, r4
 800567c:	eb45 0303 	adc.w	r3, r5, r3
 8005680:	f04f 0000 	mov.w	r0, #0
 8005684:	f04f 0100 	mov.w	r1, #0
 8005688:	00d9      	lsls	r1, r3, #3
 800568a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800568e:	00d0      	lsls	r0, r2, #3
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	1911      	adds	r1, r2, r4
 8005696:	65b9      	str	r1, [r7, #88]	; 0x58
 8005698:	416b      	adcs	r3, r5
 800569a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800569c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	461a      	mov	r2, r3
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	1891      	adds	r1, r2, r2
 80056a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80056aa:	415b      	adcs	r3, r3
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80056b6:	f7fa fd87 	bl	80001c8 <__aeabi_uldivmod>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4b8c      	ldr	r3, [pc, #560]	; (80058f0 <UART_SetConfig+0x38c>)
 80056c0:	fba3 1302 	umull	r1, r3, r3, r2
 80056c4:	095b      	lsrs	r3, r3, #5
 80056c6:	2164      	movs	r1, #100	; 0x64
 80056c8:	fb01 f303 	mul.w	r3, r1, r3
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	3332      	adds	r3, #50	; 0x32
 80056d2:	4a87      	ldr	r2, [pc, #540]	; (80058f0 <UART_SetConfig+0x38c>)
 80056d4:	fba2 2303 	umull	r2, r3, r2, r3
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056e0:	441e      	add	r6, r3
 80056e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056e4:	4618      	mov	r0, r3
 80056e6:	f04f 0100 	mov.w	r1, #0
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	1894      	adds	r4, r2, r2
 80056f0:	623c      	str	r4, [r7, #32]
 80056f2:	415b      	adcs	r3, r3
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24
 80056f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056fa:	1812      	adds	r2, r2, r0
 80056fc:	eb41 0303 	adc.w	r3, r1, r3
 8005700:	f04f 0400 	mov.w	r4, #0
 8005704:	f04f 0500 	mov.w	r5, #0
 8005708:	00dd      	lsls	r5, r3, #3
 800570a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800570e:	00d4      	lsls	r4, r2, #3
 8005710:	4622      	mov	r2, r4
 8005712:	462b      	mov	r3, r5
 8005714:	1814      	adds	r4, r2, r0
 8005716:	653c      	str	r4, [r7, #80]	; 0x50
 8005718:	414b      	adcs	r3, r1
 800571a:	657b      	str	r3, [r7, #84]	; 0x54
 800571c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	461a      	mov	r2, r3
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	1891      	adds	r1, r2, r2
 8005728:	61b9      	str	r1, [r7, #24]
 800572a:	415b      	adcs	r3, r3
 800572c:	61fb      	str	r3, [r7, #28]
 800572e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005732:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005736:	f7fa fd47 	bl	80001c8 <__aeabi_uldivmod>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4b6c      	ldr	r3, [pc, #432]	; (80058f0 <UART_SetConfig+0x38c>)
 8005740:	fba3 1302 	umull	r1, r3, r3, r2
 8005744:	095b      	lsrs	r3, r3, #5
 8005746:	2164      	movs	r1, #100	; 0x64
 8005748:	fb01 f303 	mul.w	r3, r1, r3
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	3332      	adds	r3, #50	; 0x32
 8005752:	4a67      	ldr	r2, [pc, #412]	; (80058f0 <UART_SetConfig+0x38c>)
 8005754:	fba2 2303 	umull	r2, r3, r2, r3
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	f003 0207 	and.w	r2, r3, #7
 800575e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4432      	add	r2, r6
 8005764:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005766:	e0b9      	b.n	80058dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800576a:	461c      	mov	r4, r3
 800576c:	f04f 0500 	mov.w	r5, #0
 8005770:	4622      	mov	r2, r4
 8005772:	462b      	mov	r3, r5
 8005774:	1891      	adds	r1, r2, r2
 8005776:	6139      	str	r1, [r7, #16]
 8005778:	415b      	adcs	r3, r3
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005780:	1912      	adds	r2, r2, r4
 8005782:	eb45 0303 	adc.w	r3, r5, r3
 8005786:	f04f 0000 	mov.w	r0, #0
 800578a:	f04f 0100 	mov.w	r1, #0
 800578e:	00d9      	lsls	r1, r3, #3
 8005790:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005794:	00d0      	lsls	r0, r2, #3
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	eb12 0804 	adds.w	r8, r2, r4
 800579e:	eb43 0905 	adc.w	r9, r3, r5
 80057a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f04f 0100 	mov.w	r1, #0
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	008b      	lsls	r3, r1, #2
 80057b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057ba:	0082      	lsls	r2, r0, #2
 80057bc:	4640      	mov	r0, r8
 80057be:	4649      	mov	r1, r9
 80057c0:	f7fa fd02 	bl	80001c8 <__aeabi_uldivmod>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4b49      	ldr	r3, [pc, #292]	; (80058f0 <UART_SetConfig+0x38c>)
 80057ca:	fba3 2302 	umull	r2, r3, r3, r2
 80057ce:	095b      	lsrs	r3, r3, #5
 80057d0:	011e      	lsls	r6, r3, #4
 80057d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057d4:	4618      	mov	r0, r3
 80057d6:	f04f 0100 	mov.w	r1, #0
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	1894      	adds	r4, r2, r2
 80057e0:	60bc      	str	r4, [r7, #8]
 80057e2:	415b      	adcs	r3, r3
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057ea:	1812      	adds	r2, r2, r0
 80057ec:	eb41 0303 	adc.w	r3, r1, r3
 80057f0:	f04f 0400 	mov.w	r4, #0
 80057f4:	f04f 0500 	mov.w	r5, #0
 80057f8:	00dd      	lsls	r5, r3, #3
 80057fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80057fe:	00d4      	lsls	r4, r2, #3
 8005800:	4622      	mov	r2, r4
 8005802:	462b      	mov	r3, r5
 8005804:	1814      	adds	r4, r2, r0
 8005806:	64bc      	str	r4, [r7, #72]	; 0x48
 8005808:	414b      	adcs	r3, r1
 800580a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800580c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	4618      	mov	r0, r3
 8005812:	f04f 0100 	mov.w	r1, #0
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	008b      	lsls	r3, r1, #2
 8005820:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005824:	0082      	lsls	r2, r0, #2
 8005826:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800582a:	f7fa fccd 	bl	80001c8 <__aeabi_uldivmod>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4b2f      	ldr	r3, [pc, #188]	; (80058f0 <UART_SetConfig+0x38c>)
 8005834:	fba3 1302 	umull	r1, r3, r3, r2
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	2164      	movs	r1, #100	; 0x64
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	3332      	adds	r3, #50	; 0x32
 8005846:	4a2a      	ldr	r2, [pc, #168]	; (80058f0 <UART_SetConfig+0x38c>)
 8005848:	fba2 2303 	umull	r2, r3, r2, r3
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005852:	441e      	add	r6, r3
 8005854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005856:	4618      	mov	r0, r3
 8005858:	f04f 0100 	mov.w	r1, #0
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	1894      	adds	r4, r2, r2
 8005862:	603c      	str	r4, [r7, #0]
 8005864:	415b      	adcs	r3, r3
 8005866:	607b      	str	r3, [r7, #4]
 8005868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800586c:	1812      	adds	r2, r2, r0
 800586e:	eb41 0303 	adc.w	r3, r1, r3
 8005872:	f04f 0400 	mov.w	r4, #0
 8005876:	f04f 0500 	mov.w	r5, #0
 800587a:	00dd      	lsls	r5, r3, #3
 800587c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005880:	00d4      	lsls	r4, r2, #3
 8005882:	4622      	mov	r2, r4
 8005884:	462b      	mov	r3, r5
 8005886:	eb12 0a00 	adds.w	sl, r2, r0
 800588a:	eb43 0b01 	adc.w	fp, r3, r1
 800588e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	4618      	mov	r0, r3
 8005894:	f04f 0100 	mov.w	r1, #0
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	008b      	lsls	r3, r1, #2
 80058a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058a6:	0082      	lsls	r2, r0, #2
 80058a8:	4650      	mov	r0, sl
 80058aa:	4659      	mov	r1, fp
 80058ac:	f7fa fc8c 	bl	80001c8 <__aeabi_uldivmod>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4b0e      	ldr	r3, [pc, #56]	; (80058f0 <UART_SetConfig+0x38c>)
 80058b6:	fba3 1302 	umull	r1, r3, r3, r2
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	2164      	movs	r1, #100	; 0x64
 80058be:	fb01 f303 	mul.w	r3, r1, r3
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	3332      	adds	r3, #50	; 0x32
 80058c8:	4a09      	ldr	r2, [pc, #36]	; (80058f0 <UART_SetConfig+0x38c>)
 80058ca:	fba2 2303 	umull	r2, r3, r2, r3
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	f003 020f 	and.w	r2, r3, #15
 80058d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4432      	add	r2, r6
 80058da:	609a      	str	r2, [r3, #8]
}
 80058dc:	bf00      	nop
 80058de:	377c      	adds	r7, #124	; 0x7c
 80058e0:	46bd      	mov	sp, r7
 80058e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e6:	bf00      	nop
 80058e8:	40011000 	.word	0x40011000
 80058ec:	40011400 	.word	0x40011400
 80058f0:	51eb851f 	.word	0x51eb851f

080058f4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800590c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4b20      	ldr	r3, [pc, #128]	; (8005994 <FSMC_NORSRAM_Init+0xa0>)
 8005912:	4013      	ands	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800591e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8005924:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800592a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8005930:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8005936:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800593c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8005942:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005948:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800594e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8005954:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800595a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8005960:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	2b08      	cmp	r3, #8
 800596e:	d103      	bne.n	8005978 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005976:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68f9      	ldr	r1, [r7, #12]
 8005980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	fff00080 	.word	0xfff00080

08005998 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80059ba:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80059c6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80059ce:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80059d6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	3b01      	subs	r3, #1
 80059de:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80059e0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	3b02      	subs	r3, #2
 80059e8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80059ea:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80059f0:	4313      	orrs	r3, r2
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6979      	ldr	r1, [r7, #20]
 8005a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
	...

08005a14 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a2c:	d122      	bne.n	8005a74 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a36:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	4b15      	ldr	r3, [pc, #84]	; (8005a90 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005a4a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005a52:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005a5a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005a60:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6979      	ldr	r1, [r7, #20]
 8005a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005a72:	e005      	b.n	8005a80 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	cff00000 	.word	0xcff00000

08005a94 <__libc_init_array>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	4d0d      	ldr	r5, [pc, #52]	; (8005acc <__libc_init_array+0x38>)
 8005a98:	4c0d      	ldr	r4, [pc, #52]	; (8005ad0 <__libc_init_array+0x3c>)
 8005a9a:	1b64      	subs	r4, r4, r5
 8005a9c:	10a4      	asrs	r4, r4, #2
 8005a9e:	2600      	movs	r6, #0
 8005aa0:	42a6      	cmp	r6, r4
 8005aa2:	d109      	bne.n	8005ab8 <__libc_init_array+0x24>
 8005aa4:	4d0b      	ldr	r5, [pc, #44]	; (8005ad4 <__libc_init_array+0x40>)
 8005aa6:	4c0c      	ldr	r4, [pc, #48]	; (8005ad8 <__libc_init_array+0x44>)
 8005aa8:	f000 f820 	bl	8005aec <_init>
 8005aac:	1b64      	subs	r4, r4, r5
 8005aae:	10a4      	asrs	r4, r4, #2
 8005ab0:	2600      	movs	r6, #0
 8005ab2:	42a6      	cmp	r6, r4
 8005ab4:	d105      	bne.n	8005ac2 <__libc_init_array+0x2e>
 8005ab6:	bd70      	pop	{r4, r5, r6, pc}
 8005ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005abc:	4798      	blx	r3
 8005abe:	3601      	adds	r6, #1
 8005ac0:	e7ee      	b.n	8005aa0 <__libc_init_array+0xc>
 8005ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac6:	4798      	blx	r3
 8005ac8:	3601      	adds	r6, #1
 8005aca:	e7f2      	b.n	8005ab2 <__libc_init_array+0x1e>
 8005acc:	08008aa4 	.word	0x08008aa4
 8005ad0:	08008aa4 	.word	0x08008aa4
 8005ad4:	08008aa4 	.word	0x08008aa4
 8005ad8:	08008aa8 	.word	0x08008aa8

08005adc <memset>:
 8005adc:	4402      	add	r2, r0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d100      	bne.n	8005ae6 <memset+0xa>
 8005ae4:	4770      	bx	lr
 8005ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aea:	e7f9      	b.n	8005ae0 <memset+0x4>

08005aec <_init>:
 8005aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aee:	bf00      	nop
 8005af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af2:	bc08      	pop	{r3}
 8005af4:	469e      	mov	lr, r3
 8005af6:	4770      	bx	lr

08005af8 <_fini>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr
