
DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d00  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006f00  08005e88  08005e88  00015e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd88  0800cd88  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd88  0800cd88  0001cd88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd90  0800cd90  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd90  0800cd90  0001cd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd94  0800cd94  0001cd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800cd98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000228  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000023c  2000023c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b394  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003988  00000000  00000000  0003b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  0003ed60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001358  00000000  00000000  00040250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242c8  00000000  00000000  000415a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b880  00000000  00000000  00065870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2fba  00000000  00000000  000810f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001540aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005604  00000000  00000000  00154100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e70 	.word	0x08005e70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08005e70 	.word	0x08005e70

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80004d4:	4b3f      	ldr	r3, [pc, #252]	; (80005d4 <led7_Scan+0x104>)
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	b29a      	uxth	r2, r3
 80004dc:	4b3d      	ldr	r3, [pc, #244]	; (80005d4 <led7_Scan+0x104>)
 80004de:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80004e0:	4b3d      	ldr	r3, [pc, #244]	; (80005d8 <led7_Scan+0x108>)
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	461a      	mov	r2, r3
 80004e6:	4b3d      	ldr	r3, [pc, #244]	; (80005dc <led7_Scan+0x10c>)
 80004e8:	5c9b      	ldrb	r3, [r3, r2]
 80004ea:	021b      	lsls	r3, r3, #8
 80004ec:	b21a      	sxth	r2, r3
 80004ee:	4b39      	ldr	r3, [pc, #228]	; (80005d4 <led7_Scan+0x104>)
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	b21b      	sxth	r3, r3
 80004f4:	4313      	orrs	r3, r2
 80004f6:	b21b      	sxth	r3, r3
 80004f8:	b29a      	uxth	r2, r3
 80004fa:	4b36      	ldr	r3, [pc, #216]	; (80005d4 <led7_Scan+0x104>)
 80004fc:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80004fe:	4b36      	ldr	r3, [pc, #216]	; (80005d8 <led7_Scan+0x108>)
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	2b03      	cmp	r3, #3
 8000504:	d846      	bhi.n	8000594 <led7_Scan+0xc4>
 8000506:	a201      	add	r2, pc, #4	; (adr r2, 800050c <led7_Scan+0x3c>)
 8000508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050c:	0800051d 	.word	0x0800051d
 8000510:	0800053b 	.word	0x0800053b
 8000514:	08000559 	.word	0x08000559
 8000518:	08000577 	.word	0x08000577
	case 0:
		spi_buffer |= 0x00b0;
 800051c:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <led7_Scan+0x104>)
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000524:	b29a      	uxth	r2, r3
 8000526:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <led7_Scan+0x104>)
 8000528:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 800052a:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <led7_Scan+0x104>)
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000532:	b29a      	uxth	r2, r3
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <led7_Scan+0x104>)
 8000536:	801a      	strh	r2, [r3, #0]
		break;
 8000538:	e02d      	b.n	8000596 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800053a:	4b26      	ldr	r3, [pc, #152]	; (80005d4 <led7_Scan+0x104>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8000542:	b29a      	uxth	r2, r3
 8000544:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <led7_Scan+0x104>)
 8000546:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <led7_Scan+0x104>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	f023 0320 	bic.w	r3, r3, #32
 8000550:	b29a      	uxth	r2, r3
 8000552:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <led7_Scan+0x104>)
 8000554:	801a      	strh	r2, [r3, #0]
		break;
 8000556:	e01e      	b.n	8000596 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8000558:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <led7_Scan+0x104>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000560:	b29a      	uxth	r2, r3
 8000562:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <led7_Scan+0x104>)
 8000564:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <led7_Scan+0x104>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	f023 0310 	bic.w	r3, r3, #16
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <led7_Scan+0x104>)
 8000572:	801a      	strh	r2, [r3, #0]
		break;
 8000574:	e00f      	b.n	8000596 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <led7_Scan+0x104>)
 8000578:	881b      	ldrh	r3, [r3, #0]
 800057a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800057e:	b29a      	uxth	r2, r3
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <led7_Scan+0x104>)
 8000582:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <led7_Scan+0x104>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800058c:	b29a      	uxth	r2, r3
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <led7_Scan+0x104>)
 8000590:	801a      	strh	r2, [r3, #0]
		break;
 8000592:	e000      	b.n	8000596 <led7_Scan+0xc6>
	default:
		break;
 8000594:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <led7_Scan+0x108>)
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	3301      	adds	r3, #1
 800059c:	425a      	negs	r2, r3
 800059e:	f003 0303 	and.w	r3, r3, #3
 80005a2:	f002 0203 	and.w	r2, r2, #3
 80005a6:	bf58      	it	pl
 80005a8:	4253      	negpl	r3, r2
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <led7_Scan+0x108>)
 80005ae:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2140      	movs	r1, #64	; 0x40
 80005b4:	480a      	ldr	r0, [pc, #40]	; (80005e0 <led7_Scan+0x110>)
 80005b6:	f001 fead 	bl	8002314 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80005ba:	2301      	movs	r3, #1
 80005bc:	2202      	movs	r2, #2
 80005be:	4905      	ldr	r1, [pc, #20]	; (80005d4 <led7_Scan+0x104>)
 80005c0:	4808      	ldr	r0, [pc, #32]	; (80005e4 <led7_Scan+0x114>)
 80005c2:	f003 f9ac 	bl	800391e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2140      	movs	r1, #64	; 0x40
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <led7_Scan+0x110>)
 80005cc:	f001 fea2 	bl	8002314 <HAL_GPIO_WritePin>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000004 	.word	0x20000004
 80005d8:	20000030 	.word	0x20000030
 80005dc:	20000000 	.word	0x20000000
 80005e0:	40021800 	.word	0x40021800
 80005e4:	20000154 	.word	0x20000154

080005e8 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2108      	movs	r1, #8
 80005f2:	482f      	ldr	r0, [pc, #188]	; (80006b0 <button_Scan+0xc8>)
 80005f4:	f001 fe8e 	bl	8002314 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2108      	movs	r1, #8
 80005fc:	482c      	ldr	r0, [pc, #176]	; (80006b0 <button_Scan+0xc8>)
 80005fe:	f001 fe89 	bl	8002314 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000602:	230a      	movs	r3, #10
 8000604:	2202      	movs	r2, #2
 8000606:	492b      	ldr	r1, [pc, #172]	; (80006b4 <button_Scan+0xcc>)
 8000608:	482b      	ldr	r0, [pc, #172]	; (80006b8 <button_Scan+0xd0>)
 800060a:	f003 fac4 	bl	8003b96 <HAL_SPI_Receive>
	  int button_index = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000616:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	e03f      	b.n	800069e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b00      	cmp	r3, #0
 8000622:	db06      	blt.n	8000632 <button_Scan+0x4a>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b03      	cmp	r3, #3
 8000628:	dc03      	bgt.n	8000632 <button_Scan+0x4a>
			  button_index = i + 4;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3304      	adds	r3, #4
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	e018      	b.n	8000664 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b03      	cmp	r3, #3
 8000636:	dd07      	ble.n	8000648 <button_Scan+0x60>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b07      	cmp	r3, #7
 800063c:	dc04      	bgt.n	8000648 <button_Scan+0x60>
			  button_index = 7 - i;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f1c3 0307 	rsb	r3, r3, #7
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	e00d      	b.n	8000664 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b07      	cmp	r3, #7
 800064c:	dd06      	ble.n	800065c <button_Scan+0x74>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b0b      	cmp	r3, #11
 8000652:	dc03      	bgt.n	800065c <button_Scan+0x74>
			  button_index = i + 4;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3304      	adds	r3, #4
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	e003      	b.n	8000664 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f1c3 0317 	rsb	r3, r3, #23
 8000662:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <button_Scan+0xcc>)
 8000666:	881a      	ldrh	r2, [r3, #0]
 8000668:	897b      	ldrh	r3, [r7, #10]
 800066a:	4013      	ands	r3, r2
 800066c:	b29b      	uxth	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d005      	beq.n	800067e <button_Scan+0x96>
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <button_Scan+0xd4>)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2100      	movs	r1, #0
 8000678:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800067c:	e009      	b.n	8000692 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800067e:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <button_Scan+0xd4>)
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000686:	3301      	adds	r3, #1
 8000688:	b299      	uxth	r1, r3
 800068a:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <button_Scan+0xd4>)
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000692:	897b      	ldrh	r3, [r7, #10]
 8000694:	085b      	lsrs	r3, r3, #1
 8000696:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3301      	adds	r3, #1
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b0f      	cmp	r3, #15
 80006a2:	ddbc      	ble.n	800061e <button_Scan+0x36>
	  }
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40020c00 	.word	0x40020c00
 80006b4:	20000032 	.word	0x20000032
 80006b8:	20000154 	.word	0x20000154
 80006bc:	20000044 	.word	0x20000044

080006c0 <ds3231_ReadTime>:
void ds3231_Write(uint8_t address, uint8_t value){
	uint8_t temp = DEC2BCD(value);
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
}

void ds3231_ReadTime(){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 80006c6:	230a      	movs	r3, #10
 80006c8:	9302      	str	r3, [sp, #8]
 80006ca:	2307      	movs	r3, #7
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <ds3231_ReadTime+0xa4>)
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2301      	movs	r3, #1
 80006d4:	2200      	movs	r2, #0
 80006d6:	21d0      	movs	r1, #208	; 0xd0
 80006d8:	4823      	ldr	r0, [pc, #140]	; (8000768 <ds3231_ReadTime+0xa8>)
 80006da:	f001 ff79 	bl	80025d0 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <ds3231_ReadTime+0xa4>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fa20 	bl	8001b28 <BCD2DEC>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <ds3231_ReadTime+0xac>)
 80006ee:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <ds3231_ReadTime+0xa4>)
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fa17 	bl	8001b28 <BCD2DEC>
 80006fa:	4603      	mov	r3, r0
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <ds3231_ReadTime+0xb0>)
 8000700:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <ds3231_ReadTime+0xa4>)
 8000704:	789b      	ldrb	r3, [r3, #2]
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fa0e 	bl	8001b28 <BCD2DEC>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <ds3231_ReadTime+0xb4>)
 8000712:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <ds3231_ReadTime+0xa4>)
 8000716:	78db      	ldrb	r3, [r3, #3]
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fa05 	bl	8001b28 <BCD2DEC>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <ds3231_ReadTime+0xb8>)
 8000724:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <ds3231_ReadTime+0xa4>)
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	4618      	mov	r0, r3
 800072c:	f001 f9fc 	bl	8001b28 <BCD2DEC>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <ds3231_ReadTime+0xbc>)
 8000736:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <ds3231_ReadTime+0xa4>)
 800073a:	795b      	ldrb	r3, [r3, #5]
 800073c:	4618      	mov	r0, r3
 800073e:	f001 f9f3 	bl	8001b28 <BCD2DEC>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <ds3231_ReadTime+0xc0>)
 8000748:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <ds3231_ReadTime+0xa4>)
 800074c:	799b      	ldrb	r3, [r3, #6]
 800074e:	4618      	mov	r0, r3
 8000750:	f001 f9ea 	bl	8001b28 <BCD2DEC>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <ds3231_ReadTime+0xc4>)
 800075a:	701a      	strb	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000006c 	.word	0x2000006c
 8000768:	200000c4 	.word	0x200000c4
 800076c:	20000064 	.word	0x20000064
 8000770:	20000066 	.word	0x20000066
 8000774:	20000069 	.word	0x20000069
 8000778:	20000068 	.word	0x20000068
 800077c:	20000067 	.word	0x20000067
 8000780:	2000006a 	.word	0x2000006a
 8000784:	20000065 	.word	0x20000065

08000788 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08e      	sub	sp, #56	; 0x38
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
 800079e:	615a      	str	r2, [r3, #20]
 80007a0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80007a2:	463b      	mov	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
 80007b0:	615a      	str	r2, [r3, #20]
 80007b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80007b4:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <MX_FSMC_Init+0xec>)
 80007b6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80007ba:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80007bc:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <MX_FSMC_Init+0xec>)
 80007be:	4a2e      	ldr	r2, [pc, #184]	; (8000878 <MX_FSMC_Init+0xf0>)
 80007c0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80007c2:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <MX_FSMC_Init+0xec>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80007c8:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <MX_FSMC_Init+0xec>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80007ce:	4b29      	ldr	r3, [pc, #164]	; (8000874 <MX_FSMC_Init+0xec>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <MX_FSMC_Init+0xec>)
 80007d6:	2210      	movs	r2, #16
 80007d8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80007da:	4b26      	ldr	r3, [pc, #152]	; (8000874 <MX_FSMC_Init+0xec>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <MX_FSMC_Init+0xec>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80007e6:	4b23      	ldr	r3, [pc, #140]	; (8000874 <MX_FSMC_Init+0xec>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <MX_FSMC_Init+0xec>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <MX_FSMC_Init+0xec>)
 80007f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007fa:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <MX_FSMC_Init+0xec>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_FSMC_Init+0xec>)
 8000802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000806:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_FSMC_Init+0xec>)
 800080a:	2200      	movs	r2, #0
 800080c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_FSMC_Init+0xec>)
 8000810:	2200      	movs	r2, #0
 8000812:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_FSMC_Init+0xec>)
 8000816:	2200      	movs	r2, #0
 8000818:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800081a:	230f      	movs	r3, #15
 800081c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800081e:	230f      	movs	r3, #15
 8000820:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000822:	233c      	movs	r3, #60	; 0x3c
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800082a:	2310      	movs	r3, #16
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800082e:	2311      	movs	r3, #17
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000832:	2300      	movs	r3, #0
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000836:	2308      	movs	r3, #8
 8000838:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800083a:	230f      	movs	r3, #15
 800083c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800083e:	2309      	movs	r3, #9
 8000840:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000846:	2310      	movs	r3, #16
 8000848:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800084a:	2311      	movs	r3, #17
 800084c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000852:	463a      	mov	r2, r7
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4806      	ldr	r0, [pc, #24]	; (8000874 <MX_FSMC_Init+0xec>)
 800085c:	f003 fd7e 	bl	800435c <HAL_SRAM_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000866:	f000 fe99 	bl	800159c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800086a:	bf00      	nop
 800086c:	3738      	adds	r7, #56	; 0x38
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000074 	.word	0x20000074
 8000878:	a0000104 	.word	0xa0000104

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	4b69      	ldr	r3, [pc, #420]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a68      	ldr	r2, [pc, #416]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 800089c:	f043 0310 	orr.w	r3, r3, #16
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b66      	ldr	r3, [pc, #408]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0310 	and.w	r3, r3, #16
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	4b62      	ldr	r3, [pc, #392]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a61      	ldr	r2, [pc, #388]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b5f      	ldr	r3, [pc, #380]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b5b      	ldr	r3, [pc, #364]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a5a      	ldr	r2, [pc, #360]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b58      	ldr	r3, [pc, #352]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b54      	ldr	r3, [pc, #336]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a53      	ldr	r2, [pc, #332]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b51      	ldr	r3, [pc, #324]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b4d      	ldr	r3, [pc, #308]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a4c      	ldr	r2, [pc, #304]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b4a      	ldr	r3, [pc, #296]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b46      	ldr	r3, [pc, #280]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a45      	ldr	r2, [pc, #276]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 8000928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b43      	ldr	r3, [pc, #268]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b3f      	ldr	r3, [pc, #252]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a3e      	ldr	r2, [pc, #248]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b3c      	ldr	r3, [pc, #240]	; (8000a3c <MX_GPIO_Init+0x1c0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_DEBUG_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2170      	movs	r1, #112	; 0x70
 800095a:	4839      	ldr	r0, [pc, #228]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 800095c:	f001 fcda 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|INPUT_X2_Pin|INPUT_X3_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f242 0130 	movw	r1, #8240	; 0x2030
 8000966:	4837      	ldr	r0, [pc, #220]	; (8000a44 <MX_GPIO_Init+0x1c8>)
 8000968:	f001 fcd4 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INPUT_X1_Pin|FSMC_BLK_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000972:	4835      	ldr	r0, [pc, #212]	; (8000a48 <MX_GPIO_Init+0x1cc>)
 8000974:	f001 fcce 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2140      	movs	r1, #64	; 0x40
 800097c:	4833      	ldr	r0, [pc, #204]	; (8000a4c <MX_GPIO_Init+0x1d0>)
 800097e:	f001 fcc9 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2108      	movs	r1, #8
 8000986:	4832      	ldr	r0, [pc, #200]	; (8000a50 <MX_GPIO_Init+0x1d4>)
 8000988:	f001 fcc4 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_DEBUG_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800098c:	2370      	movs	r3, #112	; 0x70
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4827      	ldr	r0, [pc, #156]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 80009a4:	f001 fb1a 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin INPUT_X2_Pin INPUT_X3_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|INPUT_X2_Pin|INPUT_X3_Pin;
 80009a8:	f242 0330 	movw	r3, #8240	; 0x2030
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4820      	ldr	r0, [pc, #128]	; (8000a44 <MX_GPIO_Init+0x1c8>)
 80009c2:	f001 fb0b 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_X0_Pin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin;
 80009c6:	2340      	movs	r3, #64	; 0x40
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(INPUT_X0_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	481b      	ldr	r0, [pc, #108]	; (8000a48 <MX_GPIO_Init+0x1cc>)
 80009da:	f001 faff 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X1_Pin FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = INPUT_X1_Pin|FSMC_BLK_Pin;
 80009de:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4814      	ldr	r0, [pc, #80]	; (8000a48 <MX_GPIO_Init+0x1cc>)
 80009f8:	f001 faf0 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_LATCH_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80009fc:	2340      	movs	r3, #64	; 0x40
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	480e      	ldr	r0, [pc, #56]	; (8000a4c <MX_GPIO_Init+0x1d0>)
 8000a14:	f001 fae2 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4808      	ldr	r0, [pc, #32]	; (8000a50 <MX_GPIO_Init+0x1d4>)
 8000a30:	f001 fad4 	bl	8001fdc <HAL_GPIO_Init>

}
 8000a34:	bf00      	nop
 8000a36:	3730      	adds	r7, #48	; 0x30
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40021800 	.word	0x40021800
 8000a50:	40020c00 	.word	0x40020c00

08000a54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_I2C1_Init+0x50>)
 8000a5a:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <MX_I2C1_Init+0x54>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_I2C1_Init+0x50>)
 8000a60:	4a12      	ldr	r2, [pc, #72]	; (8000aac <MX_I2C1_Init+0x58>)
 8000a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_I2C1_Init+0x50>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_I2C1_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_I2C1_Init+0x50>)
 8000a72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <MX_I2C1_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_I2C1_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <MX_I2C1_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_I2C1_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_I2C1_Init+0x50>)
 8000a92:	f001 fc59 	bl	8002348 <HAL_I2C_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a9c:	f000 fd7e 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000c4 	.word	0x200000c4
 8000aa8:	40005400 	.word	0x40005400
 8000aac:	000186a0 	.word	0x000186a0

08000ab0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000aba:	4a04      	ldr	r2, [pc, #16]	; (8000acc <LCD_WR_REG+0x1c>)
 8000abc:	88fb      	ldrh	r3, [r7, #6]
 8000abe:	8013      	strh	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	600ffffe 	.word	0x600ffffe

08000ad0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000ada:	4a04      	ldr	r2, [pc, #16]	; (8000aec <LCD_WR_DATA+0x1c>)
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	8053      	strh	r3, [r2, #2]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	600ffffe 	.word	0x600ffffe

08000af0 <lcd_AddressSet>:
	return ram;
}


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4604      	mov	r4, r0
 8000af8:	4608      	mov	r0, r1
 8000afa:	4611      	mov	r1, r2
 8000afc:	461a      	mov	r2, r3
 8000afe:	4623      	mov	r3, r4
 8000b00:	80fb      	strh	r3, [r7, #6]
 8000b02:	4603      	mov	r3, r0
 8000b04:	80bb      	strh	r3, [r7, #4]
 8000b06:	460b      	mov	r3, r1
 8000b08:	807b      	strh	r3, [r7, #2]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000b0e:	202a      	movs	r0, #42	; 0x2a
 8000b10:	f7ff ffce 	bl	8000ab0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	0a1b      	lsrs	r3, r3, #8
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ffd8 	bl	8000ad0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ffd2 	bl	8000ad0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000b2c:	887b      	ldrh	r3, [r7, #2]
 8000b2e:	0a1b      	lsrs	r3, r3, #8
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ffcc 	bl	8000ad0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000b38:	887b      	ldrh	r3, [r7, #2]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ffc6 	bl	8000ad0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000b44:	202b      	movs	r0, #43	; 0x2b
 8000b46:	f7ff ffb3 	bl	8000ab0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000b4a:	88bb      	ldrh	r3, [r7, #4]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ffbd 	bl	8000ad0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000b56:	88bb      	ldrh	r3, [r7, #4]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ffb7 	bl	8000ad0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000b62:	883b      	ldrh	r3, [r7, #0]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ffb1 	bl	8000ad0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000b6e:	883b      	ldrh	r3, [r7, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ffab 	bl	8000ad0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000b7a:	202c      	movs	r0, #44	; 0x2c
 8000b7c:	f7ff ff98 	bl	8000ab0 <LCD_WR_REG>
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd90      	pop	{r4, r7, pc}

08000b88 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4608      	mov	r0, r1
 8000b92:	4611      	mov	r1, r2
 8000b94:	461a      	mov	r2, r3
 8000b96:	4623      	mov	r3, r4
 8000b98:	80fb      	strh	r3, [r7, #6]
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80bb      	strh	r3, [r7, #4]
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	807b      	strh	r3, [r7, #2]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	883b      	ldrh	r3, [r7, #0]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	88b9      	ldrh	r1, [r7, #4]
 8000bb4:	88f8      	ldrh	r0, [r7, #6]
 8000bb6:	f7ff ff9b 	bl	8000af0 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000bba:	88bb      	ldrh	r3, [r7, #4]
 8000bbc:	81fb      	strh	r3, [r7, #14]
 8000bbe:	e010      	b.n	8000be2 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000bc0:	88fb      	ldrh	r3, [r7, #6]
 8000bc2:	81bb      	strh	r3, [r7, #12]
 8000bc4:	e006      	b.n	8000bd4 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000bc6:	8c3b      	ldrh	r3, [r7, #32]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff81 	bl	8000ad0 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000bce:	89bb      	ldrh	r3, [r7, #12]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	81bb      	strh	r3, [r7, #12]
 8000bd4:	89ba      	ldrh	r2, [r7, #12]
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d3f4      	bcc.n	8000bc6 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000bdc:	89fb      	ldrh	r3, [r7, #14]
 8000bde:	3301      	adds	r3, #1
 8000be0:	81fb      	strh	r3, [r7, #14]
 8000be2:	89fa      	ldrh	r2, [r7, #14]
 8000be4:	883b      	ldrh	r3, [r7, #0]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d3ea      	bcc.n	8000bc0 <lcd_Fill+0x38>
		}
	}
}
 8000bea:	bf00      	nop
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}

08000bf4 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80fb      	strh	r3, [r7, #6]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	80bb      	strh	r3, [r7, #4]
 8000c02:	4613      	mov	r3, r2
 8000c04:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000c06:	88bb      	ldrh	r3, [r7, #4]
 8000c08:	88fa      	ldrh	r2, [r7, #6]
 8000c0a:	88b9      	ldrh	r1, [r7, #4]
 8000c0c:	88f8      	ldrh	r0, [r7, #6]
 8000c0e:	f7ff ff6f 	bl	8000af0 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000c12:	887b      	ldrh	r3, [r7, #2]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff5b 	bl	8000ad0 <LCD_WR_DATA>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b087      	sub	sp, #28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	4608      	mov	r0, r1
 8000c2e:	4611      	mov	r1, r2
 8000c30:	461a      	mov	r2, r3
 8000c32:	4623      	mov	r3, r4
 8000c34:	80fb      	strh	r3, [r7, #6]
 8000c36:	4603      	mov	r3, r0
 8000c38:	80bb      	strh	r3, [r7, #4]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	70fb      	strb	r3, [r7, #3]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000c4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c4e:	085b      	lsrs	r3, r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	461a      	mov	r2, r3
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	f003 0307 	and.w	r3, r3, #7
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bf14      	ite	ne
 8000c66:	2301      	movne	r3, #1
 8000c68:	2300      	moveq	r3, #0
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	fb12 f303 	smulbb	r3, r2, r3
 8000c7a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	3b20      	subs	r3, #32
 8000c80:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	4413      	add	r3, r2
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	b29c      	uxth	r4, r3
 8000c90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	88bb      	ldrh	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	88b9      	ldrh	r1, [r7, #4]
 8000ca2:	88f8      	ldrh	r0, [r7, #6]
 8000ca4:	4622      	mov	r2, r4
 8000ca6:	f7ff ff23 	bl	8000af0 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	827b      	strh	r3, [r7, #18]
 8000cae:	e07a      	b.n	8000da6 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000cb0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cb4:	2b0c      	cmp	r3, #12
 8000cb6:	d028      	beq.n	8000d0a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000cb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cbc:	2b10      	cmp	r3, #16
 8000cbe:	d108      	bne.n	8000cd2 <lcd_ShowChar+0xae>
 8000cc0:	78fa      	ldrb	r2, [r7, #3]
 8000cc2:	8a7b      	ldrh	r3, [r7, #18]
 8000cc4:	493c      	ldr	r1, [pc, #240]	; (8000db8 <lcd_ShowChar+0x194>)
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	440a      	add	r2, r1
 8000cca:	4413      	add	r3, r2
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	75fb      	strb	r3, [r7, #23]
 8000cd0:	e01b      	b.n	8000d0a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000cd2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cd6:	2b18      	cmp	r3, #24
 8000cd8:	d10b      	bne.n	8000cf2 <lcd_ShowChar+0xce>
 8000cda:	78fa      	ldrb	r2, [r7, #3]
 8000cdc:	8a79      	ldrh	r1, [r7, #18]
 8000cde:	4837      	ldr	r0, [pc, #220]	; (8000dbc <lcd_ShowChar+0x198>)
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	011b      	lsls	r3, r3, #4
 8000ce8:	4403      	add	r3, r0
 8000cea:	440b      	add	r3, r1
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	75fb      	strb	r3, [r7, #23]
 8000cf0:	e00b      	b.n	8000d0a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000cf2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cf6:	2b20      	cmp	r3, #32
 8000cf8:	d15a      	bne.n	8000db0 <lcd_ShowChar+0x18c>
 8000cfa:	78fa      	ldrb	r2, [r7, #3]
 8000cfc:	8a7b      	ldrh	r3, [r7, #18]
 8000cfe:	4930      	ldr	r1, [pc, #192]	; (8000dc0 <lcd_ShowChar+0x19c>)
 8000d00:	0192      	lsls	r2, r2, #6
 8000d02:	440a      	add	r2, r1
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	75bb      	strb	r3, [r7, #22]
 8000d0e:	e044      	b.n	8000d9a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000d10:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d120      	bne.n	8000d5a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000d18:	7dfa      	ldrb	r2, [r7, #23]
 8000d1a:	7dbb      	ldrb	r3, [r7, #22]
 8000d1c:	fa42 f303 	asr.w	r3, r2, r3
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d004      	beq.n	8000d32 <lcd_ShowChar+0x10e>
 8000d28:	883b      	ldrh	r3, [r7, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fed0 	bl	8000ad0 <LCD_WR_DATA>
 8000d30:	e003      	b.n	8000d3a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000d32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fecb 	bl	8000ad0 <LCD_WR_DATA>
				m++;
 8000d3a:	7d7b      	ldrb	r3, [r7, #21]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000d40:	7d7b      	ldrb	r3, [r7, #21]
 8000d42:	7bfa      	ldrb	r2, [r7, #15]
 8000d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d48:	fb02 f201 	mul.w	r2, r2, r1
 8000d4c:	1a9b      	subs	r3, r3, r2
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d11f      	bne.n	8000d94 <lcd_ShowChar+0x170>
				{
					m=0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	757b      	strb	r3, [r7, #21]
					break;
 8000d58:	e022      	b.n	8000da0 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000d5a:	7dfa      	ldrb	r2, [r7, #23]
 8000d5c:	7dbb      	ldrb	r3, [r7, #22]
 8000d5e:	fa42 f303 	asr.w	r3, r2, r3
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d005      	beq.n	8000d76 <lcd_ShowChar+0x152>
 8000d6a:	883a      	ldrh	r2, [r7, #0]
 8000d6c:	88b9      	ldrh	r1, [r7, #4]
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff3f 	bl	8000bf4 <lcd_DrawPoint>
				x++;
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000d7c:	88fa      	ldrh	r2, [r7, #6]
 8000d7e:	8a3b      	ldrh	r3, [r7, #16]
 8000d80:	1ad2      	subs	r2, r2, r3
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d105      	bne.n	8000d94 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000d88:	8a3b      	ldrh	r3, [r7, #16]
 8000d8a:	80fb      	strh	r3, [r7, #6]
					y++;
 8000d8c:	88bb      	ldrh	r3, [r7, #4]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	80bb      	strh	r3, [r7, #4]
					break;
 8000d92:	e005      	b.n	8000da0 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000d94:	7dbb      	ldrb	r3, [r7, #22]
 8000d96:	3301      	adds	r3, #1
 8000d98:	75bb      	strb	r3, [r7, #22]
 8000d9a:	7dbb      	ldrb	r3, [r7, #22]
 8000d9c:	2b07      	cmp	r3, #7
 8000d9e:	d9b7      	bls.n	8000d10 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000da0:	8a7b      	ldrh	r3, [r7, #18]
 8000da2:	3301      	adds	r3, #1
 8000da4:	827b      	strh	r3, [r7, #18]
 8000da6:	8a7a      	ldrh	r2, [r7, #18]
 8000da8:	89bb      	ldrh	r3, [r7, #12]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d380      	bcc.n	8000cb0 <lcd_ShowChar+0x8c>
 8000dae:	e000      	b.n	8000db2 <lcd_ShowChar+0x18e>
		else return;
 8000db0:	bf00      	nop
				}
			}
		}
	}
}
 8000db2:	371c      	adds	r7, #28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd90      	pop	{r4, r7, pc}
 8000db8:	08005ea8 	.word	0x08005ea8
 8000dbc:	08006498 	.word	0x08006498
 8000dc0:	08007668 	.word	0x08007668

08000dc4 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	460a      	mov	r2, r1
 8000dce:	71fb      	strb	r3, [r7, #7]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000dd8:	e004      	b.n	8000de4 <mypow+0x20>
 8000dda:	79fa      	ldrb	r2, [r7, #7]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	fb02 f303 	mul.w	r3, r2, r3
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	1e5a      	subs	r2, r3, #1
 8000de8:	71ba      	strb	r2, [r7, #6]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1f5      	bne.n	8000dda <mypow+0x16>
	return result;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af04      	add	r7, sp, #16
 8000e02:	4604      	mov	r4, r0
 8000e04:	4608      	mov	r0, r1
 8000e06:	4611      	mov	r1, r2
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	80fb      	strh	r3, [r7, #6]
 8000e0e:	4603      	mov	r3, r0
 8000e10:	80bb      	strh	r3, [r7, #4]
 8000e12:	460b      	mov	r3, r1
 8000e14:	807b      	strh	r3, [r7, #2]
 8000e16:	4613      	mov	r3, r2
 8000e18:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000e1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e22:	085b      	lsrs	r3, r3, #1
 8000e24:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	73fb      	strb	r3, [r7, #15]
 8000e2a:	e059      	b.n	8000ee0 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000e2c:	887c      	ldrh	r4, [r7, #2]
 8000e2e:	787a      	ldrb	r2, [r7, #1]
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	3b01      	subs	r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	200a      	movs	r0, #10
 8000e3e:	f7ff ffc1 	bl	8000dc4 <mypow>
 8000e42:	4603      	mov	r3, r0
 8000e44:	fbb4 f1f3 	udiv	r1, r4, r3
 8000e48:	4b2a      	ldr	r3, [pc, #168]	; (8000ef4 <lcd_ShowIntNum+0xf8>)
 8000e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8000e4e:	08da      	lsrs	r2, r3, #3
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	1aca      	subs	r2, r1, r3
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000e5e:	7bbb      	ldrb	r3, [r7, #14]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d121      	bne.n	8000ea8 <lcd_ShowIntNum+0xac>
 8000e64:	7bfa      	ldrb	r2, [r7, #15]
 8000e66:	787b      	ldrb	r3, [r7, #1]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	da1c      	bge.n	8000ea8 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000e6e:	7b3b      	ldrb	r3, [r7, #12]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d117      	bne.n	8000ea4 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	7b7b      	ldrb	r3, [r7, #13]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	fb12 f303 	smulbb	r3, r2, r3
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	4413      	add	r3, r2
 8000e86:	b298      	uxth	r0, r3
 8000e88:	8c3a      	ldrh	r2, [r7, #32]
 8000e8a:	88b9      	ldrh	r1, [r7, #4]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	9302      	str	r3, [sp, #8]
 8000e90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	f7ff fec1 	bl	8000c24 <lcd_ShowChar>
				continue;
 8000ea2:	e01a      	b.n	8000eda <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	7b7b      	ldrb	r3, [r7, #13]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	fb12 f303 	smulbb	r3, r2, r3
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	4413      	add	r3, r2
 8000eba:	b298      	uxth	r0, r3
 8000ebc:	7b3b      	ldrb	r3, [r7, #12]
 8000ebe:	3330      	adds	r3, #48	; 0x30
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	8c3c      	ldrh	r4, [r7, #32]
 8000ec4:	88b9      	ldrh	r1, [r7, #4]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	9302      	str	r3, [sp, #8]
 8000eca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	4623      	mov	r3, r4
 8000ed6:	f7ff fea5 	bl	8000c24 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	3301      	adds	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	7bfa      	ldrb	r2, [r7, #15]
 8000ee2:	787b      	ldrb	r3, [r7, #1]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d3a1      	bcc.n	8000e2c <lcd_ShowIntNum+0x30>
	}
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd90      	pop	{r4, r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	cccccccd 	.word	0xcccccccd

08000ef8 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4604      	mov	r4, r0
 8000f00:	4608      	mov	r0, r1
 8000f02:	4611      	mov	r1, r2
 8000f04:	461a      	mov	r2, r3
 8000f06:	4623      	mov	r3, r4
 8000f08:	80fb      	strh	r3, [r7, #6]
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80bb      	strh	r3, [r7, #4]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	807b      	strh	r3, [r7, #2]
 8000f12:	4613      	mov	r3, r2
 8000f14:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8000f1a:	88fa      	ldrh	r2, [r7, #6]
 8000f1c:	887b      	ldrh	r3, [r7, #2]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	3b01      	subs	r3, #1
 8000f24:	b29c      	uxth	r4, r3
 8000f26:	88ba      	ldrh	r2, [r7, #4]
 8000f28:	883b      	ldrh	r3, [r7, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	88b9      	ldrh	r1, [r7, #4]
 8000f34:	88f8      	ldrh	r0, [r7, #6]
 8000f36:	4622      	mov	r2, r4
 8000f38:	f7ff fdda 	bl	8000af0 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	82fb      	strh	r3, [r7, #22]
 8000f40:	e027      	b.n	8000f92 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	82bb      	strh	r3, [r7, #20]
 8000f46:	e01d      	b.n	8000f84 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f4e:	4413      	add	r3, r2
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	3301      	adds	r3, #1
 8000f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fdac 	bl	8000ad0 <LCD_WR_DATA>
			k++;
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8000f7e:	8abb      	ldrh	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	82bb      	strh	r3, [r7, #20]
 8000f84:	8aba      	ldrh	r2, [r7, #20]
 8000f86:	883b      	ldrh	r3, [r7, #0]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d3dd      	bcc.n	8000f48 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8000f8c:	8afb      	ldrh	r3, [r7, #22]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	82fb      	strh	r3, [r7, #22]
 8000f92:	8afa      	ldrh	r2, [r7, #22]
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d3d3      	bcc.n	8000f42 <lcd_ShowPicture+0x4a>
		}
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	371c      	adds	r7, #28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd90      	pop	{r4, r7, pc}

08000fa4 <_draw_circle_8>:
	LCD_WR_REG(0x29); //display on
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
}

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	4413      	add	r3, r2
 8000fbc:	b298      	uxth	r0, r3
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	8b3a      	ldrh	r2, [r7, #24]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f7ff fe11 	bl	8000bf4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	b298      	uxth	r0, r3
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	8b3a      	ldrh	r2, [r7, #24]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fe01 	bl	8000bf4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b298      	uxth	r0, r3
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	b29a      	uxth	r2, r3
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b29b      	uxth	r3, r3
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	b29b      	uxth	r3, r3
 800100a:	8b3a      	ldrh	r2, [r7, #24]
 800100c:	4619      	mov	r1, r3
 800100e:	f7ff fdf1 	bl	8000bf4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	b29a      	uxth	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	b29b      	uxth	r3, r3
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	b298      	uxth	r0, r3
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	b29a      	uxth	r2, r3
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b29b      	uxth	r3, r3
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	b29b      	uxth	r3, r3
 800102a:	8b3a      	ldrh	r2, [r7, #24]
 800102c:	4619      	mov	r1, r3
 800102e:	f7ff fde1 	bl	8000bf4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	b29a      	uxth	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	4413      	add	r3, r2
 800103c:	b298      	uxth	r0, r3
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	b29a      	uxth	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	b29b      	uxth	r3, r3
 8001046:	4413      	add	r3, r2
 8001048:	b29b      	uxth	r3, r3
 800104a:	8b3a      	ldrh	r2, [r7, #24]
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff fdd1 	bl	8000bf4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	b29a      	uxth	r2, r3
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b29b      	uxth	r3, r3
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	b298      	uxth	r0, r3
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	b29a      	uxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	b29b      	uxth	r3, r3
 8001066:	4413      	add	r3, r2
 8001068:	b29b      	uxth	r3, r3
 800106a:	8b3a      	ldrh	r2, [r7, #24]
 800106c:	4619      	mov	r1, r3
 800106e:	f7ff fdc1 	bl	8000bf4 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	b29a      	uxth	r2, r3
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b29b      	uxth	r3, r3
 800107a:	4413      	add	r3, r2
 800107c:	b298      	uxth	r0, r3
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	b29a      	uxth	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	b29b      	uxth	r3, r3
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	b29b      	uxth	r3, r3
 800108a:	8b3a      	ldrh	r2, [r7, #24]
 800108c:	4619      	mov	r1, r3
 800108e:	f7ff fdb1 	bl	8000bf4 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	b29a      	uxth	r2, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b29b      	uxth	r3, r3
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	b298      	uxth	r0, r3
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	8b3a      	ldrh	r2, [r7, #24]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff fda1 	bl	8000bf4 <lcd_DrawPoint>
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b08a      	sub	sp, #40	; 0x28
 80010be:	af02      	add	r7, sp, #8
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	4613      	mov	r3, r2
 80010c8:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	f1c3 0303 	rsb	r3, r3, #3
 80010da:	613b      	str	r3, [r7, #16]


	if (fill)
 80010dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d04f      	beq.n	8001182 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80010e2:	e029      	b.n	8001138 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	e00a      	b.n	8001100 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	69fa      	ldr	r2, [r7, #28]
 80010f2:	68b9      	ldr	r1, [r7, #8]
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f7ff ff55 	bl	8000fa4 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	429a      	cmp	r2, r3
 8001106:	ddf0      	ble.n	80010ea <lcd_DrawCircle+0x30>

			if (d < 0) {
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	2b00      	cmp	r3, #0
 800110c:	da06      	bge.n	800111c <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	009a      	lsls	r2, r3, #2
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4413      	add	r3, r2
 8001116:	3306      	adds	r3, #6
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	e00a      	b.n	8001132 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	009a      	lsls	r2, r3, #2
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4413      	add	r3, r2
 8001128:	330a      	adds	r3, #10
 800112a:	613b      	str	r3, [r7, #16]
				y--;
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	3b01      	subs	r3, #1
 8001130:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3301      	adds	r3, #1
 8001136:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	429a      	cmp	r2, r3
 800113e:	ddd1      	ble.n	80010e4 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001140:	e023      	b.n	800118a <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	69fa      	ldr	r2, [r7, #28]
 800114a:	68b9      	ldr	r1, [r7, #8]
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f7ff ff29 	bl	8000fa4 <_draw_circle_8>
			if (d < 0) {
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	2b00      	cmp	r3, #0
 8001156:	da06      	bge.n	8001166 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	009a      	lsls	r2, r3, #2
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4413      	add	r3, r2
 8001160:	3306      	adds	r3, #6
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	e00a      	b.n	800117c <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	009a      	lsls	r2, r3, #2
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4413      	add	r3, r2
 8001172:	330a      	adds	r3, #10
 8001174:	613b      	str	r3, [r7, #16]
				y--;
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	3b01      	subs	r3, #1
 800117a:	61bb      	str	r3, [r7, #24]
			x++;
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	3301      	adds	r3, #1
 8001180:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001182:	69fa      	ldr	r2, [r7, #28]
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	429a      	cmp	r2, r3
 8001188:	dddb      	ble.n	8001142 <lcd_DrawCircle+0x88>
}
 800118a:	bf00      	nop
 800118c:	3720      	adds	r7, #32
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b08b      	sub	sp, #44	; 0x2c
 8001198:	af04      	add	r7, sp, #16
 800119a:	60ba      	str	r2, [r7, #8]
 800119c:	461a      	mov	r2, r3
 800119e:	4603      	mov	r3, r0
 80011a0:	81fb      	strh	r3, [r7, #14]
 80011a2:	460b      	mov	r3, r1
 80011a4:	81bb      	strh	r3, [r7, #12]
 80011a6:	4613      	mov	r3, r2
 80011a8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80011b2:	e048      	b.n	8001246 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d145      	bne.n	8001246 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80011ba:	89fa      	ldrh	r2, [r7, #14]
 80011bc:	4b26      	ldr	r3, [pc, #152]	; (8001258 <lcd_ShowStr+0xc4>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011c6:	085b      	lsrs	r3, r3, #1
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	1acb      	subs	r3, r1, r3
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dc3f      	bgt.n	8001250 <lcd_ShowStr+0xbc>
 80011d0:	89ba      	ldrh	r2, [r7, #12]
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <lcd_ShowStr+0xc4>)
 80011d4:	885b      	ldrh	r3, [r3, #2]
 80011d6:	4619      	mov	r1, r3
 80011d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011dc:	1acb      	subs	r3, r1, r3
 80011de:	429a      	cmp	r2, r3
 80011e0:	dc36      	bgt.n	8001250 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b80      	cmp	r3, #128	; 0x80
 80011e8:	d902      	bls.n	80011f0 <lcd_ShowStr+0x5c>
 80011ea:	2301      	movs	r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]
 80011ee:	e02a      	b.n	8001246 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b0d      	cmp	r3, #13
 80011f6:	d10b      	bne.n	8001210 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80011f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	89bb      	ldrh	r3, [r7, #12]
 8001200:	4413      	add	r3, r2
 8001202:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001204:	8abb      	ldrh	r3, [r7, #20]
 8001206:	81fb      	strh	r3, [r7, #14]
					str++;
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	3301      	adds	r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	e017      	b.n	8001240 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	781a      	ldrb	r2, [r3, #0]
 8001214:	88fc      	ldrh	r4, [r7, #6]
 8001216:	89b9      	ldrh	r1, [r7, #12]
 8001218:	89f8      	ldrh	r0, [r7, #14]
 800121a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	4623      	mov	r3, r4
 800122c:	f7ff fcfa 	bl	8000c24 <lcd_ShowChar>
					x+=sizey/2;
 8001230:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001234:	085b      	lsrs	r3, r3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	b29a      	uxth	r2, r3
 800123a:	89fb      	ldrh	r3, [r7, #14]
 800123c:	4413      	add	r3, r2
 800123e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	3301      	adds	r3, #1
 8001244:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1b2      	bne.n	80011b4 <lcd_ShowStr+0x20>
 800124e:	e000      	b.n	8001252 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001250:	bf00      	nop
			}
		}
	}
}
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd90      	pop	{r4, r7, pc}
 8001258:	20000118 	.word	0x20000118

0800125c <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af04      	add	r7, sp, #16
 8001262:	60ba      	str	r2, [r7, #8]
 8001264:	461a      	mov	r2, r3
 8001266:	4603      	mov	r3, r0
 8001268:	81fb      	strh	r3, [r7, #14]
 800126a:	460b      	mov	r3, r1
 800126c:	81bb      	strh	r3, [r7, #12]
 800126e:	4613      	mov	r3, r2
 8001270:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8001272:	68b8      	ldr	r0, [r7, #8]
 8001274:	f7fe ffa8 	bl	80001c8 <strlen>
 8001278:	4603      	mov	r3, r0
 800127a:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <lcd_StrCenter+0x60>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	8afb      	ldrh	r3, [r7, #22]
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	0fda      	lsrs	r2, r3, #31
 800128a:	4413      	add	r3, r2
 800128c:	105b      	asrs	r3, r3, #1
 800128e:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001290:	89fa      	ldrh	r2, [r7, #14]
 8001292:	8abb      	ldrh	r3, [r7, #20]
 8001294:	4413      	add	r3, r2
 8001296:	b298      	uxth	r0, r3
 8001298:	88fa      	ldrh	r2, [r7, #6]
 800129a:	89b9      	ldrh	r1, [r7, #12]
 800129c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012a0:	9302      	str	r3, [sp, #8]
 80012a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	8c3b      	ldrh	r3, [r7, #32]
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	4613      	mov	r3, r2
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	f7ff ff70 	bl	8001194 <lcd_ShowStr>
}
 80012b4:	bf00      	nop
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000118 	.word	0x20000118

080012c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c4:	f000 fc74 	bl	8001bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c8:	f000 f824 	bl	8001314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012cc:	f7ff fad6 	bl	800087c <MX_GPIO_Init>
  MX_TIM2_Init();
 80012d0:	f000 fb96 	bl	8001a00 <MX_TIM2_Init>
  MX_SPI1_Init();
 80012d4:	f000 f98a 	bl	80015ec <MX_SPI1_Init>
  MX_FSMC_Init();
 80012d8:	f7ff fa56 	bl	8000788 <MX_FSMC_Init>
  MX_I2C1_Init();
 80012dc:	f7ff fbba 	bl	8000a54 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80012e0:	f000 fbf8 	bl	8001ad4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <main+0x4c>)
 80012e6:	f003 f8cd 	bl	8004484 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  while(!flag_timer2);
 80012ea:	bf00      	nop
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <main+0x50>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0fb      	beq.n	80012ec <main+0x2c>
	  flag_timer2 = 0;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <main+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 80012fa:	f7ff f975 	bl	80005e8 <button_Scan>
	  ds3231_ReadTime();
 80012fe:	f7ff f9df 	bl	80006c0 <ds3231_ReadTime>
	  displayTime();
 8001302:	f000 f8cd 	bl	80014a0 <displayTime>
	  test_lcd();
 8001306:	f000 f881 	bl	800140c <test_lcd>
  while (1){
 800130a:	e7ee      	b.n	80012ea <main+0x2a>
 800130c:	200001ac 	.word	0x200001ac
 8001310:	20000034 	.word	0x20000034

08001314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b094      	sub	sp, #80	; 0x50
 8001318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131a:	f107 0320 	add.w	r3, r7, #32
 800131e:	2230      	movs	r2, #48	; 0x30
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f004 fd9c 	bl	8005e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <SystemClock_Config+0xcc>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	4a27      	ldr	r2, [pc, #156]	; (80013e0 <SystemClock_Config+0xcc>)
 8001342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001346:	6413      	str	r3, [r2, #64]	; 0x40
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <SystemClock_Config+0xcc>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <SystemClock_Config+0xd0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a21      	ldr	r2, [pc, #132]	; (80013e4 <SystemClock_Config+0xd0>)
 800135e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <SystemClock_Config+0xd0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001370:	2302      	movs	r3, #2
 8001372:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001374:	2301      	movs	r3, #1
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001378:	2310      	movs	r3, #16
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137c:	2302      	movs	r3, #2
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001380:	2300      	movs	r3, #0
 8001382:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001384:	2308      	movs	r3, #8
 8001386:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001388:	23a8      	movs	r3, #168	; 0xa8
 800138a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800138c:	2302      	movs	r3, #2
 800138e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001390:	2304      	movs	r3, #4
 8001392:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001394:	f107 0320 	add.w	r3, r7, #32
 8001398:	4618      	mov	r0, r3
 800139a:	f001 fdc3 	bl	8002f24 <HAL_RCC_OscConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013a4:	f000 f8fa 	bl	800159c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a8:	230f      	movs	r3, #15
 80013aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ac:	2302      	movs	r3, #2
 80013ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2105      	movs	r1, #5
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 f824 	bl	8003414 <HAL_RCC_ClockConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013d2:	f000 f8e3 	bl	800159c <Error_Handler>
  }
}
 80013d6:	bf00      	nop
 80013d8:	3750      	adds	r7, #80	; 0x50
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40007000 	.word	0x40007000

080013e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f8:	d101      	bne.n	80013fe <HAL_TIM_PeriodElapsedCallback+0x16>
		timerRun();
 80013fa:	f000 f8d5 	bl	80015a8 <timerRun>
	}
	led7_Scan();
 80013fe:	f7ff f867 	bl	80004d0 <led7_Scan>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <test_lcd>:
	  button_init();
	  lcd_init();
	  ds3231_init();
	  setTimer2(50);
}
void test_lcd(){
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af04      	add	r7, sp, #16
	lcd_Fill(0, 0, 240, 20, BLUE);
 8001412:	231f      	movs	r3, #31
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2314      	movs	r3, #20
 8001418:	22f0      	movs	r2, #240	; 0xf0
 800141a:	2100      	movs	r1, #0
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff fbb3 	bl	8000b88 <lcd_Fill>
	lcd_StrCenter(0, 2, "Hello World !!!", RED, BLUE, 16, 1);
 8001422:	2301      	movs	r3, #1
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	2310      	movs	r3, #16
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	231f      	movs	r3, #31
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001432:	4a18      	ldr	r2, [pc, #96]	; (8001494 <test_lcd+0x88>)
 8001434:	2102      	movs	r1, #2
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff ff10 	bl	800125c <lcd_StrCenter>
	lcd_ShowStr(20, 30, "Test lcd screen", WHITE, RED, 24, 0);
 800143c:	2300      	movs	r3, #0
 800143e:	9302      	str	r3, [sp, #8]
 8001440:	2318      	movs	r3, #24
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <test_lcd+0x8c>)
 8001450:	211e      	movs	r1, #30
 8001452:	2014      	movs	r0, #20
 8001454:	f7ff fe9e 	bl	8001194 <lcd_ShowStr>
	lcd_DrawCircle(60, 120, GREEN, 40, 1);
 8001458:	2301      	movs	r3, #1
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2328      	movs	r3, #40	; 0x28
 800145e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001462:	2178      	movs	r1, #120	; 0x78
 8001464:	203c      	movs	r0, #60	; 0x3c
 8001466:	f7ff fe28 	bl	80010ba <lcd_DrawCircle>
	lcd_DrawCircle(160, 120, BRED, 40, 0);
 800146a:	2300      	movs	r3, #0
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2328      	movs	r3, #40	; 0x28
 8001470:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001474:	2178      	movs	r1, #120	; 0x78
 8001476:	20a0      	movs	r0, #160	; 0xa0
 8001478:	f7ff fe1f 	bl	80010ba <lcd_DrawCircle>
	lcd_ShowPicture(80, 200, 90, 90, gImage_logo);
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <test_lcd+0x90>)
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	235a      	movs	r3, #90	; 0x5a
 8001482:	225a      	movs	r2, #90	; 0x5a
 8001484:	21c8      	movs	r1, #200	; 0xc8
 8001486:	2050      	movs	r0, #80	; 0x50
 8001488:	f7ff fd36 	bl	8000ef8 <lcd_ShowPicture>
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	08005e88 	.word	0x08005e88
 8001498:	08005e98 	.word	0x08005e98
 800149c:	08008e28 	.word	0x08008e28

080014a0 <displayTime>:
	ds3231_Write(ADDRESS_DAY, 6);
	ds3231_Write(ADDRESS_HOUR, 20);
	ds3231_Write(ADDRESS_MIN, 11);
	ds3231_Write(ADDRESS_SEC, 23);
}
void displayTime(){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 80014a6:	4b36      	ldr	r3, [pc, #216]	; (8001580 <displayTime+0xe0>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	2318      	movs	r3, #24
 80014ae:	9302      	str	r3, [sp, #8]
 80014b0:	2300      	movs	r3, #0
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2302      	movs	r3, #2
 80014bc:	2164      	movs	r1, #100	; 0x64
 80014be:	2046      	movs	r0, #70	; 0x46
 80014c0:	f7ff fc9c 	bl	8000dfc <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80014c4:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <displayTime+0xe4>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	2318      	movs	r3, #24
 80014cc:	9302      	str	r3, [sp, #8]
 80014ce:	2300      	movs	r3, #0
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2302      	movs	r3, #2
 80014da:	2164      	movs	r1, #100	; 0x64
 80014dc:	206e      	movs	r0, #110	; 0x6e
 80014de:	f7ff fc8d 	bl	8000dfc <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 80014e2:	4b29      	ldr	r3, [pc, #164]	; (8001588 <displayTime+0xe8>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	2318      	movs	r3, #24
 80014ea:	9302      	str	r3, [sp, #8]
 80014ec:	2300      	movs	r3, #0
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2302      	movs	r3, #2
 80014f8:	2164      	movs	r1, #100	; 0x64
 80014fa:	2096      	movs	r0, #150	; 0x96
 80014fc:	f7ff fc7e 	bl	8000dfc <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <displayTime+0xec>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b29a      	uxth	r2, r3
 8001506:	2318      	movs	r3, #24
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	2300      	movs	r3, #0
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2302      	movs	r3, #2
 8001516:	2182      	movs	r1, #130	; 0x82
 8001518:	2014      	movs	r0, #20
 800151a:	f7ff fc6f 	bl	8000dfc <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <displayTime+0xf0>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	b29a      	uxth	r2, r3
 8001524:	2318      	movs	r3, #24
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	2300      	movs	r3, #0
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2302      	movs	r3, #2
 8001534:	2182      	movs	r1, #130	; 0x82
 8001536:	2046      	movs	r0, #70	; 0x46
 8001538:	f7ff fc60 	bl	8000dfc <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <displayTime+0xf4>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b29a      	uxth	r2, r3
 8001542:	2318      	movs	r3, #24
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	2300      	movs	r3, #0
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2302      	movs	r3, #2
 8001552:	2182      	movs	r1, #130	; 0x82
 8001554:	206e      	movs	r0, #110	; 0x6e
 8001556:	f7ff fc51 	bl	8000dfc <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <displayTime+0xf8>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b29a      	uxth	r2, r3
 8001560:	2318      	movs	r3, #24
 8001562:	9302      	str	r3, [sp, #8]
 8001564:	2300      	movs	r3, #0
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	2302      	movs	r3, #2
 8001570:	2182      	movs	r1, #130	; 0x82
 8001572:	2096      	movs	r0, #150	; 0x96
 8001574:	f7ff fc42 	bl	8000dfc <lcd_ShowIntNum>
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000069 	.word	0x20000069
 8001584:	20000066 	.word	0x20000066
 8001588:	20000064 	.word	0x20000064
 800158c:	20000068 	.word	0x20000068
 8001590:	20000067 	.word	0x20000067
 8001594:	2000006a 	.word	0x2000006a
 8001598:	20000065 	.word	0x20000065

0800159c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a0:	b672      	cpsid	i
}
 80015a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <Error_Handler+0x8>
	...

080015a8 <timerRun>:
	timer2_MUL = duration / TIMER_CYCLE_2;
	timer2_counter = timer2_MUL;
	flag_timer2 = 0;
}

void timerRun(){
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
	if (timer2_counter > 0){
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <timerRun+0x38>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d010      	beq.n	80015d6 <timerRun+0x2e>
		timer2_counter--;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <timerRun+0x38>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <timerRun+0x38>)
 80015be:	801a      	strh	r2, [r3, #0]
		if (timer2_counter == 0){
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <timerRun+0x38>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d106      	bne.n	80015d6 <timerRun+0x2e>
			flag_timer2 = 1;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <timerRun+0x3c>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	801a      	strh	r2, [r3, #0]
			timer2_counter = timer2_MUL;
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <timerRun+0x40>)
 80015d0:	881a      	ldrh	r2, [r3, #0]
 80015d2:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <timerRun+0x38>)
 80015d4:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	20000036 	.word	0x20000036
 80015e4:	20000034 	.word	0x20000034
 80015e8:	20000038 	.word	0x20000038

080015ec <MX_SPI1_Init>:
  * @param None
  * @retval None
  */

void MX_SPI1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_SPI1_Init+0x64>)
 80015f2:	4a18      	ldr	r2, [pc, #96]	; (8001654 <MX_SPI1_Init+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <MX_SPI1_Init+0x64>)
 80015f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_SPI1_Init+0x64>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_SPI1_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_SPI1_Init+0x64>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_SPI1_Init+0x64>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_SPI1_Init+0x64>)
 8001618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_SPI1_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <MX_SPI1_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_SPI1_Init+0x64>)
 800162c:	2200      	movs	r2, #0
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <MX_SPI1_Init+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_SPI1_Init+0x64>)
 8001638:	220a      	movs	r2, #10
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_SPI1_Init+0x64>)
 800163e:	f002 f8e5 	bl	800380c <HAL_SPI_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001648:	f7ff ffa8 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000154 	.word	0x20000154
 8001654:	40013000 	.word	0x40013000

08001658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_MspInit+0x4c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <HAL_MspInit+0x4c>)
 8001668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800166c:	6453      	str	r3, [r2, #68]	; 0x44
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <HAL_MspInit+0x4c>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_MspInit+0x4c>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <HAL_MspInit+0x4c>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_MspInit+0x4c>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800

080016a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a19      	ldr	r2, [pc, #100]	; (800172c <HAL_I2C_MspInit+0x84>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d12b      	bne.n	8001722 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_I2C_MspInit+0x88>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a17      	ldr	r2, [pc, #92]	; (8001730 <HAL_I2C_MspInit+0x88>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_I2C_MspInit+0x88>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016e6:	23c0      	movs	r3, #192	; 0xc0
 80016e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ea:	2312      	movs	r3, #18
 80016ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016f6:	2304      	movs	r3, #4
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <HAL_I2C_MspInit+0x8c>)
 8001702:	f000 fc6b 	bl	8001fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_I2C_MspInit+0x88>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <HAL_I2C_MspInit+0x88>)
 8001710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_I2C_MspInit+0x88>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	; 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40005400 	.word	0x40005400
 8001730:	40023800 	.word	0x40023800
 8001734:	40020400 	.word	0x40020400

08001738 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a19      	ldr	r2, [pc, #100]	; (80017bc <HAL_SPI_MspInit+0x84>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d12b      	bne.n	80017b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <HAL_SPI_MspInit+0x88>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a17      	ldr	r2, [pc, #92]	; (80017c0 <HAL_SPI_MspInit+0x88>)
 8001764:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_SPI_MspInit+0x88>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_SPI_MspInit+0x88>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a10      	ldr	r2, [pc, #64]	; (80017c0 <HAL_SPI_MspInit+0x88>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_SPI_MspInit+0x88>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001792:	2338      	movs	r3, #56	; 0x38
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017a2:	2305      	movs	r3, #5
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	; (80017c4 <HAL_SPI_MspInit+0x8c>)
 80017ae:	f000 fc15 	bl	8001fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017b2:	bf00      	nop
 80017b4:	3728      	adds	r7, #40	; 0x28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40013000 	.word	0x40013000
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020400 	.word	0x40020400

080017c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d8:	d115      	bne.n	8001806 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_TIM_Base_MspInit+0x48>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <HAL_TIM_Base_MspInit+0x48>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_TIM_Base_MspInit+0x48>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	201c      	movs	r0, #28
 80017fc:	f000 fb25 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001800:	201c      	movs	r0, #28
 8001802:	f000 fb3e 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800

08001814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <HAL_UART_MspInit+0x94>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d134      	bne.n	80018a0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <HAL_UART_MspInit+0x98>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <HAL_UART_MspInit+0x98>)
 8001840:	f043 0310 	orr.w	r3, r3, #16
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_UART_MspInit+0x98>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_UART_MspInit+0x98>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a14      	ldr	r2, [pc, #80]	; (80018ac <HAL_UART_MspInit+0x98>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_UART_MspInit+0x98>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800186e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001880:	2307      	movs	r3, #7
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4809      	ldr	r0, [pc, #36]	; (80018b0 <HAL_UART_MspInit+0x9c>)
 800188c:	f000 fba6 	bl	8001fdc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	2100      	movs	r1, #0
 8001894:	2025      	movs	r0, #37	; 0x25
 8001896:	f000 fad8 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800189a:	2025      	movs	r0, #37	; 0x25
 800189c:	f000 faf1 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	; 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40011000 	.word	0x40011000
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020000 	.word	0x40020000

080018b4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80018c8:	4b1c      	ldr	r3, [pc, #112]	; (800193c <HAL_FSMC_MspInit+0x88>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d131      	bne.n	8001934 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_FSMC_MspInit+0x88>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_FSMC_MspInit+0x8c>)
 80018dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018de:	4a18      	ldr	r2, [pc, #96]	; (8001940 <HAL_FSMC_MspInit+0x8c>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6393      	str	r3, [r2, #56]	; 0x38
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <HAL_FSMC_MspInit+0x8c>)
 80018e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80018f2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80018f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001904:	230c      	movs	r3, #12
 8001906:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4619      	mov	r1, r3
 800190c:	480d      	ldr	r0, [pc, #52]	; (8001944 <HAL_FSMC_MspInit+0x90>)
 800190e:	f000 fb65 	bl	8001fdc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001912:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001916:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001924:	230c      	movs	r3, #12
 8001926:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	4619      	mov	r1, r3
 800192c:	4806      	ldr	r0, [pc, #24]	; (8001948 <HAL_FSMC_MspInit+0x94>)
 800192e:	f000 fb55 	bl	8001fdc <HAL_GPIO_Init>
 8001932:	e000      	b.n	8001936 <HAL_FSMC_MspInit+0x82>
    return;
 8001934:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2000003c 	.word	0x2000003c
 8001940:	40023800 	.word	0x40023800
 8001944:	40021000 	.word	0x40021000
 8001948:	40020c00 	.word	0x40020c00

0800194c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001954:	f7ff ffae 	bl	80018b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <NMI_Handler+0x4>

08001966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196a:	e7fe      	b.n	800196a <HardFault_Handler+0x4>

0800196c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <MemManage_Handler+0x4>

08001972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <BusFault_Handler+0x4>

08001978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <UsageFault_Handler+0x4>

0800197e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ac:	f000 f952 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <TIM2_IRQHandler+0x10>)
 80019ba:	f002 fdd3 	bl	8004564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200001ac 	.word	0x200001ac

080019c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <USART1_IRQHandler+0x10>)
 80019ce:	f003 fa9b 	bl	8004f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200001f4 	.word	0x200001f4

080019dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a14:	463b      	mov	r3, r7
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a26:	f240 3247 	movw	r2, #839	; 0x347
 8001a2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a34:	2263      	movs	r2, #99	; 0x63
 8001a36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a44:	4813      	ldr	r0, [pc, #76]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a46:	f002 fccd 	bl	80043e4 <HAL_TIM_Base_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a50:	f7ff fda4 	bl	800159c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a5a:	f107 0308 	add.w	r3, r7, #8
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480c      	ldr	r0, [pc, #48]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a62:	f002 fe87 	bl	8004774 <HAL_TIM_ConfigClockSource>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a6c:	f7ff fd96 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a70:	2300      	movs	r3, #0
 8001a72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a78:	463b      	mov	r3, r7
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_TIM2_Init+0x94>)
 8001a7e:	f003 f8a3 	bl	8004bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a88:	f7ff fd88 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200001ac 	.word	0x200001ac

08001a98 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <HAL_UART_RxCpltCallback+0x30>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d10a      	bne.n	8001ac0 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8001aaa:	230a      	movs	r3, #10
 8001aac:	2201      	movs	r2, #1
 8001aae:	4907      	ldr	r1, [pc, #28]	; (8001acc <HAL_UART_RxCpltCallback+0x34>)
 8001ab0:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <HAL_UART_RxCpltCallback+0x38>)
 8001ab2:	f003 f966 	bl	8004d82 <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4904      	ldr	r1, [pc, #16]	; (8001acc <HAL_UART_RxCpltCallback+0x34>)
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <HAL_UART_RxCpltCallback+0x38>)
 8001abc:	f003 f9f3 	bl	8004ea6 <HAL_UART_Receive_IT>
	}
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40011000 	.word	0x40011000
 8001acc:	20000040 	.word	0x20000040
 8001ad0:	200001f4 	.word	0x200001f4

08001ad4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <MX_USART1_UART_Init+0x50>)
 8001adc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ae4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001afa:	220c      	movs	r2, #12
 8001afc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <MX_USART1_UART_Init+0x4c>)
 8001b0c:	f003 f8ec 	bl	8004ce8 <HAL_UART_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b16:	f7ff fd41 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200001f4 	.word	0x200001f4
 8001b24:	40011000 	.word	0x40011000

08001b28 <BCD2DEC>:
 *      Author: ADMIN
 */

#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	0092      	lsls	r2, r2, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	b2db      	uxtb	r3, r3
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b60:	480d      	ldr	r0, [pc, #52]	; (8001b98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b62:	490e      	ldr	r1, [pc, #56]	; (8001b9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b64:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b78:	4c0b      	ldr	r4, [pc, #44]	; (8001ba8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b86:	f7ff ff29 	bl	80019dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f004 f945 	bl	8005e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8e:	f7ff fb97 	bl	80012c0 <main>
  bx  lr    
 8001b92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b9c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001ba0:	0800cd98 	.word	0x0800cd98
  ldr r2, =_sbss
 8001ba4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001ba8:	2000023c 	.word	0x2000023c

08001bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC_IRQHandler>
	...

08001bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_Init+0x40>)
 8001bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_Init+0x40>)
 8001bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <HAL_Init+0x40>)
 8001bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 f92b 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bde:	200f      	movs	r0, #15
 8001be0:	f000 f808 	bl	8001bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be4:	f7ff fd38 	bl	8001658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023c00 	.word	0x40023c00

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_InitTick+0x54>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_InitTick+0x58>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f943 	bl	8001e9e <HAL_SYSTICK_Config>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00e      	b.n	8001c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d80a      	bhi.n	8001c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f000 f90b 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c34:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <HAL_InitTick+0x5c>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	20000010 	.word	0x20000010
 8001c50:	2000000c 	.word	0x2000000c

08001c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x20>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_IncTick+0x24>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <HAL_IncTick+0x24>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000010 	.word	0x20000010
 8001c78:	20000238 	.word	0x20000238

08001c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_GetTick+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000238 	.word	0x20000238

08001c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 0307 	and.w	r3, r3, #7
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	db0b      	blt.n	8001d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	4907      	ldr	r1, [pc, #28]	; (8001d30 <__NVIC_EnableIRQ+0x38>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	2001      	movs	r0, #1
 8001d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	; (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	; (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f7ff ff8e 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff29 	bl	8001c94 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff3e 	bl	8001cdc <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff8e 	bl	8001d88 <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5d 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff31 	bl	8001cf8 <__NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffa2 	bl	8001df0 <SysTick_Config>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff feda 	bl	8001c7c <HAL_GetTick>
 8001ec8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d008      	beq.n	8001ee8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2280      	movs	r2, #128	; 0x80
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e052      	b.n	8001f8e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0216 	bic.w	r2, r2, #22
 8001ef6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f06:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d103      	bne.n	8001f18 <HAL_DMA_Abort+0x62>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0208 	bic.w	r2, r2, #8
 8001f26:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0201 	bic.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f38:	e013      	b.n	8001f62 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f3a:	f7ff fe9f 	bl	8001c7c <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b05      	cmp	r3, #5
 8001f46:	d90c      	bls.n	8001f62 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2203      	movs	r2, #3
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e015      	b.n	8001f8e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1e4      	bne.n	8001f3a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f74:	223f      	movs	r2, #63	; 0x3f
 8001f76:	409a      	lsls	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d004      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2280      	movs	r2, #128	; 0x80
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e00c      	b.n	8001fce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2205      	movs	r2, #5
 8001fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0201 	bic.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	e16b      	b.n	80022d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	429a      	cmp	r2, r3
 8002012:	f040 815a 	bne.w	80022ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d005      	beq.n	800202e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800202a:	2b02      	cmp	r3, #2
 800202c:	d130      	bne.n	8002090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	2203      	movs	r2, #3
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002064:	2201      	movs	r2, #1
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 0201 	and.w	r2, r3, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b03      	cmp	r3, #3
 800209a:	d017      	beq.n	80020cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	2203      	movs	r2, #3
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d123      	bne.n	8002120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	08da      	lsrs	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3208      	adds	r2, #8
 80020e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	08da      	lsrs	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3208      	adds	r2, #8
 800211a:	69b9      	ldr	r1, [r7, #24]
 800211c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0203 	and.w	r2, r3, #3
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80b4 	beq.w	80022ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b60      	ldr	r3, [pc, #384]	; (80022e8 <HAL_GPIO_Init+0x30c>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	4a5f      	ldr	r2, [pc, #380]	; (80022e8 <HAL_GPIO_Init+0x30c>)
 800216c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002170:	6453      	str	r3, [r2, #68]	; 0x44
 8002172:	4b5d      	ldr	r3, [pc, #372]	; (80022e8 <HAL_GPIO_Init+0x30c>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800217e:	4a5b      	ldr	r2, [pc, #364]	; (80022ec <HAL_GPIO_Init+0x310>)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	3302      	adds	r3, #2
 8002186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	220f      	movs	r2, #15
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_GPIO_Init+0x314>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d02b      	beq.n	8002202 <HAL_GPIO_Init+0x226>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a51      	ldr	r2, [pc, #324]	; (80022f4 <HAL_GPIO_Init+0x318>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d025      	beq.n	80021fe <HAL_GPIO_Init+0x222>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a50      	ldr	r2, [pc, #320]	; (80022f8 <HAL_GPIO_Init+0x31c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <HAL_GPIO_Init+0x21e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4f      	ldr	r2, [pc, #316]	; (80022fc <HAL_GPIO_Init+0x320>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d019      	beq.n	80021f6 <HAL_GPIO_Init+0x21a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4e      	ldr	r2, [pc, #312]	; (8002300 <HAL_GPIO_Init+0x324>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0x216>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4d      	ldr	r2, [pc, #308]	; (8002304 <HAL_GPIO_Init+0x328>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00d      	beq.n	80021ee <HAL_GPIO_Init+0x212>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4c      	ldr	r2, [pc, #304]	; (8002308 <HAL_GPIO_Init+0x32c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <HAL_GPIO_Init+0x20e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4b      	ldr	r2, [pc, #300]	; (800230c <HAL_GPIO_Init+0x330>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_GPIO_Init+0x20a>
 80021e2:	2307      	movs	r3, #7
 80021e4:	e00e      	b.n	8002204 <HAL_GPIO_Init+0x228>
 80021e6:	2308      	movs	r3, #8
 80021e8:	e00c      	b.n	8002204 <HAL_GPIO_Init+0x228>
 80021ea:	2306      	movs	r3, #6
 80021ec:	e00a      	b.n	8002204 <HAL_GPIO_Init+0x228>
 80021ee:	2305      	movs	r3, #5
 80021f0:	e008      	b.n	8002204 <HAL_GPIO_Init+0x228>
 80021f2:	2304      	movs	r3, #4
 80021f4:	e006      	b.n	8002204 <HAL_GPIO_Init+0x228>
 80021f6:	2303      	movs	r3, #3
 80021f8:	e004      	b.n	8002204 <HAL_GPIO_Init+0x228>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e002      	b.n	8002204 <HAL_GPIO_Init+0x228>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_GPIO_Init+0x228>
 8002202:	2300      	movs	r3, #0
 8002204:	69fa      	ldr	r2, [r7, #28]
 8002206:	f002 0203 	and.w	r2, r2, #3
 800220a:	0092      	lsls	r2, r2, #2
 800220c:	4093      	lsls	r3, r2
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002214:	4935      	ldr	r1, [pc, #212]	; (80022ec <HAL_GPIO_Init+0x310>)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	3302      	adds	r3, #2
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002222:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <HAL_GPIO_Init+0x334>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002246:	4a32      	ldr	r2, [pc, #200]	; (8002310 <HAL_GPIO_Init+0x334>)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800224c:	4b30      	ldr	r3, [pc, #192]	; (8002310 <HAL_GPIO_Init+0x334>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002270:	4a27      	ldr	r2, [pc, #156]	; (8002310 <HAL_GPIO_Init+0x334>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002276:	4b26      	ldr	r3, [pc, #152]	; (8002310 <HAL_GPIO_Init+0x334>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229a:	4a1d      	ldr	r2, [pc, #116]	; (8002310 <HAL_GPIO_Init+0x334>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a0:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <HAL_GPIO_Init+0x334>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c4:	4a12      	ldr	r2, [pc, #72]	; (8002310 <HAL_GPIO_Init+0x334>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3301      	adds	r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	f67f ae90 	bls.w	8001ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3724      	adds	r7, #36	; 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40013800 	.word	0x40013800
 80022f0:	40020000 	.word	0x40020000
 80022f4:	40020400 	.word	0x40020400
 80022f8:	40020800 	.word	0x40020800
 80022fc:	40020c00 	.word	0x40020c00
 8002300:	40021000 	.word	0x40021000
 8002304:	40021400 	.word	0x40021400
 8002308:	40021800 	.word	0x40021800
 800230c:	40021c00 	.word	0x40021c00
 8002310:	40013c00 	.word	0x40013c00

08002314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]
 8002320:	4613      	mov	r3, r2
 8002322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002324:	787b      	ldrb	r3, [r7, #1]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002330:	e003      	b.n	800233a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	041a      	lsls	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	619a      	str	r2, [r3, #24]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e12b      	b.n	80025b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff f99a 	bl	80016a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2224      	movs	r2, #36	; 0x24
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0201 	bic.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800239a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023ac:	f001 fa06 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 80023b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4a81      	ldr	r2, [pc, #516]	; (80025bc <HAL_I2C_Init+0x274>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d807      	bhi.n	80023cc <HAL_I2C_Init+0x84>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4a80      	ldr	r2, [pc, #512]	; (80025c0 <HAL_I2C_Init+0x278>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	bf94      	ite	ls
 80023c4:	2301      	movls	r3, #1
 80023c6:	2300      	movhi	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	e006      	b.n	80023da <HAL_I2C_Init+0x92>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4a7d      	ldr	r2, [pc, #500]	; (80025c4 <HAL_I2C_Init+0x27c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	bf94      	ite	ls
 80023d4:	2301      	movls	r3, #1
 80023d6:	2300      	movhi	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0e7      	b.n	80025b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a78      	ldr	r2, [pc, #480]	; (80025c8 <HAL_I2C_Init+0x280>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0c9b      	lsrs	r3, r3, #18
 80023ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4a6a      	ldr	r2, [pc, #424]	; (80025bc <HAL_I2C_Init+0x274>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d802      	bhi.n	800241c <HAL_I2C_Init+0xd4>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	3301      	adds	r3, #1
 800241a:	e009      	b.n	8002430 <HAL_I2C_Init+0xe8>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	4a69      	ldr	r2, [pc, #420]	; (80025cc <HAL_I2C_Init+0x284>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	099b      	lsrs	r3, r3, #6
 800242e:	3301      	adds	r3, #1
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	430b      	orrs	r3, r1
 8002436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002442:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	495c      	ldr	r1, [pc, #368]	; (80025bc <HAL_I2C_Init+0x274>)
 800244c:	428b      	cmp	r3, r1
 800244e:	d819      	bhi.n	8002484 <HAL_I2C_Init+0x13c>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1e59      	subs	r1, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fbb1 f3f3 	udiv	r3, r1, r3
 800245e:	1c59      	adds	r1, r3, #1
 8002460:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002464:	400b      	ands	r3, r1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_I2C_Init+0x138>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1e59      	subs	r1, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	fbb1 f3f3 	udiv	r3, r1, r3
 8002478:	3301      	adds	r3, #1
 800247a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247e:	e051      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 8002480:	2304      	movs	r3, #4
 8002482:	e04f      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d111      	bne.n	80024b0 <HAL_I2C_Init+0x168>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1e58      	subs	r0, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	440b      	add	r3, r1
 800249a:	fbb0 f3f3 	udiv	r3, r0, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e012      	b.n	80024d6 <HAL_I2C_Init+0x18e>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1e58      	subs	r0, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	0099      	lsls	r1, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_Init+0x196>
 80024da:	2301      	movs	r3, #1
 80024dc:	e022      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10e      	bne.n	8002504 <HAL_I2C_Init+0x1bc>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1e58      	subs	r0, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6859      	ldr	r1, [r3, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	440b      	add	r3, r1
 80024f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f8:	3301      	adds	r3, #1
 80024fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002502:	e00f      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1e58      	subs	r0, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	0099      	lsls	r1, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	fbb0 f3f3 	udiv	r3, r0, r3
 800251a:	3301      	adds	r3, #1
 800251c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	6809      	ldr	r1, [r1, #0]
 8002528:	4313      	orrs	r3, r2
 800252a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69da      	ldr	r2, [r3, #28]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002552:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6911      	ldr	r1, [r2, #16]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68d2      	ldr	r2, [r2, #12]
 800255e:	4311      	orrs	r1, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	430b      	orrs	r3, r1
 8002566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	000186a0 	.word	0x000186a0
 80025c0:	001e847f 	.word	0x001e847f
 80025c4:	003d08ff 	.word	0x003d08ff
 80025c8:	431bde83 	.word	0x431bde83
 80025cc:	10624dd3 	.word	0x10624dd3

080025d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08c      	sub	sp, #48	; 0x30
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	4608      	mov	r0, r1
 80025da:	4611      	mov	r1, r2
 80025dc:	461a      	mov	r2, r3
 80025de:	4603      	mov	r3, r0
 80025e0:	817b      	strh	r3, [r7, #10]
 80025e2:	460b      	mov	r3, r1
 80025e4:	813b      	strh	r3, [r7, #8]
 80025e6:	4613      	mov	r3, r2
 80025e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025ea:	f7ff fb47 	bl	8001c7c <HAL_GetTick>
 80025ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	f040 8208 	bne.w	8002a0e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2319      	movs	r3, #25
 8002604:	2201      	movs	r2, #1
 8002606:	497b      	ldr	r1, [pc, #492]	; (80027f4 <HAL_I2C_Mem_Read+0x224>)
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 faef 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002614:	2302      	movs	r3, #2
 8002616:	e1fb      	b.n	8002a10 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_I2C_Mem_Read+0x56>
 8002622:	2302      	movs	r3, #2
 8002624:	e1f4      	b.n	8002a10 <HAL_I2C_Mem_Read+0x440>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	d007      	beq.n	800264c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2222      	movs	r2, #34	; 0x22
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2240      	movs	r2, #64	; 0x40
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800267c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4a5b      	ldr	r2, [pc, #364]	; (80027f8 <HAL_I2C_Mem_Read+0x228>)
 800268c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800268e:	88f8      	ldrh	r0, [r7, #6]
 8002690:	893a      	ldrh	r2, [r7, #8]
 8002692:	8979      	ldrh	r1, [r7, #10]
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	4603      	mov	r3, r0
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f9bc 	bl	8002a1c <I2C_RequestMemoryRead>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e1b0      	b.n	8002a10 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d113      	bne.n	80026de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	623b      	str	r3, [r7, #32]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	623b      	str	r3, [r7, #32]
 80026ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e184      	b.n	80029e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d11b      	bne.n	800271e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e164      	b.n	80029e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	2b02      	cmp	r3, #2
 8002724:	d11b      	bne.n	800275e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002734:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002744:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	e144      	b.n	80029e8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002774:	e138      	b.n	80029e8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	2b03      	cmp	r3, #3
 800277c:	f200 80f1 	bhi.w	8002962 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	2b01      	cmp	r3, #1
 8002786:	d123      	bne.n	80027d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fb44 	bl	8002e1a <I2C_WaitOnRXNEFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e139      	b.n	8002a10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027ce:	e10b      	b.n	80029e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d14e      	bne.n	8002876 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027de:	2200      	movs	r2, #0
 80027e0:	4906      	ldr	r1, [pc, #24]	; (80027fc <HAL_I2C_Mem_Read+0x22c>)
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fa02 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e10e      	b.n	8002a10 <HAL_I2C_Mem_Read+0x440>
 80027f2:	bf00      	nop
 80027f4:	00100002 	.word	0x00100002
 80027f8:	ffff0000 	.word	0xffff0000
 80027fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800280e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002874:	e0b8      	b.n	80029e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287c:	2200      	movs	r2, #0
 800287e:	4966      	ldr	r1, [pc, #408]	; (8002a18 <HAL_I2C_Mem_Read+0x448>)
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f9b3 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0bf      	b.n	8002a10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800289e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	2200      	movs	r2, #0
 80028da:	494f      	ldr	r1, [pc, #316]	; (8002a18 <HAL_I2C_Mem_Read+0x448>)
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f985 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e091      	b.n	8002a10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002960:	e042      	b.n	80029e8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fa57 	bl	8002e1a <I2C_WaitOnRXNEFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e04c      	b.n	8002a10 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d118      	bne.n	80029e8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f47f aec2 	bne.w	8002776 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e000      	b.n	8002a10 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
  }
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3728      	adds	r7, #40	; 0x28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	00010004 	.word	0x00010004

08002a1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	4608      	mov	r0, r1
 8002a26:	4611      	mov	r1, r2
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	817b      	strh	r3, [r7, #10]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	813b      	strh	r3, [r7, #8]
 8002a32:	4613      	mov	r3, r2
 8002a34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f8c2 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00d      	beq.n	8002a8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7c:	d103      	bne.n	8002a86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0aa      	b.n	8002be0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a8a:	897b      	ldrh	r3, [r7, #10]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	4952      	ldr	r1, [pc, #328]	; (8002be8 <I2C_RequestMemoryRead+0x1cc>)
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f8fa 	bl	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e097      	b.n	8002be0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac8:	6a39      	ldr	r1, [r7, #32]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f964 	bl	8002d98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00d      	beq.n	8002af2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d107      	bne.n	8002aee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e076      	b.n	8002be0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d105      	bne.n	8002b04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002af8:	893b      	ldrh	r3, [r7, #8]
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	611a      	str	r2, [r3, #16]
 8002b02:	e021      	b.n	8002b48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b04:	893b      	ldrh	r3, [r7, #8]
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b14:	6a39      	ldr	r1, [r7, #32]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f93e 	bl	8002d98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00d      	beq.n	8002b3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d107      	bne.n	8002b3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e050      	b.n	8002be0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b3e:	893b      	ldrh	r3, [r7, #8]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4a:	6a39      	ldr	r1, [r7, #32]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f923 	bl	8002d98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00d      	beq.n	8002b74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d107      	bne.n	8002b70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e035      	b.n	8002be0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f82b 	bl	8002bec <I2C_WaitOnFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00d      	beq.n	8002bb8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002baa:	d103      	bne.n	8002bb4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e013      	b.n	8002be0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bb8:	897b      	ldrh	r3, [r7, #10]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	6a3a      	ldr	r2, [r7, #32]
 8002bcc:	4906      	ldr	r1, [pc, #24]	; (8002be8 <I2C_RequestMemoryRead+0x1cc>)
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 f863 	bl	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	00010002 	.word	0x00010002

08002bec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bfc:	e025      	b.n	8002c4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d021      	beq.n	8002c4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c06:	f7ff f839 	bl	8001c7c <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d302      	bcc.n	8002c1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d116      	bne.n	8002c4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f043 0220 	orr.w	r2, r3, #32
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e023      	b.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	0c1b      	lsrs	r3, r3, #16
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d10d      	bne.n	8002c70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf0c      	ite	eq
 8002c66:	2301      	moveq	r3, #1
 8002c68:	2300      	movne	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	e00c      	b.n	8002c8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf0c      	ite	eq
 8002c82:	2301      	moveq	r3, #1
 8002c84:	2300      	movne	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d0b6      	beq.n	8002bfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ca8:	e051      	b.n	8002d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb8:	d123      	bne.n	8002d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f043 0204 	orr.w	r2, r3, #4
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e046      	b.n	8002d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d021      	beq.n	8002d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0a:	f7fe ffb7 	bl	8001c7c <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d302      	bcc.n	8002d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d116      	bne.n	8002d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f043 0220 	orr.w	r2, r3, #32
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e020      	b.n	8002d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d10c      	bne.n	8002d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4013      	ands	r3, r2
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	bf14      	ite	ne
 8002d6a:	2301      	movne	r3, #1
 8002d6c:	2300      	moveq	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	e00b      	b.n	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	43da      	mvns	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf14      	ite	ne
 8002d84:	2301      	movne	r3, #1
 8002d86:	2300      	moveq	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d18d      	bne.n	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002da4:	e02d      	b.n	8002e02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f88d 	bl	8002ec6 <I2C_IsAcknowledgeFailed>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e02d      	b.n	8002e12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d021      	beq.n	8002e02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dbe:	f7fe ff5d 	bl	8001c7c <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d302      	bcc.n	8002dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d116      	bne.n	8002e02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f043 0220 	orr.w	r2, r3, #32
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e007      	b.n	8002e12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0c:	2b80      	cmp	r3, #128	; 0x80
 8002e0e:	d1ca      	bne.n	8002da6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e26:	e042      	b.n	8002eae <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b10      	cmp	r3, #16
 8002e34:	d119      	bne.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f06f 0210 	mvn.w	r2, #16
 8002e3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e029      	b.n	8002ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6a:	f7fe ff07 	bl	8001c7c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d302      	bcc.n	8002e80 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d116      	bne.n	8002eae <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f043 0220 	orr.w	r2, r3, #32
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e007      	b.n	8002ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb8:	2b40      	cmp	r3, #64	; 0x40
 8002eba:	d1b5      	bne.n	8002e28 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002edc:	d11b      	bne.n	8002f16 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ee6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f043 0204 	orr.w	r2, r3, #4
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e264      	b.n	8003400 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d075      	beq.n	800302e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f42:	4ba3      	ldr	r3, [pc, #652]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d00c      	beq.n	8002f68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f4e:	4ba0      	ldr	r3, [pc, #640]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d112      	bne.n	8002f80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f5a:	4b9d      	ldr	r3, [pc, #628]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f66:	d10b      	bne.n	8002f80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	4b99      	ldr	r3, [pc, #612]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d05b      	beq.n	800302c <HAL_RCC_OscConfig+0x108>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d157      	bne.n	800302c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e23f      	b.n	8003400 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f88:	d106      	bne.n	8002f98 <HAL_RCC_OscConfig+0x74>
 8002f8a:	4b91      	ldr	r3, [pc, #580]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a90      	ldr	r2, [pc, #576]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e01d      	b.n	8002fd4 <HAL_RCC_OscConfig+0xb0>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x98>
 8002fa2:	4b8b      	ldr	r3, [pc, #556]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a8a      	ldr	r2, [pc, #552]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8002fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b88      	ldr	r3, [pc, #544]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a87      	ldr	r2, [pc, #540]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0xb0>
 8002fbc:	4b84      	ldr	r3, [pc, #528]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a83      	ldr	r2, [pc, #524]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b81      	ldr	r3, [pc, #516]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a80      	ldr	r2, [pc, #512]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8002fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fe4e 	bl	8001c7c <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe fe4a 	bl	8001c7c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e204      	b.n	8003400 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b76      	ldr	r3, [pc, #472]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xc0>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fe fe3a 	bl	8001c7c <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800300c:	f7fe fe36 	bl	8001c7c <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	; 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e1f0      	b.n	8003400 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	4b6c      	ldr	r3, [pc, #432]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0xe8>
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d063      	beq.n	8003102 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800303a:	4b65      	ldr	r3, [pc, #404]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00b      	beq.n	800305e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003046:	4b62      	ldr	r3, [pc, #392]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800304e:	2b08      	cmp	r3, #8
 8003050:	d11c      	bne.n	800308c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003052:	4b5f      	ldr	r3, [pc, #380]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d116      	bne.n	800308c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305e:	4b5c      	ldr	r3, [pc, #368]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_RCC_OscConfig+0x152>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e1c4      	b.n	8003400 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003076:	4b56      	ldr	r3, [pc, #344]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4952      	ldr	r1, [pc, #328]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	e03a      	b.n	8003102 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003094:	4b4f      	ldr	r3, [pc, #316]	; (80031d4 <HAL_RCC_OscConfig+0x2b0>)
 8003096:	2201      	movs	r2, #1
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309a:	f7fe fdef 	bl	8001c7c <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a2:	f7fe fdeb 	bl	8001c7c <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e1a5      	b.n	8003400 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b4:	4b46      	ldr	r3, [pc, #280]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c0:	4b43      	ldr	r3, [pc, #268]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4940      	ldr	r1, [pc, #256]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
 80030d4:	e015      	b.n	8003102 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d6:	4b3f      	ldr	r3, [pc, #252]	; (80031d4 <HAL_RCC_OscConfig+0x2b0>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe fdce 	bl	8001c7c <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e4:	f7fe fdca 	bl	8001c7c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e184      	b.n	8003400 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	4b36      	ldr	r3, [pc, #216]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d030      	beq.n	8003170 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003116:	4b30      	ldr	r3, [pc, #192]	; (80031d8 <HAL_RCC_OscConfig+0x2b4>)
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311c:	f7fe fdae 	bl	8001c7c <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003124:	f7fe fdaa 	bl	8001c7c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e164      	b.n	8003400 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003136:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x200>
 8003142:	e015      	b.n	8003170 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003144:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <HAL_RCC_OscConfig+0x2b4>)
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314a:	f7fe fd97 	bl	8001c7c <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003152:	f7fe fd93 	bl	8001c7c <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e14d      	b.n	8003400 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003164:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8003166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f0      	bne.n	8003152 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80a0 	beq.w	80032be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003182:	4b13      	ldr	r3, [pc, #76]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10f      	bne.n	80031ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	4a0e      	ldr	r2, [pc, #56]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319c:	6413      	str	r3, [r2, #64]	; 0x40
 800319e:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031aa:	2301      	movs	r3, #1
 80031ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCC_OscConfig+0x2b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d121      	bne.n	80031fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <HAL_RCC_OscConfig+0x2b8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a07      	ldr	r2, [pc, #28]	; (80031dc <HAL_RCC_OscConfig+0x2b8>)
 80031c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c6:	f7fe fd59 	bl	8001c7c <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	e011      	b.n	80031f2 <HAL_RCC_OscConfig+0x2ce>
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	42470000 	.word	0x42470000
 80031d8:	42470e80 	.word	0x42470e80
 80031dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e0:	f7fe fd4c 	bl	8001c7c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e106      	b.n	8003400 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f2:	4b85      	ldr	r3, [pc, #532]	; (8003408 <HAL_RCC_OscConfig+0x4e4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d106      	bne.n	8003214 <HAL_RCC_OscConfig+0x2f0>
 8003206:	4b81      	ldr	r3, [pc, #516]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320a:	4a80      	ldr	r2, [pc, #512]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	6713      	str	r3, [r2, #112]	; 0x70
 8003212:	e01c      	b.n	800324e <HAL_RCC_OscConfig+0x32a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b05      	cmp	r3, #5
 800321a:	d10c      	bne.n	8003236 <HAL_RCC_OscConfig+0x312>
 800321c:	4b7b      	ldr	r3, [pc, #492]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003220:	4a7a      	ldr	r2, [pc, #488]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 8003222:	f043 0304 	orr.w	r3, r3, #4
 8003226:	6713      	str	r3, [r2, #112]	; 0x70
 8003228:	4b78      	ldr	r3, [pc, #480]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322c:	4a77      	ldr	r2, [pc, #476]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	6713      	str	r3, [r2, #112]	; 0x70
 8003234:	e00b      	b.n	800324e <HAL_RCC_OscConfig+0x32a>
 8003236:	4b75      	ldr	r3, [pc, #468]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	4a74      	ldr	r2, [pc, #464]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	6713      	str	r3, [r2, #112]	; 0x70
 8003242:	4b72      	ldr	r3, [pc, #456]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	4a71      	ldr	r2, [pc, #452]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 8003248:	f023 0304 	bic.w	r3, r3, #4
 800324c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d015      	beq.n	8003282 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003256:	f7fe fd11 	bl	8001c7c <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325c:	e00a      	b.n	8003274 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7fe fd0d 	bl	8001c7c <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f241 3288 	movw	r2, #5000	; 0x1388
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e0c5      	b.n	8003400 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003274:	4b65      	ldr	r3, [pc, #404]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0ee      	beq.n	800325e <HAL_RCC_OscConfig+0x33a>
 8003280:	e014      	b.n	80032ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003282:	f7fe fcfb 	bl	8001c7c <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003288:	e00a      	b.n	80032a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7fe fcf7 	bl	8001c7c <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f241 3288 	movw	r2, #5000	; 0x1388
 8003298:	4293      	cmp	r3, r2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e0af      	b.n	8003400 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a0:	4b5a      	ldr	r3, [pc, #360]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1ee      	bne.n	800328a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d105      	bne.n	80032be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b2:	4b56      	ldr	r3, [pc, #344]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	4a55      	ldr	r2, [pc, #340]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 80032b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 809b 	beq.w	80033fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032c8:	4b50      	ldr	r3, [pc, #320]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 030c 	and.w	r3, r3, #12
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d05c      	beq.n	800338e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d141      	bne.n	8003360 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032dc:	4b4c      	ldr	r3, [pc, #304]	; (8003410 <HAL_RCC_OscConfig+0x4ec>)
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e2:	f7fe fccb 	bl	8001c7c <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ea:	f7fe fcc7 	bl	8001c7c <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e081      	b.n	8003400 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fc:	4b43      	ldr	r3, [pc, #268]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1f0      	bne.n	80032ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69da      	ldr	r2, [r3, #28]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	019b      	lsls	r3, r3, #6
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	3b01      	subs	r3, #1
 8003322:	041b      	lsls	r3, r3, #16
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	061b      	lsls	r3, r3, #24
 800332c:	4937      	ldr	r1, [pc, #220]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 800332e:	4313      	orrs	r3, r2
 8003330:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003332:	4b37      	ldr	r3, [pc, #220]	; (8003410 <HAL_RCC_OscConfig+0x4ec>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fca0 	bl	8001c7c <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003340:	f7fe fc9c 	bl	8001c7c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e056      	b.n	8003400 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003352:	4b2e      	ldr	r3, [pc, #184]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x41c>
 800335e:	e04e      	b.n	80033fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003360:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <HAL_RCC_OscConfig+0x4ec>)
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fe fc89 	bl	8001c7c <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336e:	f7fe fc85 	bl	8001c7c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e03f      	b.n	8003400 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003380:	4b22      	ldr	r3, [pc, #136]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f0      	bne.n	800336e <HAL_RCC_OscConfig+0x44a>
 800338c:	e037      	b.n	80033fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e032      	b.n	8003400 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800339a:	4b1c      	ldr	r3, [pc, #112]	; (800340c <HAL_RCC_OscConfig+0x4e8>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d028      	beq.n	80033fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d121      	bne.n	80033fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d11a      	bne.n	80033fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033ca:	4013      	ands	r3, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d111      	bne.n	80033fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	085b      	lsrs	r3, r3, #1
 80033e2:	3b01      	subs	r3, #1
 80033e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40007000 	.word	0x40007000
 800340c:	40023800 	.word	0x40023800
 8003410:	42470060 	.word	0x42470060

08003414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0cc      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b68      	ldr	r3, [pc, #416]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d90c      	bls.n	8003450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b65      	ldr	r3, [pc, #404]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800343e:	4b63      	ldr	r3, [pc, #396]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d001      	beq.n	8003450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0b8      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d020      	beq.n	800349e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003468:	4b59      	ldr	r3, [pc, #356]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	4a58      	ldr	r2, [pc, #352]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003480:	4b53      	ldr	r3, [pc, #332]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4a52      	ldr	r2, [pc, #328]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800348a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800348c:	4b50      	ldr	r3, [pc, #320]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	494d      	ldr	r1, [pc, #308]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d044      	beq.n	8003534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	4b47      	ldr	r3, [pc, #284]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d119      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e07f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d003      	beq.n	80034d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d2:	4b3f      	ldr	r3, [pc, #252]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e06f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e2:	4b3b      	ldr	r3, [pc, #236]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e067      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f2:	4b37      	ldr	r3, [pc, #220]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4934      	ldr	r1, [pc, #208]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	4313      	orrs	r3, r2
 8003502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003504:	f7fe fbba 	bl	8001c7c <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	e00a      	b.n	8003522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7fe fbb6 	bl	8001c7c <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e04f      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 020c 	and.w	r2, r3, #12
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	429a      	cmp	r2, r3
 8003532:	d1eb      	bne.n	800350c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003534:	4b25      	ldr	r3, [pc, #148]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d20c      	bcs.n	800355c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b22      	ldr	r3, [pc, #136]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <HAL_RCC_ClockConfig+0x1b8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e032      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003568:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4916      	ldr	r1, [pc, #88]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003586:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	490e      	ldr	r1, [pc, #56]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800359a:	f000 f821 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 800359e:	4602      	mov	r2, r0
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	490a      	ldr	r1, [pc, #40]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	5ccb      	ldrb	r3, [r1, r3]
 80035ae:	fa22 f303 	lsr.w	r3, r2, r3
 80035b2:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <HAL_RCC_ClockConfig+0x1c8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe fb1a 	bl	8001bf4 <HAL_InitTick>

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40023c00 	.word	0x40023c00
 80035d0:	40023800 	.word	0x40023800
 80035d4:	0800cd70 	.word	0x0800cd70
 80035d8:	20000008 	.word	0x20000008
 80035dc:	2000000c 	.word	0x2000000c

080035e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	607b      	str	r3, [r7, #4]
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	2300      	movs	r3, #0
 80035f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035f8:	4b67      	ldr	r3, [pc, #412]	; (8003798 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b08      	cmp	r3, #8
 8003602:	d00d      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x40>
 8003604:	2b08      	cmp	r3, #8
 8003606:	f200 80bd 	bhi.w	8003784 <HAL_RCC_GetSysClockFreq+0x1a4>
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x34>
 800360e:	2b04      	cmp	r3, #4
 8003610:	d003      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0x3a>
 8003612:	e0b7      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003614:	4b61      	ldr	r3, [pc, #388]	; (800379c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003616:	60bb      	str	r3, [r7, #8]
       break;
 8003618:	e0b7      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800361a:	4b61      	ldr	r3, [pc, #388]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800361c:	60bb      	str	r3, [r7, #8]
      break;
 800361e:	e0b4      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003620:	4b5d      	ldr	r3, [pc, #372]	; (8003798 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003628:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800362a:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d04d      	beq.n	80036d2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003636:	4b58      	ldr	r3, [pc, #352]	; (8003798 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	099b      	lsrs	r3, r3, #6
 800363c:	461a      	mov	r2, r3
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003646:	f04f 0100 	mov.w	r1, #0
 800364a:	ea02 0800 	and.w	r8, r2, r0
 800364e:	ea03 0901 	and.w	r9, r3, r1
 8003652:	4640      	mov	r0, r8
 8003654:	4649      	mov	r1, r9
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	014b      	lsls	r3, r1, #5
 8003660:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003664:	0142      	lsls	r2, r0, #5
 8003666:	4610      	mov	r0, r2
 8003668:	4619      	mov	r1, r3
 800366a:	ebb0 0008 	subs.w	r0, r0, r8
 800366e:	eb61 0109 	sbc.w	r1, r1, r9
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	018b      	lsls	r3, r1, #6
 800367c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003680:	0182      	lsls	r2, r0, #6
 8003682:	1a12      	subs	r2, r2, r0
 8003684:	eb63 0301 	sbc.w	r3, r3, r1
 8003688:	f04f 0000 	mov.w	r0, #0
 800368c:	f04f 0100 	mov.w	r1, #0
 8003690:	00d9      	lsls	r1, r3, #3
 8003692:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003696:	00d0      	lsls	r0, r2, #3
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	eb12 0208 	adds.w	r2, r2, r8
 80036a0:	eb43 0309 	adc.w	r3, r3, r9
 80036a4:	f04f 0000 	mov.w	r0, #0
 80036a8:	f04f 0100 	mov.w	r1, #0
 80036ac:	0259      	lsls	r1, r3, #9
 80036ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80036b2:	0250      	lsls	r0, r2, #9
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4610      	mov	r0, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	461a      	mov	r2, r3
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	f7fc fd88 	bl	80001d8 <__aeabi_uldivmod>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4613      	mov	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	e04a      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d2:	4b31      	ldr	r3, [pc, #196]	; (8003798 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	099b      	lsrs	r3, r3, #6
 80036d8:	461a      	mov	r2, r3
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036e2:	f04f 0100 	mov.w	r1, #0
 80036e6:	ea02 0400 	and.w	r4, r2, r0
 80036ea:	ea03 0501 	and.w	r5, r3, r1
 80036ee:	4620      	mov	r0, r4
 80036f0:	4629      	mov	r1, r5
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	014b      	lsls	r3, r1, #5
 80036fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003700:	0142      	lsls	r2, r0, #5
 8003702:	4610      	mov	r0, r2
 8003704:	4619      	mov	r1, r3
 8003706:	1b00      	subs	r0, r0, r4
 8003708:	eb61 0105 	sbc.w	r1, r1, r5
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	018b      	lsls	r3, r1, #6
 8003716:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800371a:	0182      	lsls	r2, r0, #6
 800371c:	1a12      	subs	r2, r2, r0
 800371e:	eb63 0301 	sbc.w	r3, r3, r1
 8003722:	f04f 0000 	mov.w	r0, #0
 8003726:	f04f 0100 	mov.w	r1, #0
 800372a:	00d9      	lsls	r1, r3, #3
 800372c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003730:	00d0      	lsls	r0, r2, #3
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	1912      	adds	r2, r2, r4
 8003738:	eb45 0303 	adc.w	r3, r5, r3
 800373c:	f04f 0000 	mov.w	r0, #0
 8003740:	f04f 0100 	mov.w	r1, #0
 8003744:	0299      	lsls	r1, r3, #10
 8003746:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800374a:	0290      	lsls	r0, r2, #10
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	461a      	mov	r2, r3
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	f7fc fd3c 	bl	80001d8 <__aeabi_uldivmod>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4613      	mov	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	0c1b      	lsrs	r3, r3, #16
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	3301      	adds	r3, #1
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003780:	60bb      	str	r3, [r7, #8]
      break;
 8003782:	e002      	b.n	800378a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003786:	60bb      	str	r3, [r7, #8]
      break;
 8003788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800378a:	68bb      	ldr	r3, [r7, #8]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800
 800379c:	00f42400 	.word	0x00f42400
 80037a0:	007a1200 	.word	0x007a1200

080037a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037aa:	681b      	ldr	r3, [r3, #0]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000008 	.word	0x20000008

080037bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037c0:	f7ff fff0 	bl	80037a4 <HAL_RCC_GetHCLKFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	0a9b      	lsrs	r3, r3, #10
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	4903      	ldr	r1, [pc, #12]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40023800 	.word	0x40023800
 80037e0:	0800cd80 	.word	0x0800cd80

080037e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037e8:	f7ff ffdc 	bl	80037a4 <HAL_RCC_GetHCLKFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	0b5b      	lsrs	r3, r3, #13
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4903      	ldr	r1, [pc, #12]	; (8003808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003800:	4618      	mov	r0, r3
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40023800 	.word	0x40023800
 8003808:	0800cd80 	.word	0x0800cd80

0800380c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e07b      	b.n	8003916 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	2b00      	cmp	r3, #0
 8003824:	d108      	bne.n	8003838 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800382e:	d009      	beq.n	8003844 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	61da      	str	r2, [r3, #28]
 8003836:	e005      	b.n	8003844 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd ff6a 	bl	8001738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800387a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	ea42 0103 	orr.w	r1, r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	f003 0104 	and.w	r1, r3, #4
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	f003 0210 	and.w	r2, r3, #16
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69da      	ldr	r2, [r3, #28]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003904:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b088      	sub	sp, #32
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	4613      	mov	r3, r2
 800392c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_SPI_Transmit+0x22>
 800393c:	2302      	movs	r3, #2
 800393e:	e126      	b.n	8003b8e <HAL_SPI_Transmit+0x270>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003948:	f7fe f998 	bl	8001c7c <HAL_GetTick>
 800394c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b01      	cmp	r3, #1
 800395c:	d002      	beq.n	8003964 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800395e:	2302      	movs	r3, #2
 8003960:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003962:	e10b      	b.n	8003b7c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_SPI_Transmit+0x52>
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003974:	e102      	b.n	8003b7c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2203      	movs	r2, #3
 800397a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	88fa      	ldrh	r2, [r7, #6]
 800398e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039bc:	d10f      	bne.n	80039de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d007      	beq.n	80039fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a04:	d14b      	bne.n	8003a9e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_SPI_Transmit+0xf6>
 8003a0e:	8afb      	ldrh	r3, [r7, #22]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d13e      	bne.n	8003a92 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	881a      	ldrh	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	1c9a      	adds	r2, r3, #2
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a38:	e02b      	b.n	8003a92 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d112      	bne.n	8003a6e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	881a      	ldrh	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	1c9a      	adds	r2, r3, #2
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a6c:	e011      	b.n	8003a92 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a6e:	f7fe f905 	bl	8001c7c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d803      	bhi.n	8003a86 <HAL_SPI_Transmit+0x168>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d102      	bne.n	8003a8c <HAL_SPI_Transmit+0x16e>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a90:	e074      	b.n	8003b7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1ce      	bne.n	8003a3a <HAL_SPI_Transmit+0x11c>
 8003a9c:	e04c      	b.n	8003b38 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_SPI_Transmit+0x18e>
 8003aa6:	8afb      	ldrh	r3, [r7, #22]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d140      	bne.n	8003b2e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ad2:	e02c      	b.n	8003b2e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d113      	bne.n	8003b0a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	330c      	adds	r3, #12
 8003aec:	7812      	ldrb	r2, [r2, #0]
 8003aee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b08:	e011      	b.n	8003b2e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b0a:	f7fe f8b7 	bl	8001c7c <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d803      	bhi.n	8003b22 <HAL_SPI_Transmit+0x204>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b20:	d102      	bne.n	8003b28 <HAL_SPI_Transmit+0x20a>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d102      	bne.n	8003b2e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b2c:	e026      	b.n	8003b7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1cd      	bne.n	8003ad4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	6839      	ldr	r1, [r7, #0]
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 fbcb 	bl	80042d8 <SPI_EndRxTxTransaction>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10a      	bne.n	8003b6c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	77fb      	strb	r3, [r7, #31]
 8003b78:	e000      	b.n	8003b7c <HAL_SPI_Transmit+0x25e>
  }

error:
 8003b7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b088      	sub	sp, #32
 8003b9a:	af02      	add	r7, sp, #8
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	603b      	str	r3, [r7, #0]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bb2:	d112      	bne.n	8003bda <HAL_SPI_Receive+0x44>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10e      	bne.n	8003bda <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003bc4:	88fa      	ldrh	r2, [r7, #6]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 f8f1 	bl	8003db8 <HAL_SPI_TransmitReceive>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	e0ea      	b.n	8003db0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_SPI_Receive+0x52>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e0e3      	b.n	8003db0 <HAL_SPI_Receive+0x21a>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bf0:	f7fe f844 	bl	8001c7c <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d002      	beq.n	8003c08 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
 8003c04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c06:	e0ca      	b.n	8003d9e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_SPI_Receive+0x7e>
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c18:	e0c1      	b.n	8003d9e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	88fa      	ldrh	r2, [r7, #6]
 8003c32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	88fa      	ldrh	r2, [r7, #6]
 8003c38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c60:	d10f      	bne.n	8003c82 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8c:	2b40      	cmp	r3, #64	; 0x40
 8003c8e:	d007      	beq.n	8003ca0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d162      	bne.n	8003d6e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ca8:	e02e      	b.n	8003d08 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d115      	bne.n	8003ce4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f103 020c 	add.w	r2, r3, #12
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc4:	7812      	ldrb	r2, [r2, #0]
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ce2:	e011      	b.n	8003d08 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ce4:	f7fd ffca 	bl	8001c7c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d803      	bhi.n	8003cfc <HAL_SPI_Receive+0x166>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfa:	d102      	bne.n	8003d02 <HAL_SPI_Receive+0x16c>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d102      	bne.n	8003d08 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d06:	e04a      	b.n	8003d9e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1cb      	bne.n	8003caa <HAL_SPI_Receive+0x114>
 8003d12:	e031      	b.n	8003d78 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d113      	bne.n	8003d4a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	b292      	uxth	r2, r2
 8003d2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	1c9a      	adds	r2, r3, #2
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d48:	e011      	b.n	8003d6e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d4a:	f7fd ff97 	bl	8001c7c <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d803      	bhi.n	8003d62 <HAL_SPI_Receive+0x1cc>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d102      	bne.n	8003d68 <HAL_SPI_Receive+0x1d2>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d6c:	e017      	b.n	8003d9e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1cd      	bne.n	8003d14 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	6839      	ldr	r1, [r7, #0]
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fa45 	bl	800420c <SPI_EndRxTransaction>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	75fb      	strb	r3, [r7, #23]
 8003d9a:	e000      	b.n	8003d9e <HAL_SPI_Receive+0x208>
  }

error :
 8003d9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08c      	sub	sp, #48	; 0x30
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_SPI_TransmitReceive+0x26>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e18a      	b.n	80040f4 <HAL_SPI_TransmitReceive+0x33c>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003de6:	f7fd ff49 	bl	8001c7c <HAL_GetTick>
 8003dea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003dfc:	887b      	ldrh	r3, [r7, #2]
 8003dfe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d00f      	beq.n	8003e28 <HAL_SPI_TransmitReceive+0x70>
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e0e:	d107      	bne.n	8003e20 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d103      	bne.n	8003e20 <HAL_SPI_TransmitReceive+0x68>
 8003e18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d003      	beq.n	8003e28 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e20:	2302      	movs	r3, #2
 8003e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e26:	e15b      	b.n	80040e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_SPI_TransmitReceive+0x82>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_SPI_TransmitReceive+0x82>
 8003e34:	887b      	ldrh	r3, [r7, #2]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e40:	e14e      	b.n	80040e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d003      	beq.n	8003e56 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2205      	movs	r2, #5
 8003e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	887a      	ldrh	r2, [r7, #2]
 8003e66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	887a      	ldrh	r2, [r7, #2]
 8003e6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	887a      	ldrh	r2, [r7, #2]
 8003e78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	887a      	ldrh	r2, [r7, #2]
 8003e7e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e96:	2b40      	cmp	r3, #64	; 0x40
 8003e98:	d007      	beq.n	8003eaa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb2:	d178      	bne.n	8003fa6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_SPI_TransmitReceive+0x10a>
 8003ebc:	8b7b      	ldrh	r3, [r7, #26]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d166      	bne.n	8003f90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	881a      	ldrh	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	1c9a      	adds	r2, r3, #2
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ee6:	e053      	b.n	8003f90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d11b      	bne.n	8003f2e <HAL_SPI_TransmitReceive+0x176>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d016      	beq.n	8003f2e <HAL_SPI_TransmitReceive+0x176>
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d113      	bne.n	8003f2e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	881a      	ldrh	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	1c9a      	adds	r2, r3, #2
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d119      	bne.n	8003f70 <HAL_SPI_TransmitReceive+0x1b8>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d014      	beq.n	8003f70 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	b292      	uxth	r2, r2
 8003f52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	1c9a      	adds	r2, r3, #2
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f70:	f7fd fe84 	bl	8001c7c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d807      	bhi.n	8003f90 <HAL_SPI_TransmitReceive+0x1d8>
 8003f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f86:	d003      	beq.n	8003f90 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f8e:	e0a7      	b.n	80040e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1a6      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x130>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1a1      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x130>
 8003fa4:	e07c      	b.n	80040a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_SPI_TransmitReceive+0x1fc>
 8003fae:	8b7b      	ldrh	r3, [r7, #26]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d16b      	bne.n	800408c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	7812      	ldrb	r2, [r2, #0]
 8003fc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fda:	e057      	b.n	800408c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d11c      	bne.n	8004024 <HAL_SPI_TransmitReceive+0x26c>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d017      	beq.n	8004024 <HAL_SPI_TransmitReceive+0x26c>
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d114      	bne.n	8004024 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	330c      	adds	r3, #12
 8004004:	7812      	ldrb	r2, [r2, #0]
 8004006:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b01      	cmp	r3, #1
 8004030:	d119      	bne.n	8004066 <HAL_SPI_TransmitReceive+0x2ae>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d014      	beq.n	8004066 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004062:	2301      	movs	r3, #1
 8004064:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004066:	f7fd fe09 	bl	8001c7c <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004072:	429a      	cmp	r2, r3
 8004074:	d803      	bhi.n	800407e <HAL_SPI_TransmitReceive+0x2c6>
 8004076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d102      	bne.n	8004084 <HAL_SPI_TransmitReceive+0x2cc>
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	2b00      	cmp	r3, #0
 8004082:	d103      	bne.n	800408c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800408a:	e029      	b.n	80040e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1a2      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x224>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800409a:	b29b      	uxth	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d19d      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f917 	bl	80042d8 <SPI_EndRxTxTransaction>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d006      	beq.n	80040be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80040bc:	e010      	b.n	80040e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10b      	bne.n	80040de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040c6:	2300      	movs	r3, #0
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	e000      	b.n	80040e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80040de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3730      	adds	r7, #48	; 0x30
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800410c:	f7fd fdb6 	bl	8001c7c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	4413      	add	r3, r2
 800411a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800411c:	f7fd fdae 	bl	8001c7c <HAL_GetTick>
 8004120:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004122:	4b39      	ldr	r3, [pc, #228]	; (8004208 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	015b      	lsls	r3, r3, #5
 8004128:	0d1b      	lsrs	r3, r3, #20
 800412a:	69fa      	ldr	r2, [r7, #28]
 800412c:	fb02 f303 	mul.w	r3, r2, r3
 8004130:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004132:	e054      	b.n	80041de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413a:	d050      	beq.n	80041de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800413c:	f7fd fd9e 	bl	8001c7c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	429a      	cmp	r2, r3
 800414a:	d902      	bls.n	8004152 <SPI_WaitFlagStateUntilTimeout+0x56>
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d13d      	bne.n	80041ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004160:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800416a:	d111      	bne.n	8004190 <SPI_WaitFlagStateUntilTimeout+0x94>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004174:	d004      	beq.n	8004180 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417e:	d107      	bne.n	8004190 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800418e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004198:	d10f      	bne.n	80041ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e017      	b.n	80041fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	3b01      	subs	r3, #1
 80041dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4013      	ands	r3, r2
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	bf0c      	ite	eq
 80041ee:	2301      	moveq	r3, #1
 80041f0:	2300      	movne	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d19b      	bne.n	8004134 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000008 	.word	0x20000008

0800420c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004220:	d111      	bne.n	8004246 <SPI_EndRxTransaction+0x3a>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800422a:	d004      	beq.n	8004236 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004234:	d107      	bne.n	8004246 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004244:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800424e:	d12a      	bne.n	80042a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004258:	d012      	beq.n	8004280 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2200      	movs	r2, #0
 8004262:	2180      	movs	r1, #128	; 0x80
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f7ff ff49 	bl	80040fc <SPI_WaitFlagStateUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d02d      	beq.n	80042cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	f043 0220 	orr.w	r2, r3, #32
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e026      	b.n	80042ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2200      	movs	r2, #0
 8004288:	2101      	movs	r1, #1
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f7ff ff36 	bl	80040fc <SPI_WaitFlagStateUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d01a      	beq.n	80042cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429a:	f043 0220 	orr.w	r2, r3, #32
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e013      	b.n	80042ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2200      	movs	r2, #0
 80042ae:	2101      	movs	r1, #1
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f7ff ff23 	bl	80040fc <SPI_WaitFlagStateUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d007      	beq.n	80042cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c0:	f043 0220 	orr.w	r2, r3, #32
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e000      	b.n	80042ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af02      	add	r7, sp, #8
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042e4:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <SPI_EndRxTxTransaction+0x7c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1b      	ldr	r2, [pc, #108]	; (8004358 <SPI_EndRxTxTransaction+0x80>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	0d5b      	lsrs	r3, r3, #21
 80042f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042f4:	fb02 f303 	mul.w	r3, r2, r3
 80042f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004302:	d112      	bne.n	800432a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2200      	movs	r2, #0
 800430c:	2180      	movs	r1, #128	; 0x80
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f7ff fef4 	bl	80040fc <SPI_WaitFlagStateUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d016      	beq.n	8004348 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	f043 0220 	orr.w	r2, r3, #32
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e00f      	b.n	800434a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	3b01      	subs	r3, #1
 8004334:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004340:	2b80      	cmp	r3, #128	; 0x80
 8004342:	d0f2      	beq.n	800432a <SPI_EndRxTxTransaction+0x52>
 8004344:	e000      	b.n	8004348 <SPI_EndRxTxTransaction+0x70>
        break;
 8004346:	bf00      	nop
  }

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000008 	.word	0x20000008
 8004358:	165e9f81 	.word	0x165e9f81

0800435c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e034      	b.n	80043dc <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f7fd fae0 	bl	800194c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3308      	adds	r3, #8
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f001 fc6e 	bl	8005c78 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	461a      	mov	r2, r3
 80043a6:	68b9      	ldr	r1, [r7, #8]
 80043a8:	f001 fcb8 	bl	8005d1c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6858      	ldr	r0, [r3, #4]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	f001 fced 	bl	8005d98 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	6892      	ldr	r2, [r2, #8]
 80043c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	6892      	ldr	r2, [r2, #8]
 80043d2:	f041 0101 	orr.w	r1, r1, #1
 80043d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e041      	b.n	800447a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fd f9dc 	bl	80017c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3304      	adds	r3, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f000 fa96 	bl	8004954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b01      	cmp	r3, #1
 8004496:	d001      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e04e      	b.n	800453a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a23      	ldr	r2, [pc, #140]	; (8004548 <HAL_TIM_Base_Start_IT+0xc4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d022      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c6:	d01d      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1f      	ldr	r2, [pc, #124]	; (800454c <HAL_TIM_Base_Start_IT+0xc8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d018      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1e      	ldr	r2, [pc, #120]	; (8004550 <HAL_TIM_Base_Start_IT+0xcc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1c      	ldr	r2, [pc, #112]	; (8004554 <HAL_TIM_Base_Start_IT+0xd0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00e      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1b      	ldr	r2, [pc, #108]	; (8004558 <HAL_TIM_Base_Start_IT+0xd4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a19      	ldr	r2, [pc, #100]	; (800455c <HAL_TIM_Base_Start_IT+0xd8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x80>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a18      	ldr	r2, [pc, #96]	; (8004560 <HAL_TIM_Base_Start_IT+0xdc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d111      	bne.n	8004528 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b06      	cmp	r3, #6
 8004514:	d010      	beq.n	8004538 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004526:	e007      	b.n	8004538 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40010000 	.word	0x40010000
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40010400 	.word	0x40010400
 800455c:	40014000 	.word	0x40014000
 8004560:	40001800 	.word	0x40001800

08004564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b02      	cmp	r3, #2
 8004578:	d122      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b02      	cmp	r3, #2
 8004586:	d11b      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0202 	mvn.w	r2, #2
 8004590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f9b5 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 80045ac:	e005      	b.n	80045ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f9a7 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f9b8 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d122      	bne.n	8004614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d11b      	bne.n	8004614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0204 	mvn.w	r2, #4
 80045e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2202      	movs	r2, #2
 80045ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f98b 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 8004600:	e005      	b.n	800460e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f97d 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f98e 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b08      	cmp	r3, #8
 8004620:	d122      	bne.n	8004668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b08      	cmp	r3, #8
 800462e:	d11b      	bne.n	8004668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0208 	mvn.w	r2, #8
 8004638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2204      	movs	r2, #4
 800463e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f961 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 8004654:	e005      	b.n	8004662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f953 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f964 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b10      	cmp	r3, #16
 8004674:	d122      	bne.n	80046bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b10      	cmp	r3, #16
 8004682:	d11b      	bne.n	80046bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0210 	mvn.w	r2, #16
 800468c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2208      	movs	r2, #8
 8004692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f937 	bl	8004916 <HAL_TIM_IC_CaptureCallback>
 80046a8:	e005      	b.n	80046b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f929 	bl	8004902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f93a 	bl	800492a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d10e      	bne.n	80046e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d107      	bne.n	80046e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0201 	mvn.w	r2, #1
 80046e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fc fe80 	bl	80013e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f2:	2b80      	cmp	r3, #128	; 0x80
 80046f4:	d10e      	bne.n	8004714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004700:	2b80      	cmp	r3, #128	; 0x80
 8004702:	d107      	bne.n	8004714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800470c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fae0 	bl	8004cd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471e:	2b40      	cmp	r3, #64	; 0x40
 8004720:	d10e      	bne.n	8004740 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472c:	2b40      	cmp	r3, #64	; 0x40
 800472e:	d107      	bne.n	8004740 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8ff 	bl	800493e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b20      	cmp	r3, #32
 800474c:	d10e      	bne.n	800476c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b20      	cmp	r3, #32
 800475a:	d107      	bne.n	800476c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0220 	mvn.w	r2, #32
 8004764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 faaa 	bl	8004cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800476c:	bf00      	nop
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_TIM_ConfigClockSource+0x1c>
 800478c:	2302      	movs	r3, #2
 800478e:	e0b4      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x186>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c8:	d03e      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0xd4>
 80047ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ce:	f200 8087 	bhi.w	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d6:	f000 8086 	beq.w	80048e6 <HAL_TIM_ConfigClockSource+0x172>
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	d87f      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047e0:	2b70      	cmp	r3, #112	; 0x70
 80047e2:	d01a      	beq.n	800481a <HAL_TIM_ConfigClockSource+0xa6>
 80047e4:	2b70      	cmp	r3, #112	; 0x70
 80047e6:	d87b      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047e8:	2b60      	cmp	r3, #96	; 0x60
 80047ea:	d050      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x11a>
 80047ec:	2b60      	cmp	r3, #96	; 0x60
 80047ee:	d877      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047f0:	2b50      	cmp	r3, #80	; 0x50
 80047f2:	d03c      	beq.n	800486e <HAL_TIM_ConfigClockSource+0xfa>
 80047f4:	2b50      	cmp	r3, #80	; 0x50
 80047f6:	d873      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d058      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0x13a>
 80047fc:	2b40      	cmp	r3, #64	; 0x40
 80047fe:	d86f      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004800:	2b30      	cmp	r3, #48	; 0x30
 8004802:	d064      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x15a>
 8004804:	2b30      	cmp	r3, #48	; 0x30
 8004806:	d86b      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004808:	2b20      	cmp	r3, #32
 800480a:	d060      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x15a>
 800480c:	2b20      	cmp	r3, #32
 800480e:	d867      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d05c      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x15a>
 8004814:	2b10      	cmp	r3, #16
 8004816:	d05a      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x15a>
 8004818:	e062      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6899      	ldr	r1, [r3, #8]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f000 f9ad 	bl	8004b88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800483c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	609a      	str	r2, [r3, #8]
      break;
 8004846:	e04f      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	6899      	ldr	r1, [r3, #8]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f000 f996 	bl	8004b88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800486a:	609a      	str	r2, [r3, #8]
      break;
 800486c:	e03c      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6859      	ldr	r1, [r3, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	461a      	mov	r2, r3
 800487c:	f000 f90a 	bl	8004a94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2150      	movs	r1, #80	; 0x50
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f963 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 800488c:	e02c      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6859      	ldr	r1, [r3, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	461a      	mov	r2, r3
 800489c:	f000 f929 	bl	8004af2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2160      	movs	r1, #96	; 0x60
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 f953 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 80048ac:	e01c      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6859      	ldr	r1, [r3, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	461a      	mov	r2, r3
 80048bc:	f000 f8ea 	bl	8004a94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2140      	movs	r1, #64	; 0x40
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f943 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 80048cc:	e00c      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4619      	mov	r1, r3
 80048d8:	4610      	mov	r0, r2
 80048da:	f000 f93a 	bl	8004b52 <TIM_ITRx_SetConfig>
      break;
 80048de:	e003      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
      break;
 80048e4:	e000      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a40      	ldr	r2, [pc, #256]	; (8004a68 <TIM_Base_SetConfig+0x114>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d013      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004972:	d00f      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a3d      	ldr	r2, [pc, #244]	; (8004a6c <TIM_Base_SetConfig+0x118>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00b      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a3c      	ldr	r2, [pc, #240]	; (8004a70 <TIM_Base_SetConfig+0x11c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d007      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a3b      	ldr	r2, [pc, #236]	; (8004a74 <TIM_Base_SetConfig+0x120>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a3a      	ldr	r2, [pc, #232]	; (8004a78 <TIM_Base_SetConfig+0x124>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d108      	bne.n	80049a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2f      	ldr	r2, [pc, #188]	; (8004a68 <TIM_Base_SetConfig+0x114>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d02b      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b4:	d027      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a2c      	ldr	r2, [pc, #176]	; (8004a6c <TIM_Base_SetConfig+0x118>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d023      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2b      	ldr	r2, [pc, #172]	; (8004a70 <TIM_Base_SetConfig+0x11c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01f      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a2a      	ldr	r2, [pc, #168]	; (8004a74 <TIM_Base_SetConfig+0x120>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01b      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a29      	ldr	r2, [pc, #164]	; (8004a78 <TIM_Base_SetConfig+0x124>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d017      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a28      	ldr	r2, [pc, #160]	; (8004a7c <TIM_Base_SetConfig+0x128>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d013      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a27      	ldr	r2, [pc, #156]	; (8004a80 <TIM_Base_SetConfig+0x12c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00f      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a26      	ldr	r2, [pc, #152]	; (8004a84 <TIM_Base_SetConfig+0x130>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00b      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a25      	ldr	r2, [pc, #148]	; (8004a88 <TIM_Base_SetConfig+0x134>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d007      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a24      	ldr	r2, [pc, #144]	; (8004a8c <TIM_Base_SetConfig+0x138>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a23      	ldr	r2, [pc, #140]	; (8004a90 <TIM_Base_SetConfig+0x13c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d108      	bne.n	8004a18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <TIM_Base_SetConfig+0x114>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_Base_SetConfig+0xf8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <TIM_Base_SetConfig+0x124>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d103      	bne.n	8004a54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	615a      	str	r2, [r3, #20]
}
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40000800 	.word	0x40000800
 8004a74:	40000c00 	.word	0x40000c00
 8004a78:	40010400 	.word	0x40010400
 8004a7c:	40014000 	.word	0x40014000
 8004a80:	40014400 	.word	0x40014400
 8004a84:	40014800 	.word	0x40014800
 8004a88:	40001800 	.word	0x40001800
 8004a8c:	40001c00 	.word	0x40001c00
 8004a90:	40002000 	.word	0x40002000

08004a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f023 0201 	bic.w	r2, r3, #1
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f023 030a 	bic.w	r3, r3, #10
 8004ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b087      	sub	sp, #28
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f023 0210 	bic.w	r2, r3, #16
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	031b      	lsls	r3, r3, #12
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b085      	sub	sp, #20
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f043 0307 	orr.w	r3, r3, #7
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	609a      	str	r2, [r3, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ba2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	021a      	lsls	r2, r3, #8
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	609a      	str	r2, [r3, #8]
}
 8004bbc:	bf00      	nop
 8004bbe:	371c      	adds	r7, #28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e05a      	b.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a21      	ldr	r2, [pc, #132]	; (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d022      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2c:	d01d      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1d      	ldr	r2, [pc, #116]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d018      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1b      	ldr	r2, [pc, #108]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d013      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a1a      	ldr	r2, [pc, #104]	; (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00e      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a18      	ldr	r2, [pc, #96]	; (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d009      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a17      	ldr	r2, [pc, #92]	; (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d004      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a15      	ldr	r2, [pc, #84]	; (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d10c      	bne.n	8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40010000 	.word	0x40010000
 8004ca8:	40000400 	.word	0x40000400
 8004cac:	40000800 	.word	0x40000800
 8004cb0:	40000c00 	.word	0x40000c00
 8004cb4:	40010400 	.word	0x40010400
 8004cb8:	40014000 	.word	0x40014000
 8004cbc:	40001800 	.word	0x40001800

08004cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e03f      	b.n	8004d7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7fc fd80 	bl	8001814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2224      	movs	r2, #36	; 0x24
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fddb 	bl	80058e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695a      	ldr	r2, [r3, #20]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b08a      	sub	sp, #40	; 0x28
 8004d86:	af02      	add	r7, sp, #8
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d17c      	bne.n	8004e9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <HAL_UART_Transmit+0x2c>
 8004da8:	88fb      	ldrh	r3, [r7, #6]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e075      	b.n	8004e9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_UART_Transmit+0x3e>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e06e      	b.n	8004e9e <HAL_UART_Transmit+0x11c>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2221      	movs	r2, #33	; 0x21
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dd6:	f7fc ff51 	bl	8001c7c <HAL_GetTick>
 8004dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	88fa      	ldrh	r2, [r7, #6]
 8004de6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df0:	d108      	bne.n	8004e04 <HAL_UART_Transmit+0x82>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d104      	bne.n	8004e04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	61bb      	str	r3, [r7, #24]
 8004e02:	e003      	b.n	8004e0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e14:	e02a      	b.n	8004e6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2180      	movs	r1, #128	; 0x80
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 fb1f 	bl	8005464 <UART_WaitOnFlagUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e036      	b.n	8004e9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10b      	bne.n	8004e4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	3302      	adds	r3, #2
 8004e4a:	61bb      	str	r3, [r7, #24]
 8004e4c:	e007      	b.n	8004e5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	781a      	ldrb	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1cf      	bne.n	8004e16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2140      	movs	r1, #64	; 0x40
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 faef 	bl	8005464 <UART_WaitOnFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e006      	b.n	8004e9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e000      	b.n	8004e9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e9c:	2302      	movs	r3, #2
  }
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	d11d      	bne.n	8004efc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_UART_Receive_IT+0x26>
 8004ec6:	88fb      	ldrh	r3, [r7, #6]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e016      	b.n	8004efe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_UART_Receive_IT+0x38>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e00f      	b.n	8004efe <HAL_UART_Receive_IT+0x58>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004eec:	88fb      	ldrh	r3, [r7, #6]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fb24 	bl	8005540 <UART_Start_Receive_IT>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	e000      	b.n	8004efe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
  }
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b0ba      	sub	sp, #232	; 0xe8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10f      	bne.n	8004f6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d009      	beq.n	8004f6e <HAL_UART_IRQHandler+0x66>
 8004f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fc03 	bl	8005772 <UART_Receive_IT>
      return;
 8004f6c:	e256      	b.n	800541c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80de 	beq.w	8005134 <HAL_UART_IRQHandler+0x22c>
 8004f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d106      	bne.n	8004f92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 80d1 	beq.w	8005134 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <HAL_UART_IRQHandler+0xae>
 8004f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f043 0201 	orr.w	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <HAL_UART_IRQHandler+0xd2>
 8004fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f043 0202 	orr.w	r2, r3, #2
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00b      	beq.n	8004ffe <HAL_UART_IRQHandler+0xf6>
 8004fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d005      	beq.n	8004ffe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f043 0204 	orr.w	r2, r3, #4
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d011      	beq.n	800502e <HAL_UART_IRQHandler+0x126>
 800500a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d105      	bne.n	8005022 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	f043 0208 	orr.w	r2, r3, #8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 81ed 	beq.w	8005412 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b00      	cmp	r3, #0
 8005042:	d008      	beq.n	8005056 <HAL_UART_IRQHandler+0x14e>
 8005044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fb8e 	bl	8005772 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	bf0c      	ite	eq
 8005064:	2301      	moveq	r3, #1
 8005066:	2300      	movne	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <HAL_UART_IRQHandler+0x17a>
 800507a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d04f      	beq.n	8005122 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fa96 	bl	80055b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005092:	2b40      	cmp	r3, #64	; 0x40
 8005094:	d141      	bne.n	800511a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3314      	adds	r3, #20
 800509c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3314      	adds	r3, #20
 80050be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1d9      	bne.n	8005096 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d013      	beq.n	8005112 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	4a7d      	ldr	r2, [pc, #500]	; (80052e4 <HAL_UART_IRQHandler+0x3dc>)
 80050f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fc ff4d 	bl	8001f96 <HAL_DMA_Abort_IT>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d016      	beq.n	8005130 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800510c:	4610      	mov	r0, r2
 800510e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005110:	e00e      	b.n	8005130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f990 	bl	8005438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005118:	e00a      	b.n	8005130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f98c 	bl	8005438 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005120:	e006      	b.n	8005130 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f988 	bl	8005438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800512e:	e170      	b.n	8005412 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005130:	bf00      	nop
    return;
 8005132:	e16e      	b.n	8005412 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	2b01      	cmp	r3, #1
 800513a:	f040 814a 	bne.w	80053d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800513e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005142:	f003 0310 	and.w	r3, r3, #16
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 8143 	beq.w	80053d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800514c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005150:	f003 0310 	and.w	r3, r3, #16
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 813c 	beq.w	80053d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800515a:	2300      	movs	r3, #0
 800515c:	60bb      	str	r3, [r7, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	60bb      	str	r3, [r7, #8]
 800516e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517a:	2b40      	cmp	r3, #64	; 0x40
 800517c:	f040 80b4 	bne.w	80052e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800518c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8140 	beq.w	8005416 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800519a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800519e:	429a      	cmp	r2, r3
 80051a0:	f080 8139 	bcs.w	8005416 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b6:	f000 8088 	beq.w	80052ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	330c      	adds	r3, #12
 80051c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	330c      	adds	r3, #12
 80051e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1d9      	bne.n	80051ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3314      	adds	r3, #20
 800520c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005218:	f023 0301 	bic.w	r3, r3, #1
 800521c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3314      	adds	r3, #20
 8005226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800522a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800522e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005232:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800523c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e1      	bne.n	8005206 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3314      	adds	r3, #20
 8005248:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3314      	adds	r3, #20
 8005262:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005266:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005268:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800526c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1e3      	bne.n	8005242 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800529a:	f023 0310 	bic.w	r3, r3, #16
 800529e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	330c      	adds	r3, #12
 80052a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80052ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e3      	bne.n	8005288 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fc fdf6 	bl	8001eb6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	4619      	mov	r1, r3
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f8b6 	bl	800544c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052e0:	e099      	b.n	8005416 <HAL_UART_IRQHandler+0x50e>
 80052e2:	bf00      	nop
 80052e4:	0800567b 	.word	0x0800567b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 808b 	beq.w	800541a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8086 	beq.w	800541a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800531e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005324:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	330c      	adds	r3, #12
 800532e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005332:	647a      	str	r2, [r7, #68]	; 0x44
 8005334:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800533a:	e841 2300 	strex	r3, r2, [r1]
 800533e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e3      	bne.n	800530e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3314      	adds	r3, #20
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	623b      	str	r3, [r7, #32]
   return(result);
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3314      	adds	r3, #20
 8005366:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800536a:	633a      	str	r2, [r7, #48]	; 0x30
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e3      	bne.n	8005346 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	330c      	adds	r3, #12
 8005392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	60fb      	str	r3, [r7, #12]
   return(result);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0310 	bic.w	r3, r3, #16
 80053a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	330c      	adds	r3, #12
 80053ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053b0:	61fa      	str	r2, [r7, #28]
 80053b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	69b9      	ldr	r1, [r7, #24]
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	617b      	str	r3, [r7, #20]
   return(result);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e3      	bne.n	800538c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f83e 	bl	800544c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053d0:	e023      	b.n	800541a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <HAL_UART_IRQHandler+0x4ea>
 80053de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f959 	bl	80056a2 <UART_Transmit_IT>
    return;
 80053f0:	e014      	b.n	800541c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00e      	beq.n	800541c <HAL_UART_IRQHandler+0x514>
 80053fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d008      	beq.n	800541c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f999 	bl	8005742 <UART_EndTransmit_IT>
    return;
 8005410:	e004      	b.n	800541c <HAL_UART_IRQHandler+0x514>
    return;
 8005412:	bf00      	nop
 8005414:	e002      	b.n	800541c <HAL_UART_IRQHandler+0x514>
      return;
 8005416:	bf00      	nop
 8005418:	e000      	b.n	800541c <HAL_UART_IRQHandler+0x514>
      return;
 800541a:	bf00      	nop
  }
}
 800541c:	37e8      	adds	r7, #232	; 0xe8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop

08005424 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b090      	sub	sp, #64	; 0x40
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	4613      	mov	r3, r2
 8005472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005474:	e050      	b.n	8005518 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547c:	d04c      	beq.n	8005518 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800547e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005480:	2b00      	cmp	r3, #0
 8005482:	d007      	beq.n	8005494 <UART_WaitOnFlagUntilTimeout+0x30>
 8005484:	f7fc fbfa 	bl	8001c7c <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005490:	429a      	cmp	r2, r3
 8005492:	d241      	bcs.n	8005518 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	330c      	adds	r3, #12
 800549a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	330c      	adds	r3, #12
 80054b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054b4:	637a      	str	r2, [r7, #52]	; 0x34
 80054b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3314      	adds	r3, #20
 80054ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	613b      	str	r3, [r7, #16]
   return(result);
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f023 0301 	bic.w	r3, r3, #1
 80054de:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3314      	adds	r3, #20
 80054e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054e8:	623a      	str	r2, [r7, #32]
 80054ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	69f9      	ldr	r1, [r7, #28]
 80054ee:	6a3a      	ldr	r2, [r7, #32]
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e5      	bne.n	80054c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e00f      	b.n	8005538 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4013      	ands	r3, r2
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	429a      	cmp	r2, r3
 8005526:	bf0c      	ite	eq
 8005528:	2301      	moveq	r3, #1
 800552a:	2300      	movne	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	429a      	cmp	r2, r3
 8005534:	d09f      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3740      	adds	r7, #64	; 0x40
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	4613      	mov	r3, r2
 800554c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	88fa      	ldrh	r2, [r7, #6]
 8005558:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	88fa      	ldrh	r2, [r7, #6]
 800555e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2222      	movs	r2, #34	; 0x22
 800556a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005584:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695a      	ldr	r2, [r3, #20]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 0201 	orr.w	r2, r2, #1
 8005594:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0220 	orr.w	r2, r2, #32
 80055a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b095      	sub	sp, #84	; 0x54
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	330c      	adds	r3, #12
 80055da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055dc:	643a      	str	r2, [r7, #64]	; 0x40
 80055de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e5      	bne.n	80055bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3314      	adds	r3, #20
 80055f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	e853 3f00 	ldrex	r3, [r3]
 80055fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	f023 0301 	bic.w	r3, r3, #1
 8005606:	64bb      	str	r3, [r7, #72]	; 0x48
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3314      	adds	r3, #20
 800560e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005610:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e5      	bne.n	80055f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005628:	2b01      	cmp	r3, #1
 800562a:	d119      	bne.n	8005660 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	330c      	adds	r3, #12
 8005632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	60bb      	str	r3, [r7, #8]
   return(result);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f023 0310 	bic.w	r3, r3, #16
 8005642:	647b      	str	r3, [r7, #68]	; 0x44
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800564c:	61ba      	str	r2, [r7, #24]
 800564e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6979      	ldr	r1, [r7, #20]
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	613b      	str	r3, [r7, #16]
   return(result);
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e5      	bne.n	800562c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800566e:	bf00      	nop
 8005670:	3754      	adds	r7, #84	; 0x54
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f7ff fecf 	bl	8005438 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b21      	cmp	r3, #33	; 0x21
 80056b4:	d13e      	bne.n	8005734 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056be:	d114      	bne.n	80056ea <UART_Transmit_IT+0x48>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d110      	bne.n	80056ea <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	1c9a      	adds	r2, r3, #2
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	621a      	str	r2, [r3, #32]
 80056e8:	e008      	b.n	80056fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	1c59      	adds	r1, r3, #1
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6211      	str	r1, [r2, #32]
 80056f4:	781a      	ldrb	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005700:	b29b      	uxth	r3, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	b29b      	uxth	r3, r3
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	4619      	mov	r1, r3
 800570a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10f      	bne.n	8005730 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800571e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800572e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	e000      	b.n	8005736 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005734:	2302      	movs	r3, #2
  }
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b082      	sub	sp, #8
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005758:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff fe5e 	bl	8005424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b08c      	sub	sp, #48	; 0x30
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b22      	cmp	r3, #34	; 0x22
 8005784:	f040 80ab 	bne.w	80058de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005790:	d117      	bne.n	80057c2 <UART_Receive_IT+0x50>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d113      	bne.n	80057c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800579a:	2300      	movs	r3, #0
 800579c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	1c9a      	adds	r2, r3, #2
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	629a      	str	r2, [r3, #40]	; 0x28
 80057c0:	e026      	b.n	8005810 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d4:	d007      	beq.n	80057e6 <UART_Receive_IT+0x74>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <UART_Receive_IT+0x82>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	e008      	b.n	8005806 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005800:	b2da      	uxtb	r2, r3
 8005802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005804:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b29b      	uxth	r3, r3
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	4619      	mov	r1, r3
 800581e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005820:	2b00      	cmp	r3, #0
 8005822:	d15a      	bne.n	80058da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0220 	bic.w	r2, r2, #32
 8005832:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005842:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695a      	ldr	r2, [r3, #20]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0201 	bic.w	r2, r2, #1
 8005852:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005860:	2b01      	cmp	r3, #1
 8005862:	d135      	bne.n	80058d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	330c      	adds	r3, #12
 8005870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	613b      	str	r3, [r7, #16]
   return(result);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f023 0310 	bic.w	r3, r3, #16
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588a:	623a      	str	r2, [r7, #32]
 800588c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	69f9      	ldr	r1, [r7, #28]
 8005890:	6a3a      	ldr	r2, [r7, #32]
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	61bb      	str	r3, [r7, #24]
   return(result);
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e5      	bne.n	800586a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0310 	and.w	r3, r3, #16
 80058a8:	2b10      	cmp	r3, #16
 80058aa:	d10a      	bne.n	80058c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058ac:	2300      	movs	r3, #0
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058c6:	4619      	mov	r1, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff fdbf 	bl	800544c <HAL_UARTEx_RxEventCallback>
 80058ce:	e002      	b.n	80058d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7fc f8e1 	bl	8001a98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	e002      	b.n	80058e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	e000      	b.n	80058e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80058de:	2302      	movs	r3, #2
  }
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3730      	adds	r7, #48	; 0x30
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ec:	b09f      	sub	sp, #124	; 0x7c
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fe:	68d9      	ldr	r1, [r3, #12]
 8005900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	ea40 0301 	orr.w	r3, r0, r1
 8005908:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800590a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	431a      	orrs	r2, r3
 8005914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	431a      	orrs	r2, r3
 800591a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	4313      	orrs	r3, r2
 8005920:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800592c:	f021 010c 	bic.w	r1, r1, #12
 8005930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005936:	430b      	orrs	r3, r1
 8005938:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800593a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005946:	6999      	ldr	r1, [r3, #24]
 8005948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	ea40 0301 	orr.w	r3, r0, r1
 8005950:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	4bc5      	ldr	r3, [pc, #788]	; (8005c6c <UART_SetConfig+0x384>)
 8005958:	429a      	cmp	r2, r3
 800595a:	d004      	beq.n	8005966 <UART_SetConfig+0x7e>
 800595c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	4bc3      	ldr	r3, [pc, #780]	; (8005c70 <UART_SetConfig+0x388>)
 8005962:	429a      	cmp	r2, r3
 8005964:	d103      	bne.n	800596e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005966:	f7fd ff3d 	bl	80037e4 <HAL_RCC_GetPCLK2Freq>
 800596a:	6778      	str	r0, [r7, #116]	; 0x74
 800596c:	e002      	b.n	8005974 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800596e:	f7fd ff25 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 8005972:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800597c:	f040 80b6 	bne.w	8005aec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005982:	461c      	mov	r4, r3
 8005984:	f04f 0500 	mov.w	r5, #0
 8005988:	4622      	mov	r2, r4
 800598a:	462b      	mov	r3, r5
 800598c:	1891      	adds	r1, r2, r2
 800598e:	6439      	str	r1, [r7, #64]	; 0x40
 8005990:	415b      	adcs	r3, r3
 8005992:	647b      	str	r3, [r7, #68]	; 0x44
 8005994:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005998:	1912      	adds	r2, r2, r4
 800599a:	eb45 0303 	adc.w	r3, r5, r3
 800599e:	f04f 0000 	mov.w	r0, #0
 80059a2:	f04f 0100 	mov.w	r1, #0
 80059a6:	00d9      	lsls	r1, r3, #3
 80059a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059ac:	00d0      	lsls	r0, r2, #3
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	1911      	adds	r1, r2, r4
 80059b4:	6639      	str	r1, [r7, #96]	; 0x60
 80059b6:	416b      	adcs	r3, r5
 80059b8:	667b      	str	r3, [r7, #100]	; 0x64
 80059ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	461a      	mov	r2, r3
 80059c0:	f04f 0300 	mov.w	r3, #0
 80059c4:	1891      	adds	r1, r2, r2
 80059c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80059c8:	415b      	adcs	r3, r3
 80059ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80059d4:	f7fa fc00 	bl	80001d8 <__aeabi_uldivmod>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4ba5      	ldr	r3, [pc, #660]	; (8005c74 <UART_SetConfig+0x38c>)
 80059de:	fba3 2302 	umull	r2, r3, r3, r2
 80059e2:	095b      	lsrs	r3, r3, #5
 80059e4:	011e      	lsls	r6, r3, #4
 80059e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e8:	461c      	mov	r4, r3
 80059ea:	f04f 0500 	mov.w	r5, #0
 80059ee:	4622      	mov	r2, r4
 80059f0:	462b      	mov	r3, r5
 80059f2:	1891      	adds	r1, r2, r2
 80059f4:	6339      	str	r1, [r7, #48]	; 0x30
 80059f6:	415b      	adcs	r3, r3
 80059f8:	637b      	str	r3, [r7, #52]	; 0x34
 80059fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80059fe:	1912      	adds	r2, r2, r4
 8005a00:	eb45 0303 	adc.w	r3, r5, r3
 8005a04:	f04f 0000 	mov.w	r0, #0
 8005a08:	f04f 0100 	mov.w	r1, #0
 8005a0c:	00d9      	lsls	r1, r3, #3
 8005a0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a12:	00d0      	lsls	r0, r2, #3
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	1911      	adds	r1, r2, r4
 8005a1a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a1c:	416b      	adcs	r3, r5
 8005a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	461a      	mov	r2, r3
 8005a26:	f04f 0300 	mov.w	r3, #0
 8005a2a:	1891      	adds	r1, r2, r2
 8005a2c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a2e:	415b      	adcs	r3, r3
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a36:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005a3a:	f7fa fbcd 	bl	80001d8 <__aeabi_uldivmod>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4b8c      	ldr	r3, [pc, #560]	; (8005c74 <UART_SetConfig+0x38c>)
 8005a44:	fba3 1302 	umull	r1, r3, r3, r2
 8005a48:	095b      	lsrs	r3, r3, #5
 8005a4a:	2164      	movs	r1, #100	; 0x64
 8005a4c:	fb01 f303 	mul.w	r3, r1, r3
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	3332      	adds	r3, #50	; 0x32
 8005a56:	4a87      	ldr	r2, [pc, #540]	; (8005c74 <UART_SetConfig+0x38c>)
 8005a58:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5c:	095b      	lsrs	r3, r3, #5
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a64:	441e      	add	r6, r3
 8005a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f04f 0100 	mov.w	r1, #0
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	1894      	adds	r4, r2, r2
 8005a74:	623c      	str	r4, [r7, #32]
 8005a76:	415b      	adcs	r3, r3
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
 8005a7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a7e:	1812      	adds	r2, r2, r0
 8005a80:	eb41 0303 	adc.w	r3, r1, r3
 8005a84:	f04f 0400 	mov.w	r4, #0
 8005a88:	f04f 0500 	mov.w	r5, #0
 8005a8c:	00dd      	lsls	r5, r3, #3
 8005a8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a92:	00d4      	lsls	r4, r2, #3
 8005a94:	4622      	mov	r2, r4
 8005a96:	462b      	mov	r3, r5
 8005a98:	1814      	adds	r4, r2, r0
 8005a9a:	653c      	str	r4, [r7, #80]	; 0x50
 8005a9c:	414b      	adcs	r3, r1
 8005a9e:	657b      	str	r3, [r7, #84]	; 0x54
 8005aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	f04f 0300 	mov.w	r3, #0
 8005aaa:	1891      	adds	r1, r2, r2
 8005aac:	61b9      	str	r1, [r7, #24]
 8005aae:	415b      	adcs	r3, r3
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ab6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005aba:	f7fa fb8d 	bl	80001d8 <__aeabi_uldivmod>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4b6c      	ldr	r3, [pc, #432]	; (8005c74 <UART_SetConfig+0x38c>)
 8005ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	2164      	movs	r1, #100	; 0x64
 8005acc:	fb01 f303 	mul.w	r3, r1, r3
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	3332      	adds	r3, #50	; 0x32
 8005ad6:	4a67      	ldr	r2, [pc, #412]	; (8005c74 <UART_SetConfig+0x38c>)
 8005ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8005adc:	095b      	lsrs	r3, r3, #5
 8005ade:	f003 0207 	and.w	r2, r3, #7
 8005ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4432      	add	r2, r6
 8005ae8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005aea:	e0b9      	b.n	8005c60 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aee:	461c      	mov	r4, r3
 8005af0:	f04f 0500 	mov.w	r5, #0
 8005af4:	4622      	mov	r2, r4
 8005af6:	462b      	mov	r3, r5
 8005af8:	1891      	adds	r1, r2, r2
 8005afa:	6139      	str	r1, [r7, #16]
 8005afc:	415b      	adcs	r3, r3
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b04:	1912      	adds	r2, r2, r4
 8005b06:	eb45 0303 	adc.w	r3, r5, r3
 8005b0a:	f04f 0000 	mov.w	r0, #0
 8005b0e:	f04f 0100 	mov.w	r1, #0
 8005b12:	00d9      	lsls	r1, r3, #3
 8005b14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b18:	00d0      	lsls	r0, r2, #3
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	eb12 0804 	adds.w	r8, r2, r4
 8005b22:	eb43 0905 	adc.w	r9, r3, r5
 8005b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f04f 0100 	mov.w	r1, #0
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	008b      	lsls	r3, r1, #2
 8005b3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b3e:	0082      	lsls	r2, r0, #2
 8005b40:	4640      	mov	r0, r8
 8005b42:	4649      	mov	r1, r9
 8005b44:	f7fa fb48 	bl	80001d8 <__aeabi_uldivmod>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4b49      	ldr	r3, [pc, #292]	; (8005c74 <UART_SetConfig+0x38c>)
 8005b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b52:	095b      	lsrs	r3, r3, #5
 8005b54:	011e      	lsls	r6, r3, #4
 8005b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f04f 0100 	mov.w	r1, #0
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	1894      	adds	r4, r2, r2
 8005b64:	60bc      	str	r4, [r7, #8]
 8005b66:	415b      	adcs	r3, r3
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b6e:	1812      	adds	r2, r2, r0
 8005b70:	eb41 0303 	adc.w	r3, r1, r3
 8005b74:	f04f 0400 	mov.w	r4, #0
 8005b78:	f04f 0500 	mov.w	r5, #0
 8005b7c:	00dd      	lsls	r5, r3, #3
 8005b7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b82:	00d4      	lsls	r4, r2, #3
 8005b84:	4622      	mov	r2, r4
 8005b86:	462b      	mov	r3, r5
 8005b88:	1814      	adds	r4, r2, r0
 8005b8a:	64bc      	str	r4, [r7, #72]	; 0x48
 8005b8c:	414b      	adcs	r3, r1
 8005b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f04f 0100 	mov.w	r1, #0
 8005b9a:	f04f 0200 	mov.w	r2, #0
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	008b      	lsls	r3, r1, #2
 8005ba4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ba8:	0082      	lsls	r2, r0, #2
 8005baa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005bae:	f7fa fb13 	bl	80001d8 <__aeabi_uldivmod>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4b2f      	ldr	r3, [pc, #188]	; (8005c74 <UART_SetConfig+0x38c>)
 8005bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	2164      	movs	r1, #100	; 0x64
 8005bc0:	fb01 f303 	mul.w	r3, r1, r3
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	3332      	adds	r3, #50	; 0x32
 8005bca:	4a2a      	ldr	r2, [pc, #168]	; (8005c74 <UART_SetConfig+0x38c>)
 8005bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd0:	095b      	lsrs	r3, r3, #5
 8005bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bd6:	441e      	add	r6, r3
 8005bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f04f 0100 	mov.w	r1, #0
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	1894      	adds	r4, r2, r2
 8005be6:	603c      	str	r4, [r7, #0]
 8005be8:	415b      	adcs	r3, r3
 8005bea:	607b      	str	r3, [r7, #4]
 8005bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bf0:	1812      	adds	r2, r2, r0
 8005bf2:	eb41 0303 	adc.w	r3, r1, r3
 8005bf6:	f04f 0400 	mov.w	r4, #0
 8005bfa:	f04f 0500 	mov.w	r5, #0
 8005bfe:	00dd      	lsls	r5, r3, #3
 8005c00:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c04:	00d4      	lsls	r4, r2, #3
 8005c06:	4622      	mov	r2, r4
 8005c08:	462b      	mov	r3, r5
 8005c0a:	eb12 0a00 	adds.w	sl, r2, r0
 8005c0e:	eb43 0b01 	adc.w	fp, r3, r1
 8005c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f04f 0100 	mov.w	r1, #0
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	008b      	lsls	r3, r1, #2
 8005c26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c2a:	0082      	lsls	r2, r0, #2
 8005c2c:	4650      	mov	r0, sl
 8005c2e:	4659      	mov	r1, fp
 8005c30:	f7fa fad2 	bl	80001d8 <__aeabi_uldivmod>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4b0e      	ldr	r3, [pc, #56]	; (8005c74 <UART_SetConfig+0x38c>)
 8005c3a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	2164      	movs	r1, #100	; 0x64
 8005c42:	fb01 f303 	mul.w	r3, r1, r3
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	3332      	adds	r3, #50	; 0x32
 8005c4c:	4a09      	ldr	r2, [pc, #36]	; (8005c74 <UART_SetConfig+0x38c>)
 8005c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	f003 020f 	and.w	r2, r3, #15
 8005c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4432      	add	r2, r6
 8005c5e:	609a      	str	r2, [r3, #8]
}
 8005c60:	bf00      	nop
 8005c62:	377c      	adds	r7, #124	; 0x7c
 8005c64:	46bd      	mov	sp, r7
 8005c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c6a:	bf00      	nop
 8005c6c:	40011000 	.word	0x40011000
 8005c70:	40011400 	.word	0x40011400
 8005c74:	51eb851f 	.word	0x51eb851f

08005c78 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c90:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4b20      	ldr	r3, [pc, #128]	; (8005d18 <FSMC_NORSRAM_Init+0xa0>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005ca2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8005ca8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8005cae:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8005cb4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8005cba:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8005cc0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8005cc6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005ccc:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8005cd2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8005cd8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8005cde:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8005ce4:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d103      	bne.n	8005cfc <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cfa:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68f9      	ldr	r1, [r7, #12]
 8005d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	fff00080 	.word	0xfff00080

08005d1c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d36:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005d3e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005d4a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005d52:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8005d5a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	3b01      	subs	r3, #1
 8005d62:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005d64:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	3b02      	subs	r3, #2
 8005d6c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005d6e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005d74:	4313      	orrs	r3, r2
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6979      	ldr	r1, [r7, #20]
 8005d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
	...

08005d98 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005db0:	d122      	bne.n	8005df8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dba:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4b15      	ldr	r3, [pc, #84]	; (8005e14 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005dce:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005dd6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005dde:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005de4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6979      	ldr	r1, [r7, #20]
 8005df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005df6:	e005      	b.n	8005e04 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	cff00000 	.word	0xcff00000

08005e18 <__libc_init_array>:
 8005e18:	b570      	push	{r4, r5, r6, lr}
 8005e1a:	4d0d      	ldr	r5, [pc, #52]	; (8005e50 <__libc_init_array+0x38>)
 8005e1c:	4c0d      	ldr	r4, [pc, #52]	; (8005e54 <__libc_init_array+0x3c>)
 8005e1e:	1b64      	subs	r4, r4, r5
 8005e20:	10a4      	asrs	r4, r4, #2
 8005e22:	2600      	movs	r6, #0
 8005e24:	42a6      	cmp	r6, r4
 8005e26:	d109      	bne.n	8005e3c <__libc_init_array+0x24>
 8005e28:	4d0b      	ldr	r5, [pc, #44]	; (8005e58 <__libc_init_array+0x40>)
 8005e2a:	4c0c      	ldr	r4, [pc, #48]	; (8005e5c <__libc_init_array+0x44>)
 8005e2c:	f000 f820 	bl	8005e70 <_init>
 8005e30:	1b64      	subs	r4, r4, r5
 8005e32:	10a4      	asrs	r4, r4, #2
 8005e34:	2600      	movs	r6, #0
 8005e36:	42a6      	cmp	r6, r4
 8005e38:	d105      	bne.n	8005e46 <__libc_init_array+0x2e>
 8005e3a:	bd70      	pop	{r4, r5, r6, pc}
 8005e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e40:	4798      	blx	r3
 8005e42:	3601      	adds	r6, #1
 8005e44:	e7ee      	b.n	8005e24 <__libc_init_array+0xc>
 8005e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e4a:	4798      	blx	r3
 8005e4c:	3601      	adds	r6, #1
 8005e4e:	e7f2      	b.n	8005e36 <__libc_init_array+0x1e>
 8005e50:	0800cd90 	.word	0x0800cd90
 8005e54:	0800cd90 	.word	0x0800cd90
 8005e58:	0800cd90 	.word	0x0800cd90
 8005e5c:	0800cd94 	.word	0x0800cd94

08005e60 <memset>:
 8005e60:	4402      	add	r2, r0
 8005e62:	4603      	mov	r3, r0
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d100      	bne.n	8005e6a <memset+0xa>
 8005e68:	4770      	bx	lr
 8005e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e6e:	e7f9      	b.n	8005e64 <memset+0x4>

08005e70 <_init>:
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	bf00      	nop
 8005e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e76:	bc08      	pop	{r3}
 8005e78:	469e      	mov	lr, r3
 8005e7a:	4770      	bx	lr

08005e7c <_fini>:
 8005e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7e:	bf00      	nop
 8005e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e82:	bc08      	pop	{r3}
 8005e84:	469e      	mov	lr, r3
 8005e86:	4770      	bx	lr
